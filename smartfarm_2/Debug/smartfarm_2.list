
smartfarm_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009090  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080091a0  080091a0  000191a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08009570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005f4  200001e0  0800974c  000201e0  2**3
                  ALLOC
  7 ._user_heap_stack 00000a00  200007d4  0800974c  000207d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f857  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029dd  00000000  00000000  0002fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000db0  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006e67  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004060  00000000  00000000  0003acf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ed57  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004208  00000000  00000000  0003edd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009188 	.word	0x08009188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009188 	.word	0x08009188

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_f2uiz>:
 8000d3c:	0042      	lsls	r2, r0, #1
 8000d3e:	d20e      	bcs.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d44:	d30b      	bcc.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d4e:	d409      	bmi.n	8000d64 <__aeabi_f2uiz+0x28>
 8000d50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	fa23 f002 	lsr.w	r0, r3, r2
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr
 8000d64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d68:	d101      	bne.n	8000d6e <__aeabi_f2uiz+0x32>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d102      	bne.n	8000d74 <__aeabi_f2uiz+0x38>
 8000d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d72:	4770      	bx	lr
 8000d74:	f04f 0000 	mov.w	r0, #0
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_CAN_Init+0x64>)
 8000d82:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <MX_CAN_Init+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_CAN_Init+0x64>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_CAN_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_CAN_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_CAN_Init+0x64>)
 8000d9a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d9e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_CAN_Init+0x64>)
 8000da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000da6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_CAN_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_CAN_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_CAN_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_CAN_Init+0x64>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_CAN_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_CAN_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_CAN_Init+0x64>)
 8000dce:	f001 f8f1 	bl	8001fb4 <HAL_CAN_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f000 f9bc 	bl	8001154 <Error_Handler>
  }

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000218 	.word	0x20000218
 8000de4:	40006400 	.word	0x40006400

08000de8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <HAL_CAN_MspInit+0xc0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d14b      	bne.n	8000ea0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e08:	4a28      	ldr	r2, [pc, #160]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e12:	61d3      	str	r3, [r2, #28]
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <HAL_CAN_MspInit+0xc8>)
 8000e4e:	f002 f8ed 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <HAL_CAN_MspInit+0xc8>)
 8000e68:	f002 f8e0 	bl	800302c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_CAN_MspInit+0xcc>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_CAN_MspInit+0xcc>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2014      	movs	r0, #20
 8000e96:	f001 fdd0 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e9a:	2014      	movs	r0, #20
 8000e9c:	f001 fde9 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40006400 	.word	0x40006400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	481d      	ldr	r0, [pc, #116]	; (8000f90 <MX_GPIO_Init+0xd8>)
 8000f1c:	f002 f9e0 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHT_RESET_GPIO_Port, SHT_RESET_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f26:	481b      	ldr	r0, [pc, #108]	; (8000f94 <MX_GPIO_Init+0xdc>)
 8000f28:	f002 f9da 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4812      	ldr	r0, [pc, #72]	; (8000f90 <MX_GPIO_Init+0xd8>)
 8000f46:	f002 f871 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHT_RESET_Pin;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_GPIO_Init+0xdc>)
 8000f64:	f002 f862 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHT_ALERT_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHT_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0xdc>)
 8000f7e:	f002 f855 	bl	800302c <HAL_GPIO_Init>

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x58>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 136;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb0:	2288      	movs	r2, #136	; 0x88
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd6:	f002 f9b5 	bl	8003344 <HAL_I2C_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe0:	f000 f8b8 	bl	8001154 <Error_Handler>
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000240 	.word	0x20000240
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	00061a80 	.word	0x00061a80

08000ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_I2C_MspInit+0x90>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d133      	bne.n	800107c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHT_CLK_Pin|SHT_DATA_Pin;
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4813      	ldr	r0, [pc, #76]	; (800108c <HAL_I2C_MspInit+0x98>)
 8001040:	f001 fff4 	bl	800302c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201f      	movs	r0, #31
 8001062:	f001 fcea 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001066:	201f      	movs	r0, #31
 8001068:	f001 fd03 	bl	8002a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2020      	movs	r0, #32
 8001072:	f001 fce2 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001076:	2020      	movs	r0, #32
 8001078:	f001 fcfb 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40005400 	.word	0x40005400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 ff0a 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f80f 	bl	80010ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f7ff ff0c 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010a0:	f000 fe8e 	bl	8001dc0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 80010a4:	f7ff fe6a 	bl	8000d7c <MX_CAN_Init>
  MX_I2C1_Init();
 80010a8:	f7ff ff76 	bl	8000f98 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80010ac:	f000 f846 	bl	800113c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80010b0:	f000 f856 	bl	8001160 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80010b4:	f000 f886 	bl	80011c4 <loop>
 80010b8:	e7fc      	b.n	80010b4 <main+0x24>

080010ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b090      	sub	sp, #64	; 0x40
 80010be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	2228      	movs	r2, #40	; 0x28
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 ff5e 	bl	8006f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010f0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fd96 	bl	8005c2c <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001106:	f000 f825 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001116:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2102      	movs	r1, #2
 8001124:	4618      	mov	r0, r3
 8001126:	f005 f801 	bl	800612c <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001130:	f000 f810 	bl	8001154 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	; 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2025      	movs	r0, #37	; 0x25
 8001146:	f001 fc78 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800114a:	2025      	movs	r0, #37	; 0x25
 800114c:	f001 fc91 	bl	8002a72 <HAL_NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <setup>:
uartQ_t g_uartQ1;
MODULE_INFO g_ModuleInfo;


void setup()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan);
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <setup+0x4c>)
 8001166:	f001 f81f 	bl	80021a8 <HAL_CAN_Start>
	uartutils_init(&g_uartQ1);
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <setup+0x50>)
 800116c:	f000 fdd0 	bl	8001d10 <uartutils_init>
	HAL_UART_Receive_IT(&huart1, &g_u8RxData, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	4910      	ldr	r1, [pc, #64]	; (80011b4 <setup+0x54>)
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <setup+0x58>)
 8001176:	f005 fa53 	bl	8006620 <HAL_UART_Receive_IT>

	HAL_FLASH_Unlock();
 800117a:	f001 fdc7 	bl	8002d0c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_OPTVERR);
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <setup+0x5c>)
 8001180:	f240 1235 	movw	r2, #309	; 0x135
 8001184:	60da      	str	r2, [r3, #12]
	HAL_FLASH_Lock();
 8001186:	f001 fde7 	bl	8002d58 <HAL_FLASH_Lock>

    g_ModuleInfo.can_BT_SJW=1;
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <setup+0x60>)
 800118c:	2201      	movs	r2, #1
 800118e:	71da      	strb	r2, [r3, #7]
    g_ModuleInfo.can_BT_BS1=2;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <setup+0x60>)
 8001192:	2202      	movs	r2, #2
 8001194:	715a      	strb	r2, [r3, #5]
    g_ModuleInfo.can_BT_BS2=3;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <setup+0x60>)
 8001198:	2203      	movs	r2, #3
 800119a:	719a      	strb	r2, [r3, #6]
    g_ModuleInfo.can_BT_Prescaler=4;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <setup+0x60>)
 800119e:	2204      	movs	r2, #4
 80011a0:	811a      	strh	r2, [r3, #8]
	_flash_write();
 80011a2:	f000 fb79 	bl	8001898 <_flash_write>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000218 	.word	0x20000218
 80011b0:	200002a8 	.word	0x200002a8
 80011b4:	200002a4 	.word	0x200002a4
 80011b8:	20000764 	.word	0x20000764
 80011bc:	40022000 	.word	0x40022000
 80011c0:	20000294 	.word	0x20000294

080011c4 <loop>:

void loop()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	loop_parse();
 80011c8:	f000 f822 	bl	8001210 <loop_parse>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_UART_RxCpltCallback>:

// �씤�꽣�읇�듃 肄쒕갚 �븿�닔: �씤�꽣�읇�듃媛� 諛쒖깮�릺硫� �씠 �븿�닔媛� �샇異쒕맂�떎.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
//
//        // 諛쏆� �뜲�씠�꽣瑜� �쟾�넚�븳�떎.
//		HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
//	}

	if (huart->Instance == USART1) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_UART_RxCpltCallback+0x30>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10a      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0x28>
	    uartutils_push(&g_uartQ1,g_u8RxData);	//push data into Queue
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_UART_RxCpltCallback+0x34>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <HAL_UART_RxCpltCallback+0x38>)
 80011ea:	f000 fda7 	bl	8001d3c <uartutils_push>
	    HAL_UART_Receive_IT(&huart1, &g_u8RxData, 1);//permit RX interrupt.
 80011ee:	2201      	movs	r2, #1
 80011f0:	4904      	ldr	r1, [pc, #16]	; (8001204 <HAL_UART_RxCpltCallback+0x34>)
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_UART_RxCpltCallback+0x3c>)
 80011f4:	f005 fa14 	bl	8006620 <HAL_UART_Receive_IT>
	  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013800 	.word	0x40013800
 8001204:	200002a4 	.word	0x200002a4
 8001208:	200002a8 	.word	0x200002a8
 800120c:	20000764 	.word	0x20000764

08001210 <loop_parse>:
uint8_t can1Rx0Data[8];
uint32_t TxMailBox;
uint8_t can1Tx0Date[8];

void loop_parse()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	uint8_t bData;
	if(uartutils_isEmpty(&g_uartQ1) == 0)
 8001216:	4820      	ldr	r0, [pc, #128]	; (8001298 <loop_parse+0x88>)
 8001218:	f000 fdbf 	bl	8001d9a <uartutils_isEmpty>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d136      	bne.n	8001290 <loop_parse+0x80>
	{
		bData = uartutils_pop(&g_uartQ1);
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <loop_parse+0x88>)
 8001224:	f000 fda2 	bl	8001d6c <uartutils_pop>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]

		if(bData==(uint8_t)(';') ) //|| bData==(u8)('O'))
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b3b      	cmp	r3, #59	; 0x3b
 8001230:	d10e      	bne.n	8001250 <loop_parse+0x40>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <loop_parse+0x8c>)
 8001238:	f002 f86a 	bl	8003310 <HAL_GPIO_TogglePin>

			_u32InputCnt1=1;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <loop_parse+0x90>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
			_u8FlagInput1=1;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <loop_parse+0x94>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
			_pParsingBuffer1[0]=bData;
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <loop_parse+0x98>)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	7013      	strb	r3, [r2, #0]
				_u32InputCnt1++;
			}
		}

	}
}
 800124e:	e01f      	b.n	8001290 <loop_parse+0x80>
		else if(bData==(uint8_t)(0x0d))
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b0d      	cmp	r3, #13
 8001254:	d10e      	bne.n	8001274 <loop_parse+0x64>
			_u8FlagInput1=0;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <loop_parse+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
			Parse_2CAN_UART(_pParsingBuffer1,_u32InputCnt1);
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <loop_parse+0x90>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <loop_parse+0x98>)
 8001264:	f000 f822 	bl	80012ac <Parse_2CAN_UART>
			memset(_pParsingBuffer1,0,64);
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <loop_parse+0x98>)
 800126e:	f005 fe8c 	bl	8006f8a <memset>
}
 8001272:	e00d      	b.n	8001290 <loop_parse+0x80>
			if(_u8FlagInput1==1)
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <loop_parse+0x94>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d109      	bne.n	8001290 <loop_parse+0x80>
				_pParsingBuffer1[_u32InputCnt1]=bData;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <loop_parse+0x90>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4909      	ldr	r1, [pc, #36]	; (80012a8 <loop_parse+0x98>)
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	54ca      	strb	r2, [r1, r3]
				_u32InputCnt1++;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <loop_parse+0x90>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <loop_parse+0x90>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002a8 	.word	0x200002a8
 800129c:	40011000 	.word	0x40011000
 80012a0:	2000075c 	.word	0x2000075c
 80012a4:	20000760 	.word	0x20000760
 80012a8:	20000700 	.word	0x20000700

080012ac <Parse_2CAN_UART>:

void Parse_2CAN_UART(u8 *pParsingBuf, u32 length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
    u8 u8Cmd;
    /*u8 pData[64];
    u16 u16Length;*/
    //static u32 u32cnt=0;

    u8Cmd=_M_str2u8(&pParsingBuf[1],2,16);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	2210      	movs	r2, #16
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fa8a 	bl	80017d8 <_M_str2u8>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    sprintf(pData, "command %d\r", u8Cmd);
 80012ca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4947      	ldr	r1, [pc, #284]	; (80013f0 <Parse_2CAN_UART+0x144>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 fac1 	bl	800785c <siprintf>
    u16Length=strlen(pData);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    HAL_UART_Transmit(&huart1,pData,u16Length,10);
 80012ea:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80012ee:	f107 010c 	add.w	r1, r7, #12
 80012f2:	230a      	movs	r3, #10
 80012f4:	483f      	ldr	r0, [pc, #252]	; (80013f4 <Parse_2CAN_UART+0x148>)
 80012f6:	f005 f902 	bl	80064fe <HAL_UART_Transmit>

    switch(u8Cmd)
 80012fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d870      	bhi.n	80013e4 <Parse_2CAN_UART+0x138>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <Parse_2CAN_UART+0x5c>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001325 	.word	0x08001325
 800130c:	0800132b 	.word	0x0800132b
 8001310:	080013e5 	.word	0x080013e5
 8001314:	08001335 	.word	0x08001335
 8001318:	08001355 	.word	0x08001355
 800131c:	08001375 	.word	0x08001375
 8001320:	080013df 	.word	0x080013df
    {
    case 0x00:                  // Read Device Information
    	Parse2CAN_ResDeviceInfo();
 8001324:	f000 f86a 	bl	80013fc <Parse2CAN_ResDeviceInfo>
        break;
 8001328:	e05d      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    case 0x01:                  // Read Device Information
    	_flash_read();
 800132a:	f000 fa79 	bl	8001820 <_flash_read>
    	Parse2CAN_ResReadStatus();
 800132e:	f000 f897 	bl	8001460 <Parse2CAN_ResReadStatus>
        break;
 8001332:	e058      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    case 0x03:
        g_ModuleInfo.can_ID_type=CAN_ID_STD;
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 8001336:	2200      	movs	r2, #0
 8001338:	729a      	strb	r2, [r3, #10]
        g_ModuleInfo.can_ID=(u32)_M_str2u32(&pParsingBuf[3],3,16);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3303      	adds	r3, #3
 800133e:	2210      	movs	r2, #16
 8001340:	2103      	movs	r1, #3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fa24 	bl	8001790 <_M_str2u32>
 8001348:	4602      	mov	r2, r0
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 800134c:	60da      	str	r2, [r3, #12]
        _flash_write();
 800134e:	f000 faa3 	bl	8001898 <_flash_write>
        break;
 8001352:	e048      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    case 0x04:
        g_ModuleInfo.can_ID_type=CAN_ID_EXT;
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 8001356:	2204      	movs	r2, #4
 8001358:	729a      	strb	r2, [r3, #10]
        g_ModuleInfo.can_ID=(u32)_M_str2u32(&pParsingBuf[3],8,16);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3303      	adds	r3, #3
 800135e:	2210      	movs	r2, #16
 8001360:	2108      	movs	r1, #8
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fa14 	bl	8001790 <_M_str2u32>
 8001368:	4602      	mov	r2, r0
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 800136c:	60da      	str	r2, [r3, #12]
        _flash_write();
 800136e:	f000 fa93 	bl	8001898 <_flash_write>
        break;
 8001372:	e038      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    case 0x05:                  // Read Device Information
        g_ModuleInfo.can_BT_SJW=(u8)_M_str2u32(&pParsingBuf[3],1,16)-1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3303      	adds	r3, #3
 8001378:	2210      	movs	r2, #16
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa07 	bl	8001790 <_M_str2u32>
 8001382:	4603      	mov	r3, r0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 800138c:	71da      	strb	r2, [r3, #7]
        g_ModuleInfo.can_BT_BS1=(u8)_M_str2u32(&pParsingBuf[4],1,16)-1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3304      	adds	r3, #4
 8001392:	2210      	movs	r2, #16
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f9fa 	bl	8001790 <_M_str2u32>
 800139c:	4603      	mov	r3, r0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 80013a6:	715a      	strb	r2, [r3, #5]
        g_ModuleInfo.can_BT_BS2=(u8)_M_str2u32(&pParsingBuf[5],1,16)-1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3305      	adds	r3, #5
 80013ac:	2210      	movs	r2, #16
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f9ed 	bl	8001790 <_M_str2u32>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 80013c0:	719a      	strb	r2, [r3, #6]
        g_ModuleInfo.can_BT_Prescaler=(u16)_M_str2u32(&pParsingBuf[6],4,16);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3306      	adds	r3, #6
 80013c6:	2210      	movs	r2, #16
 80013c8:	2104      	movs	r1, #4
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f9e0 	bl	8001790 <_M_str2u32>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <Parse_2CAN_UART+0x14c>)
 80013d6:	811a      	strh	r2, [r3, #8]
        _flash_write();
 80013d8:	f000 fa5e 	bl	8001898 <_flash_write>
        break;
 80013dc:	e003      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    case 0x06:                  // Read CAN Information
    	Parse2CAN_ResSensorValue();
 80013de:	f000 f89f 	bl	8001520 <Parse2CAN_ResSensorValue>
        break;
 80013e2:	e000      	b.n	80013e6 <Parse_2CAN_UART+0x13a>
    default:
        break;
 80013e4:	bf00      	nop
    }

}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	; 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	080091a0 	.word	0x080091a0
 80013f4:	20000764 	.word	0x20000764
 80013f8:	20000294 	.word	0x20000294

080013fc <Parse2CAN_ResDeviceInfo>:



void Parse2CAN_ResDeviceInfo()
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b096      	sub	sp, #88	; 0x58
 8001400:	af04      	add	r7, sp, #16
    char pData[64];
    u16 u16Length;


    sprintf(pData,";00%.2X%.2X%.2X%.2X%.2X\r",g_ModuleInfo.type,g_ModuleInfo.fwVer_Major,g_ModuleInfo.fwVer_Minor,
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <Parse2CAN_ResDeviceInfo+0x58>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461c      	mov	r4, r3
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <Parse2CAN_ResDeviceInfo+0x58>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	461d      	mov	r5, r3
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <Parse2CAN_ResDeviceInfo+0x58>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	461a      	mov	r2, r3
                                            g_ModuleInfo.hwVer_Major,g_ModuleInfo.hwVer_Minor);
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <Parse2CAN_ResDeviceInfo+0x58>)
 8001416:	78db      	ldrb	r3, [r3, #3]
    sprintf(pData,";00%.2X%.2X%.2X%.2X%.2X\r",g_ModuleInfo.type,g_ModuleInfo.fwVer_Major,g_ModuleInfo.fwVer_Minor,
 8001418:	4619      	mov	r1, r3
                                            g_ModuleInfo.hwVer_Major,g_ModuleInfo.hwVer_Minor);
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <Parse2CAN_ResDeviceInfo+0x58>)
 800141c:	791b      	ldrb	r3, [r3, #4]
    sprintf(pData,";00%.2X%.2X%.2X%.2X%.2X\r",g_ModuleInfo.type,g_ModuleInfo.fwVer_Major,g_ModuleInfo.fwVer_Minor,
 800141e:	1d38      	adds	r0, r7, #4
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	9101      	str	r1, [sp, #4]
 8001424:	9200      	str	r2, [sp, #0]
 8001426:	462b      	mov	r3, r5
 8001428:	4622      	mov	r2, r4
 800142a:	490b      	ldr	r1, [pc, #44]	; (8001458 <Parse2CAN_ResDeviceInfo+0x5c>)
 800142c:	f006 fa16 	bl	800785c <siprintf>
    u16Length=strlen(pData);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fe8c 	bl	8000150 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//    SendUSART1((u8*)pData, u16Length);
    HAL_UART_Transmit(&huart1,pData,u16Length,10);
 800143e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001442:	1d39      	adds	r1, r7, #4
 8001444:	230a      	movs	r3, #10
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <Parse2CAN_ResDeviceInfo+0x60>)
 8001448:	f005 f859 	bl	80064fe <HAL_UART_Transmit>

}
 800144c:	bf00      	nop
 800144e:	3748      	adds	r7, #72	; 0x48
 8001450:	46bd      	mov	sp, r7
 8001452:	bdb0      	pop	{r4, r5, r7, pc}
 8001454:	20000294 	.word	0x20000294
 8001458:	080091ac 	.word	0x080091ac
 800145c:	20000764 	.word	0x20000764

08001460 <Parse2CAN_ResReadStatus>:


void Parse2CAN_ResReadStatus()
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b096      	sub	sp, #88	; 0x58
 8001464:	af04      	add	r7, sp, #16
    char pData[64];
    u16 u16Length;

    sprintf(pData, "test %d\r", g_ModuleInfo.can_ID_type);
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001468:	7a9b      	ldrb	r3, [r3, #10]
 800146a:	461a      	mov	r2, r3
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <Parse2CAN_ResReadStatus+0xac>)
 8001470:	4618      	mov	r0, r3
 8001472:	f006 f9f3 	bl	800785c <siprintf>

    if(g_ModuleInfo.can_ID_type==CAN_ID_STD)
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001478:	7a9b      	ldrb	r3, [r3, #10]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d117      	bne.n	80014ae <Parse2CAN_ResReadStatus+0x4e>
    {
        sprintf(pData,";02%.1x%.1x%.1x%.4xS%.3x\r", g_ModuleInfo.can_BT_SJW+1,
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001480:	79db      	ldrb	r3, [r3, #7]
 8001482:	1c59      	adds	r1, r3, #1
              g_ModuleInfo.can_BT_BS1+1, g_ModuleInfo.can_BT_BS2+1,
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001486:	795b      	ldrb	r3, [r3, #5]
        sprintf(pData,";02%.1x%.1x%.1x%.4xS%.3x\r", g_ModuleInfo.can_BT_SJW+1,
 8001488:	1c5c      	adds	r4, r3, #1
              g_ModuleInfo.can_BT_BS1+1, g_ModuleInfo.can_BT_BS2+1,
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 800148c:	799b      	ldrb	r3, [r3, #6]
        sprintf(pData,";02%.1x%.1x%.1x%.4xS%.3x\r", g_ModuleInfo.can_BT_SJW+1,
 800148e:	3301      	adds	r3, #1
              g_ModuleInfo.can_BT_Prescaler,g_ModuleInfo.can_ID);
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001492:	8912      	ldrh	r2, [r2, #8]
        sprintf(pData,";02%.1x%.1x%.1x%.4xS%.3x\r", g_ModuleInfo.can_BT_SJW+1,
 8001494:	4615      	mov	r5, r2
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 8001498:	68d2      	ldr	r2, [r2, #12]
 800149a:	1d38      	adds	r0, r7, #4
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	9501      	str	r5, [sp, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4623      	mov	r3, r4
 80014a4:	460a      	mov	r2, r1
 80014a6:	491a      	ldr	r1, [pc, #104]	; (8001510 <Parse2CAN_ResReadStatus+0xb0>)
 80014a8:	f006 f9d8 	bl	800785c <siprintf>
 80014ac:	e01a      	b.n	80014e4 <Parse2CAN_ResReadStatus+0x84>

    }
    else if(g_ModuleInfo.can_ID_type==CAN_ID_EXT)
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014b0:	7a9b      	ldrb	r3, [r3, #10]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d116      	bne.n	80014e4 <Parse2CAN_ResReadStatus+0x84>
    {
        sprintf(pData,";02%.1x%.1x%.1x%.4xE%.8x\r", g_ModuleInfo.can_BT_SJW,
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014b8:	79db      	ldrb	r3, [r3, #7]
 80014ba:	461c      	mov	r4, r3
              g_ModuleInfo.can_BT_BS1, g_ModuleInfo.can_BT_BS2,
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014be:	795b      	ldrb	r3, [r3, #5]
        sprintf(pData,";02%.1x%.1x%.1x%.4xE%.8x\r", g_ModuleInfo.can_BT_SJW,
 80014c0:	461d      	mov	r5, r3
              g_ModuleInfo.can_BT_BS1, g_ModuleInfo.can_BT_BS2,
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014c4:	799b      	ldrb	r3, [r3, #6]
        sprintf(pData,";02%.1x%.1x%.1x%.4xE%.8x\r", g_ModuleInfo.can_BT_SJW,
 80014c6:	461a      	mov	r2, r3
              g_ModuleInfo.can_BT_Prescaler,g_ModuleInfo.can_ID);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014ca:	891b      	ldrh	r3, [r3, #8]
        sprintf(pData,";02%.1x%.1x%.1x%.4xE%.8x\r", g_ModuleInfo.can_BT_SJW,
 80014cc:	4619      	mov	r1, r3
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <Parse2CAN_ResReadStatus+0xa8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	1d38      	adds	r0, r7, #4
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	9101      	str	r1, [sp, #4]
 80014d8:	9200      	str	r2, [sp, #0]
 80014da:	462b      	mov	r3, r5
 80014dc:	4622      	mov	r2, r4
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <Parse2CAN_ResReadStatus+0xb4>)
 80014e0:	f006 f9bc 	bl	800785c <siprintf>
    }

    u16Length=strlen(pData);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe32 	bl	8000150 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//    SendUSART1((u8*)pData, u16Length);
    HAL_UART_Transmit(&huart1,pData,u16Length,10);
 80014f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014f6:	1d39      	adds	r1, r7, #4
 80014f8:	230a      	movs	r3, #10
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <Parse2CAN_ResReadStatus+0xb8>)
 80014fc:	f004 ffff 	bl	80064fe <HAL_UART_Transmit>
}
 8001500:	bf00      	nop
 8001502:	3748      	adds	r7, #72	; 0x48
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	20000294 	.word	0x20000294
 800150c:	080091c8 	.word	0x080091c8
 8001510:	080091d4 	.word	0x080091d4
 8001514:	080091f0 	.word	0x080091f0
 8001518:	20000764 	.word	0x20000764
 800151c:	00000000 	.word	0x00000000

08001520 <Parse2CAN_ResSensorValue>:


void Parse2CAN_ResSensorValue()
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b09f      	sub	sp, #124	; 0x7c
 8001524:	af02      	add	r7, sp, #8
//    SendUSART1(pData, u16Length);

	char pData[64];
	u16 u16Length;
	u16 u16Temperature, u16Humidity;
	  uint16_t addr = 0x44;
 8001526:	2344      	movs	r3, #68	; 0x44
 8001528:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  uint16_t Waddr = addr<<1;
 800152c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  uint16_t Raddr = (addr<<1)+1;
 8001536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  uint8_t mps[2] = {0x21, 0x30};
 8001544:	4b86      	ldr	r3, [pc, #536]	; (8001760 <Parse2CAN_ResSensorValue+0x240>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	823b      	strh	r3, [r7, #16]
	  uint8_t fetch_data[2] = {0xE0, 0x00};
 800154a:	23e0      	movs	r3, #224	; 0xe0
 800154c:	733b      	strb	r3, [r7, #12]
 800154e:	2300      	movs	r3, #0
 8001550:	737b      	strb	r3, [r7, #13]
	  uint8_t data[6] = {0, 1, 2, 3, 4, 5};
 8001552:	4a84      	ldr	r2, [pc, #528]	; (8001764 <Parse2CAN_ResSensorValue+0x244>)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	6018      	str	r0, [r3, #0]
 800155c:	3304      	adds	r3, #4
 800155e:	8019      	strh	r1, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, Waddr, &mps[0], 2, 100);
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2302      	movs	r3, #2
 800156e:	487e      	ldr	r0, [pc, #504]	; (8001768 <Parse2CAN_ResSensorValue+0x248>)
 8001570:	f002 f820 	bl	80035b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f000 fcfb 	bl	8001f70 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, Waddr, &fetch_data[0], 2, 100);
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8001582:	2364      	movs	r3, #100	; 0x64
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	4877      	ldr	r0, [pc, #476]	; (8001768 <Parse2CAN_ResSensorValue+0x248>)
 800158a:	f002 f813 	bl	80035b4 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800158e:	bf00      	nop
 8001590:	4875      	ldr	r0, [pc, #468]	; (8001768 <Parse2CAN_ResSensorValue+0x248>)
 8001592:	f002 fdbf 	bl	8004114 <HAL_I2C_GetState>
 8001596:	4603      	mov	r3, r0
 8001598:	2b20      	cmp	r3, #32
 800159a:	d1f9      	bne.n	8001590 <Parse2CAN_ResSensorValue+0x70>
	{	}

	HAL_I2C_Master_Receive(&hi2c1, Raddr, &data[0], 6, 100);
 800159c:	1d3a      	adds	r2, r7, #4
 800159e:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2306      	movs	r3, #6
 80015a8:	486f      	ldr	r0, [pc, #444]	; (8001768 <Parse2CAN_ResSensorValue+0x248>)
 80015aa:	f002 f901 	bl	80037b0 <HAL_I2C_Master_Receive>

	uint16_t temp = data[0]<<8 | data[1];
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	uint16_t hum = data[3]<<8 | data[4];
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	7a3b      	ldrb	r3, [r7, #8]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	float temperature = ((float)temp/65535.0*175.0 - 45.0)*10.0;
 80015d2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb58 	bl	8000c8c <__aeabi_ui2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff22 	bl	8000428 <__aeabi_f2d>
 80015e4:	a35a      	add	r3, pc, #360	; (adr r3, 8001750 <Parse2CAN_ResSensorValue+0x230>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f89b 	bl	8000724 <__aeabi_ddiv>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	a358      	add	r3, pc, #352	; (adr r3, 8001758 <Parse2CAN_ResSensorValue+0x238>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7fe ff68 	bl	80004d0 <__aeabi_dmul>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	4618      	mov	r0, r3
 8001606:	4621      	mov	r1, r4
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b57      	ldr	r3, [pc, #348]	; (800176c <Parse2CAN_ResSensorValue+0x24c>)
 800160e:	f7fe fdab 	bl	8000168 <__aeabi_dsub>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4618      	mov	r0, r3
 8001618:	4621      	mov	r1, r4
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b54      	ldr	r3, [pc, #336]	; (8001770 <Parse2CAN_ResSensorValue+0x250>)
 8001620:	f7fe ff56 	bl	80004d0 <__aeabi_dmul>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	4618      	mov	r0, r3
 800162a:	4621      	mov	r1, r4
 800162c:	f7ff fa28 	bl	8000a80 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	663b      	str	r3, [r7, #96]	; 0x60
	float humidity = (100.0*(float)hum/65535.0)*10.0;
 8001634:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb27 	bl	8000c8c <__aeabi_ui2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <Parse2CAN_ResSensorValue+0x254>)
 800164c:	f7fe ff40 	bl	80004d0 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4618      	mov	r0, r3
 8001656:	4621      	mov	r1, r4
 8001658:	a33d      	add	r3, pc, #244	; (adr r3, 8001750 <Parse2CAN_ResSensorValue+0x230>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f861 	bl	8000724 <__aeabi_ddiv>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b40      	ldr	r3, [pc, #256]	; (8001770 <Parse2CAN_ResSensorValue+0x250>)
 8001670:	f7fe ff2e 	bl	80004d0 <__aeabi_dmul>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	f7ff fa00 	bl	8000a80 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	65fb      	str	r3, [r7, #92]	; 0x5c

	u16Temperature = temperature;
 8001684:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001686:	f7ff fb59 	bl	8000d3c <__aeabi_f2uiz>
 800168a:	4603      	mov	r3, r0
 800168c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	u16Humidity = humidity;
 8001690:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001692:	f7ff fb53 	bl	8000d3c <__aeabi_f2uiz>
 8001696:	4603      	mov	r3, r0
 8001698:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

	sprintf(pData,";07,%.4d,%.4d\r",u16Temperature,u16Humidity);
 800169c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80016a0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80016a4:	f107 0014 	add.w	r0, r7, #20
 80016a8:	4933      	ldr	r1, [pc, #204]	; (8001778 <Parse2CAN_ResSensorValue+0x258>)
 80016aa:	f006 f8d7 	bl	800785c <siprintf>
	u16Length=strlen(pData);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fd4c 	bl	8000150 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart1,pData,u16Length,10);
 80016be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80016c2:	f107 0114 	add.w	r1, r7, #20
 80016c6:	230a      	movs	r3, #10
 80016c8:	482c      	ldr	r0, [pc, #176]	; (800177c <Parse2CAN_ResSensorValue+0x25c>)
 80016ca:	f004 ff18 	bl	80064fe <HAL_UART_Transmit>

	  canTxHeader.StdId = 0x102;
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <Parse2CAN_ResSensorValue+0x260>)
 80016d0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80016d4:	601a      	str	r2, [r3, #0]
	  canTxHeader.RTR = CAN_RTR_DATA;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <Parse2CAN_ResSensorValue+0x260>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
	  canTxHeader.IDE = CAN_ID_STD;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <Parse2CAN_ResSensorValue+0x260>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
	  canTxHeader.DLC = 7;
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <Parse2CAN_ResSensorValue+0x260>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	611a      	str	r2, [r3, #16]

	  can1Tx0Date[0] = u16Temperature;
 80016e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 80016f0:	701a      	strb	r2, [r3, #0]
	  can1Tx0Date[1] = u16Temperature>>8;
 80016f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 80016fe:	705a      	strb	r2, [r3, #1]
	  can1Tx0Date[2] = u16Humidity;
 8001700:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 8001708:	709a      	strb	r2, [r3, #2]
	  can1Tx0Date[3] = u16Humidity>>8;
 800170a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b29b      	uxth	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 8001716:	70da      	strb	r2, [r3, #3]
	  can1Tx0Date[4] = 0;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 800171a:	2200      	movs	r2, #0
 800171c:	711a      	strb	r2, [r3, #4]
	  can1Tx0Date[5] = 0;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 8001720:	2200      	movs	r2, #0
 8001722:	715a      	strb	r2, [r3, #5]
	  can1Tx0Date[6] = 0;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 8001726:	2200      	movs	r2, #0
 8001728:	719a      	strb	r2, [r3, #6]

	  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800172a:	4817      	ldr	r0, [pc, #92]	; (8001788 <Parse2CAN_ResSensorValue+0x268>)
 800172c:	f000 fe56 	bl	80023dc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001730:	4602      	mov	r2, r0
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <Parse2CAN_ResSensorValue+0x26c>)
 8001734:	601a      	str	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Date[0], &TxMailBox);
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <Parse2CAN_ResSensorValue+0x26c>)
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <Parse2CAN_ResSensorValue+0x264>)
 800173a:	4911      	ldr	r1, [pc, #68]	; (8001780 <Parse2CAN_ResSensorValue+0x260>)
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <Parse2CAN_ResSensorValue+0x268>)
 800173e:	f000 fd77 	bl	8002230 <HAL_CAN_AddTxMessage>
}
 8001742:	bf00      	nop
 8001744:	3774      	adds	r7, #116	; 0x74
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	00000000 	.word	0x00000000
 8001754:	40efffe0 	.word	0x40efffe0
 8001758:	00000000 	.word	0x00000000
 800175c:	4065e000 	.word	0x4065e000
 8001760:	0800921c 	.word	0x0800921c
 8001764:	08009220 	.word	0x08009220
 8001768:	20000240 	.word	0x20000240
 800176c:	40468000 	.word	0x40468000
 8001770:	40240000 	.word	0x40240000
 8001774:	40590000 	.word	0x40590000
 8001778:	0800920c 	.word	0x0800920c
 800177c:	20000764 	.word	0x20000764
 8001780:	200006b4 	.word	0x200006b4
 8001784:	200006ac 	.word	0x200006ac
 8001788:	20000218 	.word	0x20000218
 800178c:	200006cc 	.word	0x200006cc

08001790 <_M_str2u32>:


u32 _M_str2u32(u8* pString, u16 u16Num,u8 u8Digit)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
    u32 Result=0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    u8 pTempStr1[8]={0,};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
    memcpy(pTempStr1,pString,u16Num);
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fbdc 	bl	8006f74 <memcpy>
    Result=(u32)strtoul(pTempStr1,0,16);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2210      	movs	r2, #16
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 f8eb 	bl	80079a0 <strtoul>
 80017ca:	4603      	mov	r3, r0
 80017cc:	617b      	str	r3, [r7, #20]
    return Result;
 80017ce:	697b      	ldr	r3, [r7, #20]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_M_str2u8>:

u8 _M_str2u8(u8* pString, u16 u16Num,u8 u8Digit)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
    u8 Result=0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
    u8 pTempStr1[8]={0,};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
    memcpy(pTempStr1,pString,u16Num);
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fbb8 	bl	8006f74 <memcpy>
    Result=(u8)strtoul(pTempStr1,0,16);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2210      	movs	r2, #16
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 f8c7 	bl	80079a0 <strtoul>
 8001812:	4603      	mov	r3, r0
 8001814:	75fb      	strb	r3, [r7, #23]
    return Result;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_flash_read>:
	u32Data=(*(vu32*)u32Addr);
	return u32Data;
}

void _flash_read(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
//    g_ModuleInfo.can_BT_BS2=(u8)ReadFlashData(u32FlashBaseAddr+8);
//    g_ModuleInfo.can_BT_SJW=(u8)ReadFlashData(u32FlashBaseAddr+12);
//    g_ModuleInfo.can_BT_Prescaler=(u16)ReadFlashData(u32FlashBaseAddr+16);
//    g_ModuleInfo.can_ID_type=(u8)ReadFlashData(u32FlashBaseAddr+20);

	u32 u32FlashBaseAddr = FLASH_BASEADDR;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <_flash_read+0x70>)
 8001828:	607b      	str	r3, [r7, #4]
	u32 u32Temp;
	u32Temp=*(__IO uint32_t*)u32FlashBaseAddr;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_ID=(u32)(u32Temp);
 8001830:	4a18      	ldr	r2, [pc, #96]	; (8001894 <_flash_read+0x74>)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	60d3      	str	r3, [r2, #12]
	u32Temp=*(__IO uint32_t*)(u32FlashBaseAddr+4);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_BT_BS1=(u8)(u32Temp);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <_flash_read+0x74>)
 8001844:	715a      	strb	r2, [r3, #5]
	u32Temp=*(__IO uint32_t*)(u32FlashBaseAddr+8);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3308      	adds	r3, #8
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_BT_BS2=(u8)(u32Temp);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_flash_read+0x74>)
 8001854:	719a      	strb	r2, [r3, #6]
	u32Temp=*(__IO uint32_t*)(u32FlashBaseAddr+12);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	330c      	adds	r3, #12
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_BT_SJW=(u8)(u32Temp);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <_flash_read+0x74>)
 8001864:	71da      	strb	r2, [r3, #7]
	u32Temp=*(__IO uint32_t*)(u32FlashBaseAddr+16);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3310      	adds	r3, #16
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_BT_Prescaler=(u16)(u32Temp);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_flash_read+0x74>)
 8001874:	811a      	strh	r2, [r3, #8]
	u32Temp=*(__IO uint32_t*)(u32FlashBaseAddr+20);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3314      	adds	r3, #20
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	603b      	str	r3, [r7, #0]
	g_ModuleInfo.can_ID_type=(u8)(u32Temp);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <_flash_read+0x74>)
 8001884:	729a      	strb	r2, [r3, #10]
//	MODULE_INFO temp_info;
//
//	memcpy(&temp_info, (MODULE_INFO*)u32FlashBaseAddr, sizeof(temp_info));
//
//	memcpy(&g_ModuleInfo, &temp_info, sizeof(temp_info));
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	0800fc00 	.word	0x0800fc00
 8001894:	20000294 	.word	0x20000294

08001898 <_flash_write>:

void _flash_write(void)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
    u32 u32FlashBaseAddr = FLASH_BASEADDR;
 800189e:	4baf      	ldr	r3, [pc, #700]	; (8001b5c <_flash_write+0x2c4>)
 80018a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    char pData[64];
    u16 u16Length;
    int check = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
    static FLASH_EraseInitTypeDef ErageStruct;

    ErageStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80018a6:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <_flash_write+0x2c8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
    ErageStruct.PageAddress = FLASH_BASEADDR;
 80018ac:	4bac      	ldr	r3, [pc, #688]	; (8001b60 <_flash_write+0x2c8>)
 80018ae:	4aab      	ldr	r2, [pc, #684]	; (8001b5c <_flash_write+0x2c4>)
 80018b0:	609a      	str	r2, [r3, #8]
    ErageStruct.NbPages = 1;
 80018b2:	4bab      	ldr	r3, [pc, #684]	; (8001b60 <_flash_write+0x2c8>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]

    HAL_FLASH_Unlock();
 80018b8:	f001 fa28 	bl	8002d0c <HAL_FLASH_Unlock>
    //__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_OPTVERR);
    //FLASH_PageErase(u32FlashBaseAddr);
    int pageerror;
    if(HAL_FLASHEx_Erase(&ErageStruct, &pageerror) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4619      	mov	r1, r3
 80018c0:	48a7      	ldr	r0, [pc, #668]	; (8001b60 <_flash_write+0x2c8>)
 80018c2:	f001 fb0b 	bl	8002edc <HAL_FLASHEx_Erase>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <_flash_write+0x46>
    {
    	sprintf(pData, "erage page error\r");
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4aa5      	ldr	r2, [pc, #660]	; (8001b64 <_flash_write+0x2cc>)
 80018d0:	461c      	mov	r4, r3
 80018d2:	4615      	mov	r5, r2
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	8023      	strh	r3, [r4, #0]
 80018dc:	e007      	b.n	80018ee <_flash_write+0x56>
    }
    else
    {
    	sprintf(pData, "erage page success\r");
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4aa1      	ldr	r2, [pc, #644]	; (8001b68 <_flash_write+0x2d0>)
 80018e2:	461c      	mov	r4, r3
 80018e4:	4615      	mov	r5, r2
 80018e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ea:	682b      	ldr	r3, [r5, #0]
 80018ec:	6023      	str	r3, [r4, #0]
    }

    u16Length=strlen(pData);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc2d 	bl	8000150 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                HAL_UART_Transmit(&huart1,pData,u16Length,10);
 80018fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001900:	1d39      	adds	r1, r7, #4
 8001902:	230a      	movs	r3, #10
 8001904:	4899      	ldr	r0, [pc, #612]	; (8001b6c <_flash_write+0x2d4>)
 8001906:	f004 fdfa 	bl	80064fe <HAL_UART_Transmit>

    //HAL_Delay(100);

    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+0,(u32)g_ModuleInfo.can_ID);
 800190a:	4b99      	ldr	r3, [pc, #612]	; (8001b70 <_flash_write+0x2d8>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001918:	2002      	movs	r0, #2
 800191a:	f001 f987 	bl	8002c2c <HAL_FLASH_Program>
 800191e:	4603      	mov	r3, r0
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 8001922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <_flash_write+0xa6>
    {
    	sprintf(pData, "test1\r");
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4a92      	ldr	r2, [pc, #584]	; (8001b74 <_flash_write+0x2dc>)
 800192c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001930:	6018      	str	r0, [r3, #0]
 8001932:	3304      	adds	r3, #4
 8001934:	8019      	strh	r1, [r3, #0]
 8001936:	3302      	adds	r3, #2
 8001938:	0c0a      	lsrs	r2, r1, #16
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e005      	b.n	800194a <_flash_write+0xb2>
    }
    else
    {
    	sprintf(pData, "test1 error %d\r", check);
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001942:	498d      	ldr	r1, [pc, #564]	; (8001b78 <_flash_write+0x2e0>)
 8001944:	4618      	mov	r0, r3
 8001946:	f005 ff89 	bl	800785c <siprintf>
    }
    u16Length=strlen(pData);
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fbff 	bl	8000150 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            HAL_UART_Transmit(&huart1,pData,u16Length,10);
 8001958:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800195c:	1d39      	adds	r1, r7, #4
 800195e:	230a      	movs	r3, #10
 8001960:	4882      	ldr	r0, [pc, #520]	; (8001b6c <_flash_write+0x2d4>)
 8001962:	f004 fdcc 	bl	80064fe <HAL_UART_Transmit>
    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+4,(u32)g_ModuleInfo.can_BT_BS1);
 8001966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001968:	1d19      	adds	r1, r3, #4
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <_flash_write+0x2d8>)
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f04f 0400 	mov.w	r4, #0
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	2002      	movs	r0, #2
 800197a:	f001 f957 	bl	8002c2c <HAL_FLASH_Program>
 800197e:	4603      	mov	r3, r0
 8001980:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 8001982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <_flash_write+0x106>
        {
        	sprintf(pData, "test2\r");
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4a7c      	ldr	r2, [pc, #496]	; (8001b7c <_flash_write+0x2e4>)
 800198c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001990:	6018      	str	r0, [r3, #0]
 8001992:	3304      	adds	r3, #4
 8001994:	8019      	strh	r1, [r3, #0]
 8001996:	3302      	adds	r3, #2
 8001998:	0c0a      	lsrs	r2, r1, #16
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	e005      	b.n	80019aa <_flash_write+0x112>
        }
    else
        {
        	sprintf(pData, "test2 error %d\r", check);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019a2:	4977      	ldr	r1, [pc, #476]	; (8001b80 <_flash_write+0x2e8>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f005 ff59 	bl	800785c <siprintf>
        }
    u16Length=strlen(pData);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fbcf 	bl	8000150 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            HAL_UART_Transmit(&huart1,pData,u16Length,10);
 80019b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80019bc:	1d39      	adds	r1, r7, #4
 80019be:	230a      	movs	r3, #10
 80019c0:	486a      	ldr	r0, [pc, #424]	; (8001b6c <_flash_write+0x2d4>)
 80019c2:	f004 fd9c 	bl	80064fe <HAL_UART_Transmit>
    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+8,(u32)g_ModuleInfo.can_BT_BS2);
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	f103 0108 	add.w	r1, r3, #8
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <_flash_write+0x2d8>)
 80019ce:	799b      	ldrb	r3, [r3, #6]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f04f 0400 	mov.w	r4, #0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4623      	mov	r3, r4
 80019da:	2002      	movs	r0, #2
 80019dc:	f001 f926 	bl	8002c2c <HAL_FLASH_Program>
 80019e0:	4603      	mov	r3, r0
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 80019e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <_flash_write+0x168>
        {
        	sprintf(pData, "test3\r");
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <_flash_write+0x2ec>)
 80019ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019f2:	6018      	str	r0, [r3, #0]
 80019f4:	3304      	adds	r3, #4
 80019f6:	8019      	strh	r1, [r3, #0]
 80019f8:	3302      	adds	r3, #2
 80019fa:	0c0a      	lsrs	r2, r1, #16
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e005      	b.n	8001a0c <_flash_write+0x174>
        }
    else
        {
        	sprintf(pData, "test3 error %d\r", check);
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a04:	4960      	ldr	r1, [pc, #384]	; (8001b88 <_flash_write+0x2f0>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 ff28 	bl	800785c <siprintf>
        }
    u16Length=strlen(pData);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fb9e 	bl	8000150 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            HAL_UART_Transmit(&huart1,pData,u16Length,10);
 8001a1a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001a1e:	1d39      	adds	r1, r7, #4
 8001a20:	230a      	movs	r3, #10
 8001a22:	4852      	ldr	r0, [pc, #328]	; (8001b6c <_flash_write+0x2d4>)
 8001a24:	f004 fd6b 	bl	80064fe <HAL_UART_Transmit>
    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+12,(u32)g_ModuleInfo.can_BT_SJW);
 8001a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2a:	f103 010c 	add.w	r1, r3, #12
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <_flash_write+0x2d8>)
 8001a30:	79db      	ldrb	r3, [r3, #7]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f001 f8f5 	bl	8002c2c <HAL_FLASH_Program>
 8001a42:	4603      	mov	r3, r0
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 8001a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <_flash_write+0x1ca>
        {
        	sprintf(pData, "test4\r");
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <_flash_write+0x2f4>)
 8001a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a54:	6018      	str	r0, [r3, #0]
 8001a56:	3304      	adds	r3, #4
 8001a58:	8019      	strh	r1, [r3, #0]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	0c0a      	lsrs	r2, r1, #16
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e005      	b.n	8001a6e <_flash_write+0x1d6>
        }
    else
        {
        	sprintf(pData, "test4 error %d\r", check);
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a66:	494a      	ldr	r1, [pc, #296]	; (8001b90 <_flash_write+0x2f8>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f005 fef7 	bl	800785c <siprintf>
        }
    u16Length=strlen(pData);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fb6d 	bl	8000150 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            HAL_UART_Transmit(&huart1,pData,u16Length,10);
 8001a7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001a80:	1d39      	adds	r1, r7, #4
 8001a82:	230a      	movs	r3, #10
 8001a84:	4839      	ldr	r0, [pc, #228]	; (8001b6c <_flash_write+0x2d4>)
 8001a86:	f004 fd3a 	bl	80064fe <HAL_UART_Transmit>
    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+16,(u32)g_ModuleInfo.can_BT_Prescaler);
 8001a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a8c:	f103 0110 	add.w	r1, r3, #16
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <_flash_write+0x2d8>)
 8001a92:	891b      	ldrh	r3, [r3, #8]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f04f 0400 	mov.w	r4, #0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f001 f8c4 	bl	8002c2c <HAL_FLASH_Program>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <_flash_write+0x22c>
        {
        	sprintf(pData, "test5\r");
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <_flash_write+0x2fc>)
 8001ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab6:	6018      	str	r0, [r3, #0]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	8019      	strh	r1, [r3, #0]
 8001abc:	3302      	adds	r3, #2
 8001abe:	0c0a      	lsrs	r2, r1, #16
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e005      	b.n	8001ad0 <_flash_write+0x238>
        }
    else
        {
        	sprintf(pData, "test5 error %d\r", check);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <_flash_write+0x300>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fec6 	bl	800785c <siprintf>
        }
    u16Length=strlen(pData);
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb3c 	bl	8000150 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            HAL_UART_Transmit(&huart1,pData,u16Length,10);
 8001ade:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001ae2:	1d39      	adds	r1, r7, #4
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	4821      	ldr	r0, [pc, #132]	; (8001b6c <_flash_write+0x2d4>)
 8001ae8:	f004 fd09 	bl	80064fe <HAL_UART_Transmit>
    check = HAL_FLASH_Program(TYPEPROGRAM_WORD, u32FlashBaseAddr+20,(u32)g_ModuleInfo.can_ID_type);
 8001aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aee:	f103 0114 	add.w	r1, r3, #20
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <_flash_write+0x2d8>)
 8001af4:	7a9b      	ldrb	r3, [r3, #10]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	2002      	movs	r0, #2
 8001b02:	f001 f893 	bl	8002c2c <HAL_FLASH_Program>
 8001b06:	4603      	mov	r3, r0
 8001b08:	64bb      	str	r3, [r7, #72]	; 0x48
    if(check == HAL_OK)
 8001b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <_flash_write+0x28e>
        {
        	sprintf(pData, "test6\r");
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <_flash_write+0x304>)
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	6018      	str	r0, [r3, #0]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	8019      	strh	r1, [r3, #0]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	0c0a      	lsrs	r2, r1, #16
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e005      	b.n	8001b32 <_flash_write+0x29a>
        }
    else
        {
        	sprintf(pData, "test6 error %d\r", check);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b2a:	491d      	ldr	r1, [pc, #116]	; (8001ba0 <_flash_write+0x308>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 fe95 	bl	800785c <siprintf>
        }
    HAL_FLASH_Lock();
 8001b32:	f001 f911 	bl	8002d58 <HAL_FLASH_Lock>

    u16Length=strlen(pData);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fb09 	bl	8000150 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        HAL_UART_Transmit(&huart1,pData,u16Length,10);
 8001b44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001b48:	1d39      	adds	r1, r7, #4
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <_flash_write+0x2d4>)
 8001b4e:	f004 fcd6 	bl	80064fe <HAL_UART_Transmit>
}
 8001b52:	bf00      	nop
 8001b54:	3750      	adds	r7, #80	; 0x50
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800fc00 	.word	0x0800fc00
 8001b60:	200001fc 	.word	0x200001fc
 8001b64:	08009228 	.word	0x08009228
 8001b68:	0800923c 	.word	0x0800923c
 8001b6c:	20000764 	.word	0x20000764
 8001b70:	20000294 	.word	0x20000294
 8001b74:	08009250 	.word	0x08009250
 8001b78:	08009258 	.word	0x08009258
 8001b7c:	08009268 	.word	0x08009268
 8001b80:	08009270 	.word	0x08009270
 8001b84:	08009280 	.word	0x08009280
 8001b88:	08009288 	.word	0x08009288
 8001b8c:	08009298 	.word	0x08009298
 8001b90:	080092a0 	.word	0x080092a0
 8001b94:	080092b0 	.word	0x080092b0
 8001b98:	080092b8 	.word	0x080092b8
 8001b9c:	080092c8 	.word	0x080092c8
 8001ba0:	080092d0 	.word	0x080092d0

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6193      	str	r3, [r2, #24]
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_MspInit+0x5c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_MspInit+0x60>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_MspInit+0x60>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <BusFault_Handler+0x4>

08001c26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <UsageFault_Handler+0x4>

08001c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f970 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c62:	f000 fbef 	bl	8002444 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000218 	.word	0x20000218

08001c70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <I2C1_EV_IRQHandler+0x10>)
 8001c76:	f001 fff5 	bl	8003c64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000240 	.word	0x20000240

08001c84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <I2C1_ER_IRQHandler+0x10>)
 8001c8a:	f002 f93e 	bl	8003f0a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000240 	.word	0x20000240

08001c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <USART1_IRQHandler+0x10>)
 8001c9e:	f004 fcef 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000764 	.word	0x20000764

08001cac <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <_sbrk+0x50>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x16>
		heap_end = &end;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <_sbrk+0x50>)
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <_sbrk+0x54>)
 8001cc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <_sbrk+0x50>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <_sbrk+0x50>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	466a      	mov	r2, sp
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d907      	bls.n	8001ce6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001cd6:	f005 f923 	bl	8006f20 <__errno>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	230c      	movs	r3, #12
 8001cde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	e006      	b.n	8001cf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <_sbrk+0x50>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <_sbrk+0x50>)
 8001cf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000020c 	.word	0x2000020c
 8001d00:	200007d4 	.word	0x200007d4

08001d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <uartutils_init>:

//extern
//HAL_UART_Transmit(&huart1, &rx_data, 1, 10);

void uartutils_init(uartQ_t* u)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  u->head = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
  u->tail = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
  memset(u->buffer, 0, sizeof(u->buffer));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3302      	adds	r3, #2
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 f92b 	bl	8006f8a <memset>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <uartutils_push>:

void uartutils_push(uartQ_t* u, uint8_t data)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  u->buffer[u->head] = data;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	709a      	strb	r2, [r3, #2]

  u->head++;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	701a      	strb	r2, [r3, #0]

  if (u->head >= MAX_BUFFER_SIZE) {
    u->head = 0;
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <uartutils_pop>:

uint8_t uartutils_pop(uartQ_t* u)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint8_t data = u->buffer[u->tail];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	73fb      	strb	r3, [r7, #15]

  u->tail++;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	705a      	strb	r2, [r3, #1]

  if (u->tail >= MAX_BUFFER_SIZE) {
    u->tail = 0;
  }

  return data;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <uartutils_isEmpty>:

uint8_t uartutils_isEmpty(uartQ_t* u)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return u->head == u->tail;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART1_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df8:	f004 fb34 	bl	8006464 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff f9a7 	bl	8001154 <Error_Handler>
  }

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000764 	.word	0x20000764
 8001e10:	40013800 	.word	0x40013800

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d131      	bne.n	8001e98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	4619      	mov	r1, r3
 8001e78:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e7a:	f001 f8d7 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e94:	f001 f8ca 	bl	800302c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_Init+0x28>)
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x28>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 fdb1 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fe6c 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fdc9 	bl	8002a8e <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 fd91 	bl	8002a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x20>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <HAL_IncTick+0x20>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000008 	.word	0x20000008
 8001f58:	200007a8 	.word	0x200007a8

08001f5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <HAL_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	200007a8 	.word	0x200007a8

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_Delay+0x40>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffe0 	bl	8001f5c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3f7      	bcc.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0ec      	b.n	80021a0 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe ff08 	bl	8000de8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe8:	f7ff ffb8 	bl	8001f5c <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fee:	e012      	b.n	8002016 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff0:	f7ff ffb4 	bl	8001f5c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d90b      	bls.n	8002016 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0c4      	b.n	80021a0 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0e5      	beq.n	8001ff0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	f022 0202 	bic.w	r2, r2, #2
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7ff ff92 	bl	8001f5c <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800203a:	e012      	b.n	8002062 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800203c:	f7ff ff8e 	bl	8001f5c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d90b      	bls.n	8002062 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e09e      	b.n	80021a0 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e5      	bne.n	800203c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7e1b      	ldrb	r3, [r3, #24]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e007      	b.n	800209a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7e5b      	ldrb	r3, [r3, #25]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e007      	b.n	80020c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7e9b      	ldrb	r3, [r3, #26]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d108      	bne.n	80020de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e007      	b.n	80020ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f022 0220 	bic.w	r2, r2, #32
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7edb      	ldrb	r3, [r3, #27]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	f022 0210 	bic.w	r2, r2, #16
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e007      	b.n	8002118 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f042 0210 	orr.w	r2, r2, #16
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7f1b      	ldrb	r3, [r3, #28]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	f042 0208 	orr.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e007      	b.n	8002142 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f5b      	ldrb	r3, [r3, #29]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	f042 0204 	orr.w	r2, r2, #4
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e007      	b.n	800216c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6891      	ldr	r1, [r2, #8]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68d2      	ldr	r2, [r2, #12]
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6912      	ldr	r2, [r2, #16]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6952      	ldr	r2, [r2, #20]
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6852      	ldr	r2, [r2, #4]
 800218a:	3a01      	subs	r2, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d12e      	bne.n	800221a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021d4:	f7ff fec2 	bl	8001f5c <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021da:	e012      	b.n	8002202 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021dc:	f7ff febe 	bl	8001f5c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b0a      	cmp	r3, #10
 80021e8:	d90b      	bls.n	8002202 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e012      	b.n	8002228 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e5      	bne.n	80021dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e006      	b.n	8002228 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002244:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800224e:	7ffb      	ldrb	r3, [r7, #31]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d003      	beq.n	800225c <HAL_CAN_AddTxMessage+0x2c>
 8002254:	7ffb      	ldrb	r3, [r7, #31]
 8002256:	2b02      	cmp	r3, #2
 8002258:	f040 80b4 	bne.w	80023c4 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 809c 	beq.w	80023b4 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	0e1b      	lsrs	r3, r3, #24
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d907      	bls.n	800229c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e09a      	b.n	80023d2 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800229c:	2201      	movs	r2, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	409a      	lsls	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3318      	adds	r3, #24
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	440b      	add	r3, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e00f      	b.n	80022ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 80022de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3318      	adds	r3, #24
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	440b      	add	r3, r1
 80022e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3318      	adds	r3, #24
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	440b      	add	r3, r1
 80022fa:	3304      	adds	r3, #4
 80022fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	7d1b      	ldrb	r3, [r3, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d111      	bne.n	800232a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3318      	adds	r3, #24
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3318      	adds	r3, #24
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	440b      	add	r3, r1
 8002326:	3304      	adds	r3, #4
 8002328:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3307      	adds	r3, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	061a      	lsls	r2, r3, #24
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3306      	adds	r3, #6
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3305      	adds	r3, #5
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4313      	orrs	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	3204      	adds	r2, #4
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	431a      	orrs	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	440b      	add	r3, r1
 8002358:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800235c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3303      	adds	r3, #3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	061a      	lsls	r2, r3, #24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3302      	adds	r3, #2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	4313      	orrs	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	431a      	orrs	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800238e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3318      	adds	r3, #24
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3318      	adds	r3, #24
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	440b      	add	r3, r1
 80023ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e00e      	b.n	80023d2 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e006      	b.n	80023d2 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ee:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d002      	beq.n	80023fc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d11d      	bne.n	8002438 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07c      	beq.n	8002584 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f97d 	bl	80027a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80024ac:	e016      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e00c      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	e002      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f980 	bl	80027dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d024      	beq.n	8002530 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f95c 	bl	80027b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002500:	e016      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e00c      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e002      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f95f 	bl	80027ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002542:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f93b 	bl	80027ca <HAL_CAN_TxMailbox2CompleteCallback>
 8002554:	e016      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e00c      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e002      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f93e 	bl	8002800 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f92d 	bl	8002824 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f915 	bl	8002812 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2208      	movs	r2, #8
 8002626:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f90d 	bl	8002848 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8f5 	bl	8002836 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f8f6 	bl	800285a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2208      	movs	r2, #8
 8002688:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8ee 	bl	800286c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d075      	beq.n	8002786 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06c      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03d      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d038      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002712:	2b30      	cmp	r3, #48	; 0x30
 8002714:	d017      	beq.n	8002746 <HAL_CAN_IRQHandler+0x302>
 8002716:	2b30      	cmp	r3, #48	; 0x30
 8002718:	d804      	bhi.n	8002724 <HAL_CAN_IRQHandler+0x2e0>
 800271a:	2b10      	cmp	r3, #16
 800271c:	d009      	beq.n	8002732 <HAL_CAN_IRQHandler+0x2ee>
 800271e:	2b20      	cmp	r3, #32
 8002720:	d00c      	beq.n	800273c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002722:	e024      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002724:	2b50      	cmp	r3, #80	; 0x50
 8002726:	d018      	beq.n	800275a <HAL_CAN_IRQHandler+0x316>
 8002728:	2b60      	cmp	r3, #96	; 0x60
 800272a:	d01b      	beq.n	8002764 <HAL_CAN_IRQHandler+0x320>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d00f      	beq.n	8002750 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002730:	e01d      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800273a:	e018      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002744:	e013      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 0320 	orr.w	r3, r3, #32
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800274e:	e00e      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002758:	e009      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002762:	e004      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	6992      	ldr	r2, [r2, #24]
 8002778:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800277c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2204      	movs	r2, #4
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f870 	bl	800287e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <__NVIC_EnableIRQ+0x34>)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	490d      	ldr	r1, [pc, #52]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	4909      	ldr	r1, [pc, #36]	; (800297c <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	2201      	movs	r2, #1
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	401a      	ands	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c6:	2101      	movs	r1, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	1e59      	subs	r1, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
         );
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff92 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff2f 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4c:	f7ff ff44 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff92 	bl	8002980 <NVIC_EncodePriority>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff61 	bl	800292c <__NVIC_SetPriority>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff37 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffa2 	bl	80029e0 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e020      	b.n	8002b10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d005      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e057      	b.n	8002bee <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f022 020e 	bic.w	r2, r2, #14
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b5e:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_DMA_Abort_IT+0xdc>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_DMA_Abort_IT+0xe0>)
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	d02e      	beq.n	8002bca <HAL_DMA_Abort_IT+0xae>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_DMA_Abort_IT+0xe4>)
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d026      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0xaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_DMA_Abort_IT+0xe8>)
 8002b80:	4299      	cmp	r1, r3
 8002b82:	d01d      	beq.n	8002bc0 <HAL_DMA_Abort_IT+0xa4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_DMA_Abort_IT+0xec>)
 8002b8c:	4299      	cmp	r1, r3
 8002b8e:	d014      	beq.n	8002bba <HAL_DMA_Abort_IT+0x9e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_DMA_Abort_IT+0xf0>)
 8002b98:	4299      	cmp	r1, r3
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x98>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_DMA_Abort_IT+0xf4>)
 8002ba4:	4299      	cmp	r1, r3
 8002ba6:	d102      	bne.n	8002bae <HAL_DMA_Abort_IT+0x92>
 8002ba8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bac:	e00e      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb2:	e00b      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb8:	e008      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	e005      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc4:	e002      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bc6:	2310      	movs	r3, #16
 8002bc8:	e000      	b.n	8002bcc <HAL_DMA_Abort_IT+0xb0>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
    } 
  }
  return status;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020008 	.word	0x40020008
 8002c00:	4002001c 	.word	0x4002001c
 8002c04:	40020030 	.word	0x40020030
 8002c08:	40020044 	.word	0x40020044
 8002c0c:	40020058 	.word	0x40020058
 8002c10:	4002006c 	.word	0x4002006c

08002c14 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_FLASH_Program+0xd8>)
 8002c48:	7e1b      	ldrb	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_FLASH_Program+0x26>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e054      	b.n	8002cfc <HAL_FLASH_Program+0xd0>
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <HAL_FLASH_Program+0xd8>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c5c:	f000 f8a8 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002c60:	4603      	mov	r3, r0
 8002c62:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d144      	bne.n	8002cf4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d102      	bne.n	8002c76 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002c70:	2301      	movs	r3, #1
 8002c72:	757b      	strb	r3, [r7, #21]
 8002c74:	e007      	b.n	8002c86 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d102      	bne.n	8002c82 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	757b      	strb	r3, [r7, #21]
 8002c80:	e001      	b.n	8002c86 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c82:	2304      	movs	r3, #4
 8002c84:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	75bb      	strb	r3, [r7, #22]
 8002c8a:	e02d      	b.n	8002ce8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002c8c:	7dbb      	ldrb	r3, [r7, #22]
 8002c8e:	005a      	lsls	r2, r3, #1
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	eb02 0e03 	add.w	lr, r2, r3
 8002c96:	7dbb      	ldrb	r3, [r7, #22]
 8002c98:	0119      	lsls	r1, r3, #4
 8002c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c9e:	f1c1 0620 	rsb	r6, r1, #32
 8002ca2:	f1a1 0020 	sub.w	r0, r1, #32
 8002ca6:	fa22 f401 	lsr.w	r4, r2, r1
 8002caa:	fa03 f606 	lsl.w	r6, r3, r6
 8002cae:	4334      	orrs	r4, r6
 8002cb0:	fa23 f000 	lsr.w	r0, r3, r0
 8002cb4:	4304      	orrs	r4, r0
 8002cb6:	fa23 f501 	lsr.w	r5, r3, r1
 8002cba:	b2a3      	uxth	r3, r4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4670      	mov	r0, lr
 8002cc0:	f000 f85a 	bl	8002d78 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cc8:	f000 f872 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_FLASH_Program+0xdc>)
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_FLASH_Program+0xdc>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002ce2:	7dbb      	ldrb	r3, [r7, #22]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	75bb      	strb	r3, [r7, #22]
 8002ce8:	7dba      	ldrb	r2, [r7, #22]
 8002cea:	7d7b      	ldrb	r3, [r7, #21]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3cd      	bcc.n	8002c8c <HAL_FLASH_Program+0x60>
 8002cf0:	e000      	b.n	8002cf4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002cf2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_FLASH_Program+0xd8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	761a      	strb	r2, [r3, #24]

  return status;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d04:	200007b0 	.word	0x200007b0
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_FLASH_Unlock+0x40>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_FLASH_Unlock+0x40>)
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_FLASH_Unlock+0x44>)
 8002d26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_FLASH_Unlock+0x40>)
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_FLASH_Unlock+0x48>)
 8002d2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_FLASH_Unlock+0x40>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	45670123 	.word	0x45670123
 8002d54:	cdef89ab 	.word	0xcdef89ab

08002d58 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d5c:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <HAL_FLASH_Lock+0x1c>)
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_FLASH_Lock+0x1c>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000

08002d78 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <FLASH_Program_HalfWord+0x30>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <FLASH_Program_HalfWord+0x34>)
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <FLASH_Program_HalfWord+0x34>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	801a      	strh	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200007b0 	.word	0x200007b0
 8002dac:	40022000 	.word	0x40022000

08002db0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff f8d0 	bl	8001f5c <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002dbe:	e010      	b.n	8002de2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d00c      	beq.n	8002de2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <FLASH_WaitForLastOperation+0x2e>
 8002dce:	f7ff f8c5 	bl	8001f5c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad2      	subs	r2, r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d901      	bls.n	8002de2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e025      	b.n	8002e2e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e8      	bne.n	8002dc0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <FLASH_WaitForLastOperation+0x88>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e24:	f000 f80a 	bl	8002e3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000

08002e3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e52:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e5c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e72:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e7c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <FLASH_SetErrorCode+0x9c>)
 8002e9c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f240 1201 	movw	r2, #257	; 0x101
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <FLASH_SetErrorCode+0x86>
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	61d3      	str	r3, [r2, #28]
}  
 8002ec0:	e002      	b.n	8002ec8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <FLASH_SetErrorCode+0x98>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60d3      	str	r3, [r2, #12]
}  
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	200007b0 	.word	0x200007b0

08002edc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_FLASHEx_Erase+0xd0>)
 8002ef0:	7e1b      	ldrb	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_FLASHEx_Erase+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e053      	b.n	8002fa2 <HAL_FLASHEx_Erase+0xc6>
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_FLASHEx_Erase+0xd0>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d116      	bne.n	8002f36 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f0c:	f7ff ff50 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d141      	bne.n	8002f9a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 f84c 	bl	8002fb4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f20:	f7ff ff46 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_FLASHEx_Erase+0xd4>)
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_FLASHEx_Erase+0xd4>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	6113      	str	r3, [r2, #16]
 8002f34:	e031      	b.n	8002f9a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f3a:	f7ff ff39 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d12a      	bne.n	8002f9a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	e019      	b.n	8002f88 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f000 f849 	bl	8002fec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f5e:	f7ff ff27 	bl	8002db0 <FLASH_WaitForLastOperation>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_FLASHEx_Erase+0xd4>)
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_FLASHEx_Erase+0xd4>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f023 0302 	bic.w	r3, r3, #2
 8002f70:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	601a      	str	r2, [r3, #0]
            break;
 8002f7e:	e00c      	b.n	8002f9a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f86:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	029a      	lsls	r2, r3, #10
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d8dc      	bhi.n	8002f54 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_FLASHEx_Erase+0xd0>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	761a      	strb	r2, [r3, #24]

  return status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200007b0 	.word	0x200007b0
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <FLASH_MassErase+0x30>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <FLASH_MassErase+0x34>)
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <FLASH_MassErase+0x34>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <FLASH_MassErase+0x34>)
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <FLASH_MassErase+0x34>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	200007b0 	.word	0x200007b0
 8002fe8:	40022000 	.word	0x40022000

08002fec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <FLASH_PageErase+0x38>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <FLASH_PageErase+0x3c>)
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <FLASH_PageErase+0x3c>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <FLASH_PageErase+0x3c>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <FLASH_PageErase+0x3c>)
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <FLASH_PageErase+0x3c>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003016:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	200007b0 	.word	0x200007b0
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b08b      	sub	sp, #44	; 0x2c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e127      	b.n	8003290 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003040:	2201      	movs	r2, #1
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 8116 	bne.w	800328a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d034      	beq.n	80030d0 <HAL_GPIO_Init+0xa4>
 8003066:	2b12      	cmp	r3, #18
 8003068:	d80d      	bhi.n	8003086 <HAL_GPIO_Init+0x5a>
 800306a:	2b02      	cmp	r3, #2
 800306c:	d02b      	beq.n	80030c6 <HAL_GPIO_Init+0x9a>
 800306e:	2b02      	cmp	r3, #2
 8003070:	d804      	bhi.n	800307c <HAL_GPIO_Init+0x50>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d031      	beq.n	80030da <HAL_GPIO_Init+0xae>
 8003076:	2b01      	cmp	r3, #1
 8003078:	d01c      	beq.n	80030b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800307a:	e048      	b.n	800310e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800307c:	2b03      	cmp	r3, #3
 800307e:	d043      	beq.n	8003108 <HAL_GPIO_Init+0xdc>
 8003080:	2b11      	cmp	r3, #17
 8003082:	d01b      	beq.n	80030bc <HAL_GPIO_Init+0x90>
          break;
 8003084:	e043      	b.n	800310e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003086:	4a89      	ldr	r2, [pc, #548]	; (80032ac <HAL_GPIO_Init+0x280>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d026      	beq.n	80030da <HAL_GPIO_Init+0xae>
 800308c:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_GPIO_Init+0x280>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d806      	bhi.n	80030a0 <HAL_GPIO_Init+0x74>
 8003092:	4a87      	ldr	r2, [pc, #540]	; (80032b0 <HAL_GPIO_Init+0x284>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d020      	beq.n	80030da <HAL_GPIO_Init+0xae>
 8003098:	4a86      	ldr	r2, [pc, #536]	; (80032b4 <HAL_GPIO_Init+0x288>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_GPIO_Init+0xae>
          break;
 800309e:	e036      	b.n	800310e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030a0:	4a85      	ldr	r2, [pc, #532]	; (80032b8 <HAL_GPIO_Init+0x28c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0xae>
 80030a6:	4a85      	ldr	r2, [pc, #532]	; (80032bc <HAL_GPIO_Init+0x290>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d016      	beq.n	80030da <HAL_GPIO_Init+0xae>
 80030ac:	4a84      	ldr	r2, [pc, #528]	; (80032c0 <HAL_GPIO_Init+0x294>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0xae>
          break;
 80030b2:	e02c      	b.n	800310e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	623b      	str	r3, [r7, #32]
          break;
 80030ba:	e028      	b.n	800310e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	3304      	adds	r3, #4
 80030c2:	623b      	str	r3, [r7, #32]
          break;
 80030c4:	e023      	b.n	800310e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	3308      	adds	r3, #8
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e01e      	b.n	800310e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	330c      	adds	r3, #12
 80030d6:	623b      	str	r3, [r7, #32]
          break;
 80030d8:	e019      	b.n	800310e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030e2:	2304      	movs	r3, #4
 80030e4:	623b      	str	r3, [r7, #32]
          break;
 80030e6:	e012      	b.n	800310e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f0:	2308      	movs	r3, #8
 80030f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	611a      	str	r2, [r3, #16]
          break;
 80030fa:	e008      	b.n	800310e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030fc:	2308      	movs	r3, #8
 80030fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	615a      	str	r2, [r3, #20]
          break;
 8003106:	e002      	b.n	800310e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
          break;
 800310c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2bff      	cmp	r3, #255	; 0xff
 8003112:	d801      	bhi.n	8003118 <HAL_GPIO_Init+0xec>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	e001      	b.n	800311c <HAL_GPIO_Init+0xf0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2bff      	cmp	r3, #255	; 0xff
 8003122:	d802      	bhi.n	800312a <HAL_GPIO_Init+0xfe>
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x104>
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	3b08      	subs	r3, #8
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	210f      	movs	r1, #15
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	401a      	ands	r2, r3
 8003142:	6a39      	ldr	r1, [r7, #32]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	431a      	orrs	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8096 	beq.w	800328a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315e:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_GPIO_Init+0x298>)
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_GPIO_Init+0x298>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6193      	str	r3, [r2, #24]
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_GPIO_Init+0x298>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003176:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_GPIO_Init+0x29c>)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <HAL_GPIO_Init+0x2a0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x19e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_GPIO_Init+0x2a4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x19a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a49      	ldr	r2, [pc, #292]	; (80032d4 <HAL_GPIO_Init+0x2a8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x196>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_GPIO_Init+0x2ac>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x192>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x1a0>
 80031be:	2304      	movs	r3, #4
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x1a0>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x1a0>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x1a0>
 80031ca:	2300      	movs	r3, #0
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031dc:	493a      	ldr	r1, [pc, #232]	; (80032c8 <HAL_GPIO_Init+0x29c>)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031f6:	4939      	ldr	r1, [pc, #228]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 80031f8:	4b38      	ldr	r3, [pc, #224]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
 8003202:	e006      	b.n	8003212 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003204:	4935      	ldr	r1, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	43db      	mvns	r3, r3
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800321e:	492f      	ldr	r1, [pc, #188]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800322c:	492b      	ldr	r1, [pc, #172]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	43db      	mvns	r3, r3
 8003236:	4013      	ands	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003246:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
 8003252:	e006      	b.n	8003262 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003254:	4921      	ldr	r1, [pc, #132]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	4013      	ands	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	60cb      	str	r3, [r1, #12]
 800327a:	e006      	b.n	800328a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800327c:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_GPIO_Init+0x2b0>)
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	43db      	mvns	r3, r3
 8003286:	4013      	ands	r3, r2
 8003288:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	3301      	adds	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	f47f aed0 	bne.w	8003040 <HAL_GPIO_Init+0x14>
  }
}
 80032a0:	bf00      	nop
 80032a2:	372c      	adds	r7, #44	; 0x2c
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	10210000 	.word	0x10210000
 80032b0:	10110000 	.word	0x10110000
 80032b4:	10120000 	.word	0x10120000
 80032b8:	10310000 	.word	0x10310000
 80032bc:	10320000 	.word	0x10320000
 80032c0:	10220000 	.word	0x10220000
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40010800 	.word	0x40010800
 80032d0:	40010c00 	.word	0x40010c00
 80032d4:	40011000 	.word	0x40011000
 80032d8:	40011400 	.word	0x40011400
 80032dc:	40010400 	.word	0x40010400

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43d9      	mvns	r1, r3
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	400b      	ands	r3, r1
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
	...

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e11f      	b.n	8003596 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fe42 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f003 f816 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a7b      	ldr	r2, [pc, #492]	; (80035a0 <HAL_I2C_Init+0x25c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <HAL_I2C_Init+0x84>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_I2C_Init+0x260>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e006      	b.n	80033d6 <HAL_I2C_Init+0x92>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_I2C_Init+0x264>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0db      	b.n	8003596 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a72      	ldr	r2, [pc, #456]	; (80035ac <HAL_I2C_Init+0x268>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9b      	lsrs	r3, r3, #18
 80033e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	6852      	ldr	r2, [r2, #4]
 80033f4:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4863      	ldr	r0, [pc, #396]	; (80035a0 <HAL_I2C_Init+0x25c>)
 8003412:	4283      	cmp	r3, r0
 8003414:	d802      	bhi.n	800341c <HAL_I2C_Init+0xd8>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	e009      	b.n	8003430 <HAL_I2C_Init+0xec>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003422:	fb00 f303 	mul.w	r3, r0, r3
 8003426:	4862      	ldr	r0, [pc, #392]	; (80035b0 <HAL_I2C_Init+0x26c>)
 8003428:	fba0 0303 	umull	r0, r3, r0, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	430b      	orrs	r3, r1
 8003432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4955      	ldr	r1, [pc, #340]	; (80035a0 <HAL_I2C_Init+0x25c>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d80d      	bhi.n	800346c <HAL_I2C_Init+0x128>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e59      	subs	r1, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	bf38      	it	cc
 8003468:	2304      	movcc	r3, #4
 800346a:	e04f      	b.n	800350c <HAL_I2C_Init+0x1c8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <HAL_I2C_Init+0x154>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e5c      	subs	r4, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	fbb4 f3f3 	udiv	r3, r4, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e012      	b.n	80034be <HAL_I2C_Init+0x17a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e5c      	subs	r4, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Init+0x182>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e022      	b.n	800350c <HAL_I2C_Init+0x1c8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10e      	bne.n	80034ec <HAL_I2C_Init+0x1a8>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e5c      	subs	r4, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ea:	e00f      	b.n	800350c <HAL_I2C_Init+0x1c8>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e5c      	subs	r4, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800350c:	4313      	orrs	r3, r2
 800350e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	69d0      	ldr	r0, [r2, #28]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6a12      	ldr	r2, [r2, #32]
 8003526:	4302      	orrs	r2, r0
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	6908      	ldr	r0, [r1, #16]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68c9      	ldr	r1, [r1, #12]
 8003546:	4301      	orrs	r1, r0
 8003548:	430b      	orrs	r3, r1
 800354a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	68d2      	ldr	r2, [r2, #12]
 8003556:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6950      	ldr	r0, [r2, #20]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6992      	ldr	r2, [r2, #24]
 8003562:	4302      	orrs	r2, r0
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	bf00      	nop
 80035a0:	000186a0 	.word	0x000186a0
 80035a4:	001e847f 	.word	0x001e847f
 80035a8:	003d08ff 	.word	0x003d08ff
 80035ac:	431bde83 	.word	0x431bde83
 80035b0:	10624dd3 	.word	0x10624dd3

080035b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	461a      	mov	r2, r3
 80035c0:	460b      	mov	r3, r1
 80035c2:	817b      	strh	r3, [r7, #10]
 80035c4:	4613      	mov	r3, r2
 80035c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7fe fcc8 	bl	8001f5c <HAL_GetTick>
 80035cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	f040 80e0 	bne.w	800379c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2319      	movs	r3, #25
 80035e2:	2201      	movs	r2, #1
 80035e4:	4970      	ldr	r1, [pc, #448]	; (80037a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f002 f8f8 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0d3      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_I2C_Master_Transmit+0x50>
 8003600:	2302      	movs	r3, #2
 8003602:	e0cc      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d007      	beq.n	800362a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2221      	movs	r2, #33	; 0x21
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2210      	movs	r2, #16
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	893a      	ldrh	r2, [r7, #8]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a50      	ldr	r2, [pc, #320]	; (80037ac <HAL_I2C_Master_Transmit+0x1f8>)
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800366c:	8979      	ldrh	r1, [r7, #10]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f001 feba 	bl	80053ec <I2C_MasterRequestWrite>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e08d      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003698:	e066      	b.n	8003768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6a39      	ldr	r1, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f002 f972 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <HAL_I2C_Master_Transmit+0x188>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	6a39      	ldr	r1, [r7, #32]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f002 f962 	bl	8005a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e01a      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	d194      	bne.n	800369a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7fe fbc8 	bl	8001f5c <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	f040 8238 	bne.w	8003c4c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2319      	movs	r3, #25
 80037e2:	2201      	movs	r2, #1
 80037e4:	497e      	ldr	r1, [pc, #504]	; (80039e0 <HAL_I2C_Master_Receive+0x230>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f001 fff8 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	e22b      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_I2C_Master_Receive+0x54>
 8003800:	2302      	movs	r3, #2
 8003802:	e224      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d007      	beq.n	800382a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003838:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2222      	movs	r2, #34	; 0x22
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2210      	movs	r2, #16
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	893a      	ldrh	r2, [r7, #8]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <HAL_I2C_Master_Receive+0x234>)
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f001 fe3c 	bl	80054f0 <I2C_MasterRequestRead>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e1e5      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e1b9      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d11d      	bne.n	80038f6 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038f2:	b662      	cpsie	i
 80038f4:	e197      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11d      	bne.n	800393a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800390e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003936:	b662      	cpsie	i
 8003938:	e175      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003960:	e161      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	2b03      	cmp	r3, #3
 8003968:	f200 811a 	bhi.w	8003ba0 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b01      	cmp	r3, #1
 8003972:	d123      	bne.n	80039bc <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f002 f8b9 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e162      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	6912      	ldr	r2, [r2, #16]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ba:	e134      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d150      	bne.n	8003a66 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	2200      	movs	r2, #0
 80039cc:	4906      	ldr	r1, [pc, #24]	; (80039e8 <HAL_I2C_Master_Receive+0x238>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f001 ff04 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e137      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
 80039de:	bf00      	nop
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000
 80039e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039ec:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6912      	ldr	r2, [r2, #16]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a30:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6912      	ldr	r2, [r2, #16]
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a64:	e0df      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	497a      	ldr	r1, [pc, #488]	; (8003c58 <HAL_I2C_Master_Receive+0x4a8>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f001 feb3 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0e6      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a90:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	6912      	ldr	r2, [r2, #16]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ac4:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_I2C_Master_Receive+0x4ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_I2C_Master_Receive+0x4b0>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	0a1a      	lsrs	r2, r3, #8
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00da      	lsls	r2, r3, #3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d117      	bne.n	8003b1a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e099      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d1da      	bne.n	8003ade <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	6912      	ldr	r2, [r2, #16]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b6a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	6912      	ldr	r2, [r2, #16]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b9e:	e042      	b.n	8003c26 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f001 ffa3 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04c      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	6912      	ldr	r2, [r2, #16]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d118      	bne.n	8003c26 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	6912      	ldr	r2, [r2, #16]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f47f ae99 	bne.w	8003962 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3728      	adds	r7, #40	; 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	00010004 	.word	0x00010004
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	14f8b589 	.word	0x14f8b589

08003c64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d003      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x38>
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	f040 80b1 	bne.w	8003dfe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003cbc:	d003      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x62>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_EV_IRQHandler+0x66>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_I2C_EV_IRQHandler+0x68>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f000 8114 	beq.w	8003efa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x90>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f001 ff86 	bl	8005bf8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fd5f 	bl	80047b0 <I2C_Master_SB>
 8003cf2:	e083      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0xac>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fdd4 	bl	80048b6 <I2C_Master_ADD10>
 8003d0e:	e075      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_I2C_EV_IRQHandler+0xc8>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fdef 	bl	8004908 <I2C_Master_ADDR>
 8003d2a:	e067      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d036      	beq.n	8003da4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d44:	f000 80db 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x10a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x10a>
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9e1 	bl	800412e <I2C_MasterTransmit_TXE>
 8003d6c:	e046      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80c2 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80bc 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d86:	7bbb      	ldrb	r3, [r7, #14]
 8003d88:	2b21      	cmp	r3, #33	; 0x21
 8003d8a:	d103      	bne.n	8003d94 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa6a 	bl	8004266 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d92:	e0b4      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	f040 80b1 	bne.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fad8 	bl	8004352 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da2:	e0ac      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	f000 80a4 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x178>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x178>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb50 	bl	800447a <I2C_MasterReceive_RXNE>
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 808b 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8085 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fbf1 	bl	80045dc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfa:	e080      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
 8003dfc:	e07f      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e007      	b.n	8003e20 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d011      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 ffb5 	bl	8004db6 <I2C_Slave_ADDR>
 8003e4c:	e05a      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x206>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fff0 	bl	8004e48 <I2C_Slave_STOPF>
 8003e68:	e04c      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	2b21      	cmp	r3, #33	; 0x21
 8003e6e:	d002      	beq.n	8003e76 <HAL_I2C_EV_IRQHandler+0x212>
 8003e70:	7bbb      	ldrb	r3, [r7, #14]
 8003e72:	2b29      	cmp	r3, #41	; 0x29
 8003e74:	d120      	bne.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_I2C_EV_IRQHandler+0x238>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_I2C_EV_IRQHandler+0x238>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fed2 	bl	8004c3e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9a:	e032      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02d      	beq.n	8003f02 <HAL_I2C_EV_IRQHandler+0x29e>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d028      	beq.n	8003f02 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 ff01 	bl	8004cb8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb6:	e024      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x27a>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x27a>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ff0e 	bl	8004cf8 <I2C_SlaveReceive_RXNE>
 8003edc:	e012      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ff3e 	bl	8004d74 <I2C_SlaveReceive_BTF>
 8003ef8:	e004      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f02:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b08a      	sub	sp, #40	; 0x28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_I2C_ER_IRQHandler+0x5a>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f52:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <HAL_I2C_ER_IRQHandler+0x80>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d03e      	beq.n	8004012 <HAL_I2C_ER_IRQHandler+0x108>
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d039      	beq.n	8004012 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003f9e:	7efb      	ldrb	r3, [r7, #27]
 8003fa0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003fb8:	7ebb      	ldrb	r3, [r7, #26]
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d112      	bne.n	8003fe4 <HAL_I2C_ER_IRQHandler+0xda>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_I2C_ER_IRQHandler+0xda>
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b21      	cmp	r3, #33	; 0x21
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b29      	cmp	r3, #41	; 0x29
 8003fce:	d005      	beq.n	8003fdc <HAL_I2C_ER_IRQHandler+0xd2>
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b28      	cmp	r3, #40	; 0x28
 8003fd4:	d106      	bne.n	8003fe4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b21      	cmp	r3, #33	; 0x21
 8003fda:	d103      	bne.n	8003fe4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f001 f863 	bl	80050a8 <I2C_Slave_AF>
 8003fe2:	e016      	b.n	8004012 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ff6:	7efb      	ldrb	r3, [r7, #27]
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d002      	beq.n	8004002 <HAL_I2C_ER_IRQHandler+0xf8>
 8003ffc:	7efb      	ldrb	r3, [r7, #27]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d107      	bne.n	8004012 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004010:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <HAL_I2C_ER_IRQHandler+0x12e>
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004036:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 f89c 	bl	8005188 <I2C_ITError>
  }
}
 8004050:	bf00      	nop
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
 80040ac:	4613      	mov	r3, r2
 80040ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004144:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d150      	bne.n	80041f6 <I2C_MasterTransmit_TXE+0xc8>
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d14d      	bne.n	80041f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d01d      	beq.n	800419c <I2C_MasterTransmit_TXE+0x6e>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b20      	cmp	r3, #32
 8004164:	d01a      	beq.n	800419c <I2C_MasterTransmit_TXE+0x6e>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800416c:	d016      	beq.n	800419c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	6852      	ldr	r2, [r2, #4]
 8004178:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800417c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2211      	movs	r2, #17
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff5f 	bl	8004058 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800419a:	e060      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	6852      	ldr	r2, [r2, #4]
 80041a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d107      	bne.n	80041e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ff74 	bl	80040cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e4:	e03b      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ff32 	bl	8004058 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f4:	e033      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b21      	cmp	r3, #33	; 0x21
 80041fa:	d005      	beq.n	8004208 <I2C_MasterTransmit_TXE+0xda>
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d12d      	bne.n	800425e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b22      	cmp	r3, #34	; 0x22
 8004206:	d12a      	bne.n	800425e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	6852      	ldr	r2, [r2, #4]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004222:	e01c      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d103      	bne.n	8004238 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f88e 	bl	8004352 <I2C_MemoryTransmit_TXE_BTF>
}
 8004236:	e012      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800425c:	e7ff      	b.n	800425e <I2C_MasterTransmit_TXE+0x130>
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b21      	cmp	r3, #33	; 0x21
 800427e:	d164      	bne.n	800434a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80042ae:	e04c      	b.n	800434a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d01d      	beq.n	80042f2 <I2C_MasterTransmit_BTF+0x8c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d01a      	beq.n	80042f2 <I2C_MasterTransmit_BTF+0x8c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c2:	d016      	beq.n	80042f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	6852      	ldr	r2, [r2, #4]
 80042ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2211      	movs	r2, #17
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff feb4 	bl	8004058 <HAL_I2C_MasterTxCpltCallback>
}
 80042f0:	e02b      	b.n	800434a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004300:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d107      	bne.n	800433c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fec9 	bl	80040cc <HAL_I2C_MemTxCpltCallback>
}
 800433a:	e006      	b.n	800434a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fe87 	bl	8004058 <HAL_I2C_MasterTxCpltCallback>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11d      	bne.n	80043a6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10b      	bne.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004388:	e073      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004392:	b292      	uxth	r2, r2
 8004394:	1212      	asrs	r2, r2, #8
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043a4:	e065      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10b      	bne.n	80043c6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043c4:	e055      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d151      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b22      	cmp	r3, #34	; 0x22
 80043d2:	d10d      	bne.n	80043f0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043ee:	e040      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d015      	beq.n	8004426 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b21      	cmp	r3, #33	; 0x21
 80043fe:	d112      	bne.n	8004426 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004424:	e025      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d120      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b21      	cmp	r3, #33	; 0x21
 8004434:	d11d      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	6852      	ldr	r2, [r2, #4]
 8004440:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004444:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fe2d 	bl	80040cc <HAL_I2C_MemTxCpltCallback>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b22      	cmp	r3, #34	; 0x22
 800448c:	f040 80a2 	bne.w	80045d4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d921      	bls.n	80044e2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	6912      	ldr	r2, [r2, #16]
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	f040 8082 	bne.w	80045d4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	6852      	ldr	r2, [r2, #4]
 80044da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044de:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80044e0:	e078      	b.n	80045d4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d074      	beq.n	80045d4 <I2C_MasterReceive_RXNE+0x15a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d002      	beq.n	80044f6 <I2C_MasterReceive_RXNE+0x7c>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d16e      	bne.n	80045d4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f001 fac8 	bl	8005a8c <I2C_WaitOnSTOPRequestThroughIT>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d142      	bne.n	8004588 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	6852      	ldr	r2, [r2, #4]
 800451c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004520:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	6912      	ldr	r2, [r2, #16]
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d10a      	bne.n	8004572 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fdb7 	bl	80040de <HAL_I2C_MemRxCpltCallback>
}
 8004570:	e030      	b.n	80045d4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2212      	movs	r2, #18
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fd72 	bl	800406a <HAL_I2C_MasterRxCpltCallback>
}
 8004586:	e025      	b.n	80045d4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	6852      	ldr	r2, [r2, #4]
 8004592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004596:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	6912      	ldr	r2, [r2, #16]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fd8e 	bl	80040f0 <HAL_I2C_ErrorCallback>
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d11b      	bne.n	800462c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	6852      	ldr	r2, [r2, #4]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	6912      	ldr	r2, [r2, #16]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800462a:	e0bd      	b.n	80047a8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b03      	cmp	r3, #3
 8004634:	d129      	bne.n	800468a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	6852      	ldr	r2, [r2, #4]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d00a      	beq.n	8004662 <I2C_MasterReceive_BTF+0x86>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d007      	beq.n	8004662 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004660:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	6912      	ldr	r2, [r2, #16]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004688:	e08e      	b.n	80047a8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d176      	bne.n	8004782 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d002      	beq.n	80046a0 <I2C_MasterReceive_BTF+0xc4>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b10      	cmp	r3, #16
 800469e:	d108      	bne.n	80046b2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e019      	b.n	80046e6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d002      	beq.n	80046be <I2C_MasterReceive_BTF+0xe2>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d108      	bne.n	80046d0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e00a      	b.n	80046e6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d007      	beq.n	80046e6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	6912      	ldr	r2, [r2, #16]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	6912      	ldr	r2, [r2, #16]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	6852      	ldr	r2, [r2, #4]
 800473c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004740:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d10a      	bne.n	800476c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fcba 	bl	80040de <HAL_I2C_MemRxCpltCallback>
}
 800476a:	e01d      	b.n	80047a8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2212      	movs	r2, #18
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fc75 	bl	800406a <HAL_I2C_MasterRxCpltCallback>
}
 8004780:	e012      	b.n	80047a8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	6912      	ldr	r2, [r2, #16]
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d116      	bne.n	80047f2 <I2C_Master_SB+0x42>
  {
    if (hi2c->EventCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d108      	bne.n	80047de <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047dc:	e066      	b.n	80048ac <I2C_Master_SB+0xfc>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	611a      	str	r2, [r3, #16]
}
 80047f0:	e05c      	b.n	80048ac <I2C_Master_SB+0xfc>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fa:	d132      	bne.n	8004862 <I2C_Master_SB+0xb2>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b21      	cmp	r3, #33	; 0x21
 8004806:	d108      	bne.n	800481a <I2C_Master_SB+0x6a>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004816:	611a      	str	r2, [r3, #16]
 8004818:	e008      	b.n	800482c <I2C_Master_SB+0x7c>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <I2C_Master_SB+0x8e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <I2C_Master_SB+0xa0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	d032      	beq.n	80048ac <I2C_Master_SB+0xfc>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02d      	beq.n	80048ac <I2C_Master_SB+0xfc>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	6852      	ldr	r2, [r2, #4]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	605a      	str	r2, [r3, #4]
}
 8004860:	e024      	b.n	80048ac <I2C_Master_SB+0xfc>
      if (hi2c->EventCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <I2C_Master_SB+0xd8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004872:	b292      	uxth	r2, r2
 8004874:	11d2      	asrs	r2, r2, #7
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	f002 0206 	and.w	r2, r2, #6
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f062 020f 	orn	r2, r2, #15
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	611a      	str	r2, [r3, #16]
}
 8004886:	e011      	b.n	80048ac <I2C_Master_SB+0xfc>
      else if (hi2c->EventCount == 1U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10d      	bne.n	80048ac <I2C_Master_SB+0xfc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004898:	b292      	uxth	r2, r2
 800489a:	11d2      	asrs	r2, r2, #7
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	f002 0206 	and.w	r2, r2, #6
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f062 020e 	orn	r2, r2, #14
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	611a      	str	r2, [r3, #16]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <I2C_Master_ADD10+0x26>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d108      	bne.n	80048ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <I2C_Master_ADD10+0x48>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6852      	ldr	r2, [r2, #4]
 80048f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fc:	605a      	str	r2, [r3, #4]
  }
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004908:	b480      	push	{r7}
 800490a:	b091      	sub	sp, #68	; 0x44
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b22      	cmp	r3, #34	; 0x22
 8004930:	f040 8174 	bne.w	8004c1c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <I2C_Master_ADDR+0x54>
 800493c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d10b      	bne.n	800495c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004944:	2300      	movs	r3, #0
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	633b      	str	r3, [r7, #48]	; 0x30
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	633b      	str	r3, [r7, #48]	; 0x30
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	e16b      	b.n	8004c34 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11d      	bne.n	80049a0 <I2C_Master_ADDR+0x98>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800496c:	d118      	bne.n	80049a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496e:	2300      	movs	r3, #0
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004992:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	651a      	str	r2, [r3, #80]	; 0x50
 800499e:	e149      	b.n	8004c34 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e120      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	f040 808a 	bne.w	8004af2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e4:	d137      	bne.n	8004a56 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a04:	d113      	bne.n	8004a2e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	e0f2      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e0de      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d02e      	beq.n	8004aba <I2C_Master_ADDR+0x1b2>
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d02b      	beq.n	8004aba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	2b12      	cmp	r3, #18
 8004a66:	d102      	bne.n	8004a6e <I2C_Master_ADDR+0x166>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d125      	bne.n	8004aba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d00e      	beq.n	8004a92 <I2C_Master_ADDR+0x18a>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d00b      	beq.n	8004a92 <I2C_Master_ADDR+0x18a>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d008      	beq.n	8004a92 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e007      	b.n	8004aa2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	e0ac      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e090      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d158      	bne.n	8004bae <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d021      	beq.n	8004b46 <I2C_Master_ADDR+0x23e>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d01e      	beq.n	8004b46 <I2C_Master_ADDR+0x23e>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d01b      	beq.n	8004b46 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e012      	b.n	8004b6c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d14b      	bne.n	8004c14 <I2C_Master_ADDR+0x30c>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b82:	d00b      	beq.n	8004b9c <I2C_Master_ADDR+0x294>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d008      	beq.n	8004b9c <I2C_Master_ADDR+0x294>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d005      	beq.n	8004b9c <I2C_Master_ADDR+0x294>
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d002      	beq.n	8004b9c <I2C_Master_ADDR+0x294>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d13b      	bne.n	8004c14 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	6852      	ldr	r2, [r2, #4]
 8004ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	e032      	b.n	8004c14 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bcc:	d117      	bne.n	8004bfe <I2C_Master_ADDR+0x2f6>
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bd4:	d00b      	beq.n	8004bee <I2C_Master_ADDR+0x2e6>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d008      	beq.n	8004bee <I2C_Master_ADDR+0x2e6>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d005      	beq.n	8004bee <I2C_Master_ADDR+0x2e6>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d002      	beq.n	8004bee <I2C_Master_ADDR+0x2e6>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d107      	bne.n	8004bfe <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	6852      	ldr	r2, [r2, #4]
 8004bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c1a:	e00b      	b.n	8004c34 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
}
 8004c32:	e7ff      	b.n	8004c34 <I2C_Master_ADDR+0x32c>
 8004c34:	bf00      	nop
 8004c36:	3744      	adds	r7, #68	; 0x44
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02b      	beq.n	8004cb0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d114      	bne.n	8004cb0 <I2C_SlaveTransmit_TXE+0x72>
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b29      	cmp	r3, #41	; 0x29
 8004c8a:	d111      	bne.n	8004cb0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2221      	movs	r2, #33	; 0x21
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2228      	movs	r2, #40	; 0x28
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff f9e6 	bl	800407c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02c      	beq.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	6912      	ldr	r2, [r2, #16]
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d114      	bne.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b2a      	cmp	r3, #42	; 0x2a
 8004d46:	d111      	bne.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	6852      	ldr	r2, [r2, #4]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2222      	movs	r2, #34	; 0x22
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2228      	movs	r2, #40	; 0x28
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff f991 	bl	800408e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6912      	ldr	r2, [r2, #16]
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dd0:	2b28      	cmp	r3, #40	; 0x28
 8004dd2:	d125      	bne.n	8004e20 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	6852      	ldr	r2, [r2, #4]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	81bb      	strh	r3, [r7, #12]
 8004e02:	e002      	b.n	8004e0a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e12:	89ba      	ldrh	r2, [r7, #12]
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff f941 	bl	80040a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e1e:	e00e      	b.n	8004e3e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e20:	2300      	movs	r3, #0
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea4:	d172      	bne.n	8004f8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b22      	cmp	r3, #34	; 0x22
 8004eaa:	d002      	beq.n	8004eb2 <I2C_Slave_STOPF+0x6a>
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb0:	d135      	bne.n	8004f1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	6852      	ldr	r2, [r2, #4]
 8004ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fe92 	bl	8002c14 <HAL_DMA_GetState>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d049      	beq.n	8004f8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <I2C_Slave_STOPF+0x258>)
 8004efc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fd fe0a 	bl	8002b1c <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d03d      	beq.n	8004f8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f1c:	e035      	b.n	8004f8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0204 	orr.w	r2, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd fe5c 	bl	8002c14 <HAL_DMA_GetState>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d014      	beq.n	8004f8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <I2C_Slave_STOPF+0x258>)
 8004f68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fdd4 	bl	8002b1c <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
 8004f88:	e000      	b.n	8004f8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03e      	beq.n	8005014 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d112      	bne.n	8004fca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	6912      	ldr	r2, [r2, #16]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d112      	bne.n	8004ffe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	6912      	ldr	r2, [r2, #16]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0204 	orr.w	r2, r3, #4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8b3 	bl	8005188 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005022:	e039      	b.n	8005098 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b2a      	cmp	r3, #42	; 0x2a
 8005028:	d109      	bne.n	800503e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2228      	movs	r2, #40	; 0x28
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff f828 	bl	800408e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b28      	cmp	r3, #40	; 0x28
 8005048:	d111      	bne.n	800506e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <I2C_Slave_STOPF+0x25c>)
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff f827 	bl	80040ba <HAL_I2C_ListenCpltCallback>
}
 800506c:	e014      	b.n	8005098 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2b22      	cmp	r3, #34	; 0x22
 8005074:	d002      	beq.n	800507c <I2C_Slave_STOPF+0x234>
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b22      	cmp	r3, #34	; 0x22
 800507a:	d10d      	bne.n	8005098 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe fffb 	bl	800408e <HAL_I2C_SlaveRxCpltCallback>
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	0800568d 	.word	0x0800568d
 80050a4:	ffff0000 	.word	0xffff0000

080050a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d002      	beq.n	80050ca <I2C_Slave_AF+0x22>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d129      	bne.n	800511e <I2C_Slave_AF+0x76>
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b28      	cmp	r3, #40	; 0x28
 80050ce:	d126      	bne.n	800511e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <I2C_Slave_AF+0xdc>)
 80050d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	6852      	ldr	r2, [r2, #4]
 80050e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fe ffcf 	bl	80040ba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800511c:	e02e      	b.n	800517c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b21      	cmp	r3, #33	; 0x21
 8005122:	d126      	bne.n	8005172 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a17      	ldr	r2, [pc, #92]	; (8005184 <I2C_Slave_AF+0xdc>)
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2221      	movs	r2, #33	; 0x21
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	6852      	ldr	r2, [r2, #4]
 800514a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005158:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fe ff86 	bl	800407c <HAL_I2C_SlaveTxCpltCallback>
}
 8005170:	e004      	b.n	800517c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800517a:	615a      	str	r2, [r3, #20]
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	ffff0000 	.word	0xffff0000

08005188 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d002      	beq.n	80051ac <I2C_ITError+0x24>
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d10a      	bne.n	80051c2 <I2C_ITError+0x3a>
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b22      	cmp	r3, #34	; 0x22
 80051b0:	d107      	bne.n	80051c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051c8:	2b28      	cmp	r3, #40	; 0x28
 80051ca:	d107      	bne.n	80051dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2228      	movs	r2, #40	; 0x28
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051da:	e015      	b.n	8005208 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ea:	d00a      	beq.n	8005202 <I2C_ITError+0x7a>
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b60      	cmp	r3, #96	; 0x60
 80051f0:	d007      	beq.n	8005202 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005216:	d161      	bne.n	80052dc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	6852      	ldr	r2, [r2, #4]
 8005222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005226:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005230:	2b01      	cmp	r3, #1
 8005232:	d020      	beq.n	8005276 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	4a6a      	ldr	r2, [pc, #424]	; (80053e4 <I2C_ITError+0x25c>)
 800523a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd fc6b 	bl	8002b1c <HAL_DMA_Abort_IT>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8089 	beq.w	8005360 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005270:	4610      	mov	r0, r2
 8005272:	4798      	blx	r3
 8005274:	e074      	b.n	8005360 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	4a5a      	ldr	r2, [pc, #360]	; (80053e4 <I2C_ITError+0x25c>)
 800527c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd fc4a 	bl	8002b1c <HAL_DMA_Abort_IT>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d068      	beq.n	8005360 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d10b      	bne.n	80052b4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	6912      	ldr	r2, [r2, #16]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052d6:	4610      	mov	r0, r2
 80052d8:	4798      	blx	r3
 80052da:	e041      	b.n	8005360 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d125      	bne.n	8005334 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d10b      	bne.n	800531c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	6912      	ldr	r2, [r2, #16]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fe fee8 	bl	8004102 <HAL_I2C_AbortCpltCallback>
 8005332:	e015      	b.n	8005360 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d10b      	bne.n	800535a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	6912      	ldr	r2, [r2, #16]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fe fec8 	bl	80040f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10e      	bne.n	800538e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	6852      	ldr	r2, [r2, #4]
 8005398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d113      	bne.n	80053da <I2C_ITError+0x252>
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b28      	cmp	r3, #40	; 0x28
 80053b6:	d110      	bne.n	80053da <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <I2C_ITError+0x260>)
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fe fe70 	bl	80040ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	0800568d 	.word	0x0800568d
 80053e8:	ffff0000 	.word	0xffff0000

080053ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d006      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e00b      	b.n	8005440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b12      	cmp	r3, #18
 800542e:	d107      	bne.n	8005440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f9c5 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d103      	bne.n	8005470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e034      	b.n	80054de <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547c:	d107      	bne.n	800548e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	897a      	ldrh	r2, [r7, #10]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800548a:	611a      	str	r2, [r3, #16]
 800548c:	e01b      	b.n	80054c6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	897a      	ldrh	r2, [r7, #10]
 8005494:	11d2      	asrs	r2, r2, #7
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f002 0206 	and.w	r2, r2, #6
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f062 020f 	orn	r2, r2, #15
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	490f      	ldr	r1, [pc, #60]	; (80054e8 <I2C_MasterRequestWrite+0xfc>)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f9ec 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e010      	b.n	80054de <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	897a      	ldrh	r2, [r7, #10]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4908      	ldr	r1, [pc, #32]	; (80054ec <I2C_MasterRequestWrite+0x100>)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f9dc 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	00010008 	.word	0x00010008
 80054ec:	00010002 	.word	0x00010002

080054f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d006      	beq.n	800552a <I2C_MasterRequestRead+0x3a>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d003      	beq.n	800552a <I2C_MasterRequestRead+0x3a>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005528:	d108      	bne.n	800553c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e00b      	b.n	8005554 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	2b11      	cmp	r3, #17
 8005542:	d107      	bne.n	8005554 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f93b 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d103      	bne.n	8005584 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e079      	b.n	800567c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005590:	d108      	bne.n	80055a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	897a      	ldrh	r2, [r7, #10]
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	611a      	str	r2, [r3, #16]
 80055a2:	e05f      	b.n	8005664 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	897a      	ldrh	r2, [r7, #10]
 80055aa:	11d2      	asrs	r2, r2, #7
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	f002 0206 	and.w	r2, r2, #6
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f062 020f 	orn	r2, r2, #15
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4930      	ldr	r1, [pc, #192]	; (8005684 <I2C_MasterRequestRead+0x194>)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f961 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e054      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	897a      	ldrh	r2, [r7, #10]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4929      	ldr	r1, [pc, #164]	; (8005688 <I2C_MasterRequestRead+0x198>)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f951 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e044      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005616:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f8d9 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d103      	bne.n	8005648 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e017      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	897a      	ldrh	r2, [r7, #10]
 8005652:	11d2      	asrs	r2, r2, #7
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	f002 0206 	and.w	r2, r2, #6
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	f062 020e 	orn	r2, r2, #14
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4907      	ldr	r1, [pc, #28]	; (8005688 <I2C_MasterRequestRead+0x198>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f90d 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010008 	.word	0x00010008
 8005688:	00010002 	.word	0x00010002

0800568c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056a6:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <I2C_DMAAbort+0x148>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	4a4a      	ldr	r2, [pc, #296]	; (80057d8 <I2C_DMAAbort+0x14c>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a1a      	lsrs	r2, r3, #8
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	00da      	lsls	r2, r3, #3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80056d2:	e00a      	b.n	80056ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e8:	d0ea      	beq.n	80056c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	2200      	movs	r2, #0
 80056f8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	2200      	movs	r2, #0
 8005708:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005718:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	2200      	movs	r2, #0
 800573e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b60      	cmp	r3, #96	; 0x60
 800575a:	d10e      	bne.n	800577a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7fe fcc5 	bl	8004102 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005778:	e027      	b.n	80057ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005780:	2b28      	cmp	r3, #40	; 0x28
 8005782:	d117      	bne.n	80057b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2228      	movs	r2, #40	; 0x28
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057b2:	e007      	b.n	80057c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f7fe fc93 	bl	80040f0 <HAL_I2C_ErrorCallback>
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000000 	.word	0x20000000
 80057d8:	14f8b589 	.word	0x14f8b589

080057dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ec:	e025      	b.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d021      	beq.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fc fbb1 	bl	8001f5c <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d802      	bhi.n	800580c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e023      	b.n	8005882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d10d      	bne.n	8005860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	43da      	mvns	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	e00c      	b.n	800587a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	43da      	mvns	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	429a      	cmp	r2, r3
 800587e:	d0b6      	beq.n	80057ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005898:	e051      	b.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d123      	bne.n	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e046      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d021      	beq.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fc fb2f 	bl	8001f5c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d802      	bhi.n	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e020      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10c      	bne.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e00b      	b.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d18d      	bne.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005994:	e02d      	b.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f900 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e02d      	b.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d021      	beq.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fc fad5 	bl	8001f5c <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad2      	subs	r2, r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d802      	bhi.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d116      	bne.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0220 	orr.w	r2, r3, #32
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e007      	b.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d1ca      	bne.n	8005996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a16:	e02d      	b.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f8bf 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e02d      	b.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d021      	beq.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a30:	f7fc fa94 	bl	8001f5c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d802      	bhi.n	8005a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d116      	bne.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e007      	b.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d1ca      	bne.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	08db      	lsrs	r3, r3, #3
 8005a9e:	4a13      	ldr	r2, [pc, #76]	; (8005aec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	0a1a      	lsrs	r2, r3, #8
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d107      	bne.n	8005aca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e008      	b.n	8005adc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad8:	d0e9      	beq.n	8005aae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	14f8b589 	.word	0x14f8b589

08005af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005afc:	e042      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d119      	bne.n	8005b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0210 	mvn.w	r2, #16
 8005b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e029      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b40:	f7fc fa0c 	bl	8001f5c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d802      	bhi.n	8005b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e007      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d1b5      	bne.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d11b      	bne.n	8005bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c08:	d103      	bne.n	8005c12 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c10:	e007      	b.n	8005c22 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c1a:	d102      	bne.n	8005c22 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2208      	movs	r2, #8
 8005c20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e26c      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8087 	beq.w	8005d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c4c:	4b92      	ldr	r3, [pc, #584]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d00c      	beq.n	8005c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c58:	4b8f      	ldr	r3, [pc, #572]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d112      	bne.n	8005c8a <HAL_RCC_OscConfig+0x5e>
 8005c64:	4b8c      	ldr	r3, [pc, #560]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c72:	4b89      	ldr	r3, [pc, #548]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d06c      	beq.n	8005d58 <HAL_RCC_OscConfig+0x12c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d168      	bne.n	8005d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e246      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c92:	d106      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x76>
 8005c94:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c96:	4b80      	ldr	r3, [pc, #512]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e02e      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x98>
 8005caa:	4a7b      	ldr	r2, [pc, #492]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	4b7a      	ldr	r3, [pc, #488]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4a78      	ldr	r2, [pc, #480]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	4b77      	ldr	r3, [pc, #476]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e01d      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xbc>
 8005cce:	4a72      	ldr	r2, [pc, #456]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	4b71      	ldr	r3, [pc, #452]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4a6f      	ldr	r2, [pc, #444]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	4b6e      	ldr	r3, [pc, #440]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005ce8:	4a6b      	ldr	r2, [pc, #428]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cea:	4b6b      	ldr	r3, [pc, #428]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	4b68      	ldr	r3, [pc, #416]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fc f928 	bl	8001f5c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d10:	f7fc f924 	bl	8001f5c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	; 0x64
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e1fa      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	4b5d      	ldr	r3, [pc, #372]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe4>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fc f914 	bl	8001f5c <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fc f910 	bl	8001f5c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1e6      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x10c>
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d063      	beq.n	8005e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d66:	4b4c      	ldr	r3, [pc, #304]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d72:	4b49      	ldr	r3, [pc, #292]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x18c>
 8005d7e:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d116      	bne.n	8005db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_RCC_OscConfig+0x176>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e1ba      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da2:	493d      	ldr	r1, [pc, #244]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	4b3c      	ldr	r3, [pc, #240]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db6:	e03a      	b.n	8005e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCC_OscConfig+0x270>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc6:	f7fc f8c9 	bl	8001f5c <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dce:	f7fc f8c5 	bl	8001f5c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e19b      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dec:	492a      	ldr	r1, [pc, #168]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]
 8005e00:	e015      	b.n	8005e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <HAL_RCC_OscConfig+0x270>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fc f8a8 	bl	8001f5c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fc f8a4 	bl	8001f5c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e17a      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d03a      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d019      	beq.n	8005e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_RCC_OscConfig+0x274>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e48:	f7fc f888 	bl	8001f5c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e50:	f7fc f884 	bl	8001f5c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e15a      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f000 fada 	bl	8006428 <RCC_Delay>
 8005e74:	e01c      	b.n	8005eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <HAL_RCC_OscConfig+0x274>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e7c:	f7fc f86e 	bl	8001f5c <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e82:	e00f      	b.n	8005ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e84:	f7fc f86a 	bl	8001f5c <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d908      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e140      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	42420000 	.word	0x42420000
 8005ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	4b9e      	ldr	r3, [pc, #632]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e9      	bne.n	8005e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80a6 	beq.w	800600a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec2:	4b97      	ldr	r3, [pc, #604]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10d      	bne.n	8005eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ece:	4a94      	ldr	r2, [pc, #592]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	4b93      	ldr	r3, [pc, #588]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	61d3      	str	r3, [r2, #28]
 8005eda:	4b91      	ldr	r3, [pc, #580]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eea:	4b8e      	ldr	r3, [pc, #568]	; (8006124 <HAL_RCC_OscConfig+0x4f8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d118      	bne.n	8005f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef6:	4a8b      	ldr	r2, [pc, #556]	; (8006124 <HAL_RCC_OscConfig+0x4f8>)
 8005ef8:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <HAL_RCC_OscConfig+0x4f8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f02:	f7fc f82b 	bl	8001f5c <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0a:	f7fc f827 	bl	8001f5c <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b64      	cmp	r3, #100	; 0x64
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e0fd      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1c:	4b81      	ldr	r3, [pc, #516]	; (8006124 <HAL_RCC_OscConfig+0x4f8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x312>
 8005f30:	4a7b      	ldr	r2, [pc, #492]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f32:	4b7b      	ldr	r3, [pc, #492]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6213      	str	r3, [r2, #32]
 8005f3c:	e02d      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x334>
 8005f46:	4a76      	ldr	r2, [pc, #472]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f48:	4b75      	ldr	r3, [pc, #468]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6213      	str	r3, [r2, #32]
 8005f52:	4a73      	ldr	r2, [pc, #460]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f54:	4b72      	ldr	r3, [pc, #456]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0304 	bic.w	r3, r3, #4
 8005f5c:	6213      	str	r3, [r2, #32]
 8005f5e:	e01c      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d10c      	bne.n	8005f82 <HAL_RCC_OscConfig+0x356>
 8005f68:	4a6d      	ldr	r2, [pc, #436]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f6a:	4b6d      	ldr	r3, [pc, #436]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f043 0304 	orr.w	r3, r3, #4
 8005f72:	6213      	str	r3, [r2, #32]
 8005f74:	4a6a      	ldr	r2, [pc, #424]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6213      	str	r3, [r2, #32]
 8005f80:	e00b      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f82:	4a67      	ldr	r2, [pc, #412]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f84:	4b66      	ldr	r3, [pc, #408]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	6213      	str	r3, [r2, #32]
 8005f8e:	4a64      	ldr	r2, [pc, #400]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f90:	4b63      	ldr	r3, [pc, #396]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f023 0304 	bic.w	r3, r3, #4
 8005f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d015      	beq.n	8005fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa2:	f7fb ffdb 	bl	8001f5c <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7fb ffd7 	bl	8001f5c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e0ab      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc0:	4b57      	ldr	r3, [pc, #348]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ee      	beq.n	8005faa <HAL_RCC_OscConfig+0x37e>
 8005fcc:	e014      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fce:	f7fb ffc5 	bl	8001f5c <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd4:	e00a      	b.n	8005fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd6:	f7fb ffc1 	bl	8001f5c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e095      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fec:	4b4c      	ldr	r3, [pc, #304]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1ee      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4a48      	ldr	r2, [pc, #288]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006000:	4b47      	ldr	r3, [pc, #284]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8081 	beq.w	8006116 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006014:	4b42      	ldr	r3, [pc, #264]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b08      	cmp	r3, #8
 800601e:	d061      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d146      	bne.n	80060b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006028:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <HAL_RCC_OscConfig+0x4fc>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602e:	f7fb ff95 	bl	8001f5c <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006036:	f7fb ff91 	bl	8001f5c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e067      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006048:	4b35      	ldr	r3, [pc, #212]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d108      	bne.n	8006070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800605e:	4930      	ldr	r1, [pc, #192]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006070:	482b      	ldr	r0, [pc, #172]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006072:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a19      	ldr	r1, [r3, #32]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	430b      	orrs	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006088:	4b27      	ldr	r3, [pc, #156]	; (8006128 <HAL_RCC_OscConfig+0x4fc>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fb ff65 	bl	8001f5c <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006096:	f7fb ff61 	bl	8001f5c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e037      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x46a>
 80060b4:	e02f      	b.n	8006116 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <HAL_RCC_OscConfig+0x4fc>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fb ff4e 	bl	8001f5c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fb ff4a 	bl	8001f5c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e020      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x498>
 80060e2:	e018      	b.n	8006116 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e013      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_RCC_OscConfig+0x4f4>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	429a      	cmp	r2, r3
 8006102:	d106      	bne.n	8006112 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	429a      	cmp	r2, r3
 8006110:	d001      	beq.n	8006116 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40021000 	.word	0x40021000
 8006124:	40007000 	.word	0x40007000
 8006128:	42420060 	.word	0x42420060

0800612c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0d0      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0207 	and.w	r2, r3, #7
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d210      	bcs.n	8006170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614e:	4967      	ldr	r1, [pc, #412]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006150:	4b66      	ldr	r3, [pc, #408]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 0207 	bic.w	r2, r3, #7
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800615e:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0207 	and.w	r2, r3, #7
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0b8      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d020      	beq.n	80061be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006188:	4a59      	ldr	r2, [pc, #356]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800618a:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a0:	4a53      	ldr	r2, [pc, #332]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ac:	4950      	ldr	r1, [pc, #320]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d040      	beq.n	800624c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d2:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d115      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e07f      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e073      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fa:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e06b      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620a:	4939      	ldr	r1, [pc, #228]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800620c:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f023 0203 	bic.w	r2, r3, #3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800621c:	f7fb fe9e 	bl	8001f5c <HAL_GetTick>
 8006220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	e00a      	b.n	800623a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006224:	f7fb fe9a 	bl	8001f5c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e053      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623a:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 020c 	and.w	r2, r3, #12
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	429a      	cmp	r2, r3
 800624a:	d1eb      	bne.n	8006224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0207 	and.w	r2, r3, #7
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d910      	bls.n	800627c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4924      	ldr	r1, [pc, #144]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800625c:	4b23      	ldr	r3, [pc, #140]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f023 0207 	bic.w	r2, r3, #7
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0207 	and.w	r2, r3, #7
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e032      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006288:	4919      	ldr	r1, [pc, #100]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062a6:	4912      	ldr	r1, [pc, #72]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4313      	orrs	r3, r2
 80062b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ba:	f000 f821 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80062be:	4601      	mov	r1, r0
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	5cd3      	ldrb	r3, [r2, r3]
 80062ce:	fa21 f303 	lsr.w	r3, r1, r3
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <HAL_RCC_ClockConfig+0x1cc>)
 80062d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x1d0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fb fdfc 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40022000 	.word	0x40022000
 80062f0:	40021000 	.word	0x40021000
 80062f4:	080092f4 	.word	0x080092f4
 80062f8:	20000000 	.word	0x20000000
 80062fc:	20000004 	.word	0x20000004

08006300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006300:	b490      	push	{r4, r7}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006308:	1d3c      	adds	r4, r7, #4
 800630a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800630c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	2300      	movs	r3, #0
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800632a:	4b23      	ldr	r3, [pc, #140]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d002      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0x40>
 800633a:	2b08      	cmp	r3, #8
 800633c:	d003      	beq.n	8006346 <HAL_RCC_GetSysClockFreq+0x46>
 800633e:	e02d      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006342:	623b      	str	r3, [r7, #32]
      break;
 8006344:	e02d      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	0c9b      	lsrs	r3, r3, #18
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006352:	4413      	add	r3, r2
 8006354:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006358:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	0c5b      	lsrs	r3, r3, #17
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006372:	4413      	add	r3, r2
 8006374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006378:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4a0f      	ldr	r2, [pc, #60]	; (80063bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800637e:	fb02 f203 	mul.w	r2, r2, r3
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e004      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	623b      	str	r3, [r7, #32]
      break;
 800639a:	e002      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800639e:	623b      	str	r3, [r7, #32]
      break;
 80063a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	; 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc90      	pop	{r4, r7}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	080092e0 	.word	0x080092e0
 80063b4:	080092f0 	.word	0x080092f0
 80063b8:	40021000 	.word	0x40021000
 80063bc:	007a1200 	.word	0x007a1200
 80063c0:	003d0900 	.word	0x003d0900

080063c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ca:	681b      	ldr	r3, [r3, #0]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	20000000 	.word	0x20000000

080063d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063dc:	f7ff fff2 	bl	80063c4 <HAL_RCC_GetHCLKFreq>
 80063e0:	4601      	mov	r1, r0
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4a03      	ldr	r2, [pc, #12]	; (80063fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ee:	5cd3      	ldrb	r3, [r2, r3]
 80063f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40021000 	.word	0x40021000
 80063fc:	08009304 	.word	0x08009304

08006400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006404:	f7ff ffde 	bl	80063c4 <HAL_RCC_GetHCLKFreq>
 8006408:	4601      	mov	r1, r0
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	0adb      	lsrs	r3, r3, #11
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4a03      	ldr	r2, [pc, #12]	; (8006424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40021000 	.word	0x40021000
 8006424:	08009304 	.word	0x08009304

08006428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <RCC_Delay+0x34>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <RCC_Delay+0x38>)
 8006436:	fba2 2303 	umull	r2, r3, r2, r3
 800643a:	0a5b      	lsrs	r3, r3, #9
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006444:	bf00      	nop
  }
  while (Delay --);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1e5a      	subs	r2, r3, #1
 800644a:	60fa      	str	r2, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f9      	bne.n	8006444 <RCC_Delay+0x1c>
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000000 	.word	0x20000000
 8006460:	10624dd3 	.word	0x10624dd3

08006464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e03f      	b.n	80064f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb fcc2 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	68d2      	ldr	r2, [r2, #12]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fc85 	bl	8006db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	6912      	ldr	r2, [r2, #16]
 80064b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6952      	ldr	r2, [r2, #20]
 80064c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	68d2      	ldr	r2, [r2, #12]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08a      	sub	sp, #40	; 0x28
 8006502:	af02      	add	r7, sp, #8
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	d17b      	bne.n	8006616 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_UART_Transmit+0x2c>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e074      	b.n	8006618 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_UART_Transmit+0x3e>
 8006538:	2302      	movs	r3, #2
 800653a:	e06d      	b.n	8006618 <HAL_UART_Transmit+0x11a>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2221      	movs	r2, #33	; 0x21
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006552:	f7fb fd03 	bl	8001f5c <HAL_GetTick>
 8006556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d108      	bne.n	8006580 <HAL_UART_Transmit+0x82>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e003      	b.n	8006588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006590:	e029      	b.n	80065e6 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fa38 	bl	8006a12 <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e035      	b.n	8006618 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	3302      	adds	r3, #2
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e007      	b.n	80065d8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	7812      	ldrb	r2, [r2, #0]
 80065d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	3301      	adds	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1d0      	bne.n	8006592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fa09 	bl	8006a12 <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e006      	b.n	8006618 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	d11d      	bne.n	8006676 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_UART_Receive_IT+0x26>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e016      	b.n	8006678 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_UART_Receive_IT+0x38>
 8006654:	2302      	movs	r3, #2
 8006656:	e00f      	b.n	8006678 <HAL_UART_Receive_IT+0x58>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	461a      	mov	r2, r3
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fa1a 	bl	8006aa6 <UART_Start_Receive_IT>
 8006672:	4603      	mov	r3, r0
 8006674:	e000      	b.n	8006678 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10d      	bne.n	80066d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_UART_IRQHandler+0x52>
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 faca 	bl	8006c64 <UART_Receive_IT>
      return;
 80066d0:	e17c      	b.n	80069cc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80b1 	beq.w	800683c <HAL_UART_IRQHandler+0x1bc>
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_UART_IRQHandler+0x70>
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80a6 	beq.w	800683c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_UART_IRQHandler+0x90>
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f043 0201 	orr.w	r2, r3, #1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_UART_IRQHandler+0xb0>
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	f043 0202 	orr.w	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_UART_IRQHandler+0xd0>
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	f043 0204 	orr.w	r2, r3, #4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <HAL_UART_IRQHandler+0xfa>
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_UART_IRQHandler+0xee>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f043 0208 	orr.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 811f 	beq.w	80069c2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_UART_IRQHandler+0x11e>
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa63 	bl	8006c64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <HAL_UART_IRQHandler+0x146>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d031      	beq.n	800682a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9a6 	bl	8006b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d023      	beq.n	8006822 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	6952      	ldr	r2, [r2, #20]
 80067e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	4a77      	ldr	r2, [pc, #476]	; (80069d4 <HAL_UART_IRQHandler+0x354>)
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fc f98c 	bl	8002b1c <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e00e      	b.n	8006838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8e5 	bl	80069ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e00a      	b.n	8006838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8e1 	bl	80069ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006828:	e006      	b.n	8006838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8dd 	bl	80069ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006836:	e0c4      	b.n	80069c2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	bf00      	nop
    return;
 800683a:	e0c2      	b.n	80069c2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2b01      	cmp	r3, #1
 8006842:	f040 80a1 	bne.w	8006988 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 809b 	beq.w	8006988 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8095 	beq.w	8006988 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04e      	beq.n	8006920 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 800688c:	8a7b      	ldrh	r3, [r7, #18]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8099 	beq.w	80069c6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006898:	8a7a      	ldrh	r2, [r7, #18]
 800689a:	429a      	cmp	r2, r3
 800689c:	f080 8093 	bcs.w	80069c6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8a7a      	ldrh	r2, [r7, #18]
 80068a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d02b      	beq.n	8006908 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	68d2      	ldr	r2, [r2, #12]
 80068ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	6952      	ldr	r2, [r2, #20]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	6952      	ldr	r2, [r2, #20]
 80068da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	68d2      	ldr	r2, [r2, #12]
 80068f8:	f022 0210 	bic.w	r2, r2, #16
 80068fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc f8cf 	bl	8002aa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	b29b      	uxth	r3, r3
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f86f 	bl	80069fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800691e:	e052      	b.n	80069c6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006928:	b29b      	uxth	r3, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d048      	beq.n	80069ca <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006938:	8a3b      	ldrh	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d045      	beq.n	80069ca <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	68d2      	ldr	r2, [r2, #12]
 8006948:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800694c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	6952      	ldr	r2, [r2, #20]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	68d2      	ldr	r2, [r2, #12]
 8006976:	f022 0210 	bic.w	r2, r2, #16
 800697a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800697c:	8a3b      	ldrh	r3, [r7, #16]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f83b 	bl	80069fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006986:	e020      	b.n	80069ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_UART_IRQHandler+0x324>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8fb 	bl	8006b98 <UART_Transmit_IT>
    return;
 80069a2:	e013      	b.n	80069cc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00e      	beq.n	80069cc <HAL_UART_IRQHandler+0x34c>
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f93b 	bl	8006c34 <UART_EndTransmit_IT>
    return;
 80069be:	bf00      	nop
 80069c0:	e004      	b.n	80069cc <HAL_UART_IRQHandler+0x34c>
    return;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <HAL_UART_IRQHandler+0x34c>
      return;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_UART_IRQHandler+0x34c>
      return;
 80069ca:	bf00      	nop
  }
}
 80069cc:	3728      	adds	r7, #40	; 0x28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08006b71 	.word	0x08006b71

080069d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a22:	e02c      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d028      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a32:	f7fb fa93 	bl	8001f5c <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d91d      	bls.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	68d2      	ldr	r2, [r2, #12]
 8006a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	6952      	ldr	r2, [r2, #20]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00f      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	401a      	ands	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0c3      	beq.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2222      	movs	r2, #34	; 0x22
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	68d2      	ldr	r2, [r2, #12]
 8006ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	6952      	ldr	r2, [r2, #20]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	68d2      	ldr	r2, [r2, #12]
 8006b06:	f042 0220 	orr.w	r2, r2, #32
 8006b0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	68d2      	ldr	r2, [r2, #12]
 8006b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	6952      	ldr	r2, [r2, #20]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	68d2      	ldr	r2, [r2, #12]
 8006b52:	f022 0210 	bic.w	r2, r2, #16
 8006b56:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff2d 	bl	80069ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b21      	cmp	r3, #33	; 0x21
 8006baa:	d13d      	bne.n	8006c28 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb4:	d113      	bne.n	8006bde <UART_Transmit_IT+0x46>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10f      	bne.n	8006bde <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	8812      	ldrh	r2, [r2, #0]
 8006bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	1c9a      	adds	r2, r3, #2
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	621a      	str	r2, [r3, #32]
 8006bdc:	e008      	b.n	8006bf0 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	1c58      	adds	r0, r3, #1
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	6208      	str	r0, [r1, #32]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10f      	bne.n	8006c24 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	68d2      	ldr	r2, [r2, #12]
 8006c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	68d2      	ldr	r2, [r2, #12]
 8006c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e000      	b.n	8006c2a <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	68d2      	ldr	r2, [r2, #12]
 8006c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff febf 	bl	80069d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b22      	cmp	r3, #34	; 0x22
 8006c76:	f040 8099 	bne.w	8006dac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	d117      	bne.n	8006cb4 <UART_Receive_IT+0x50>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d113      	bne.n	8006cb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb2:	e026      	b.n	8006d02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d007      	beq.n	8006cd8 <UART_Receive_IT+0x74>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <UART_Receive_IT+0x82>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d148      	bne.n	8006da8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	68d2      	ldr	r2, [r2, #12]
 8006d20:	f022 0220 	bic.w	r2, r2, #32
 8006d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	68d2      	ldr	r2, [r2, #12]
 8006d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	6952      	ldr	r2, [r2, #20]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d123      	bne.n	8006d9e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	68d2      	ldr	r2, [r2, #12]
 8006d66:	f022 0210 	bic.w	r2, r2, #16
 8006d6a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d10a      	bne.n	8006d90 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fe30 	bl	80069fc <HAL_UARTEx_RxEventCallback>
 8006d9c:	e002      	b.n	8006da4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa fa16 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e002      	b.n	8006dae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	6912      	ldr	r2, [r2, #16]
 8006dca:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68d2      	ldr	r2, [r2, #12]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006df6:	f023 030c 	bic.w	r3, r3, #12
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	6952      	ldr	r2, [r2, #20]
 8006e0a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6992      	ldr	r2, [r2, #24]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <UART_SetConfig+0x114>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7ff faee 	bl	8006400 <HAL_RCC_GetPCLK2Freq>
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7ff fad6 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6819      	ldr	r1, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009a      	lsls	r2, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	0118      	lsls	r0, r3, #4
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009a      	lsls	r2, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e68:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e6a:	fba3 4302 	umull	r4, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2464      	movs	r4, #100	; 0x64
 8006e72:	fb04 f303 	mul.w	r3, r4, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	3332      	adds	r3, #50	; 0x32
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e88:	4418      	add	r0, r3
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009a      	lsls	r2, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <UART_SetConfig+0x118>)
 8006ea2:	fba3 4302 	umull	r4, r3, r3, r2
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	2464      	movs	r4, #100	; 0x64
 8006eaa:	fb04 f303 	mul.w	r3, r4, r3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	3332      	adds	r3, #50	; 0x32
 8006eb4:	4a06      	ldr	r2, [pc, #24]	; (8006ed0 <UART_SetConfig+0x118>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	4403      	add	r3, r0
 8006ec2:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd90      	pop	{r4, r7, pc}
 8006ecc:	40013800 	.word	0x40013800
 8006ed0:	51eb851f 	.word	0x51eb851f

08006ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ed4:	480c      	ldr	r0, [pc, #48]	; (8006f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006ed6:	490d      	ldr	r1, [pc, #52]	; (8006f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ed8:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006edc:	e002      	b.n	8006ee4 <LoopCopyDataInit>

08006ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ee2:	3304      	adds	r3, #4

08006ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ee8:	d3f9      	bcc.n	8006ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eea:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006eec:	4c0a      	ldr	r4, [pc, #40]	; (8006f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ef0:	e001      	b.n	8006ef6 <LoopFillZerobss>

08006ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ef4:	3204      	adds	r2, #4

08006ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ef8:	d3fb      	bcc.n	8006ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006efa:	f7fa ff03 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006efe:	f000 f815 	bl	8006f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f02:	f7fa f8c5 	bl	8001090 <main>
  bx lr
 8006f06:	4770      	bx	lr
  ldr r0, =_sdata
 8006f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8006f10:	08009570 	.word	0x08009570
  ldr r2, =_sbss
 8006f14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8006f18:	200007d4 	.word	0x200007d4

08006f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f1c:	e7fe      	b.n	8006f1c <ADC1_2_IRQHandler>
	...

08006f20 <__errno>:
 8006f20:	4b01      	ldr	r3, [pc, #4]	; (8006f28 <__errno+0x8>)
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	2000000c 	.word	0x2000000c

08006f2c <__libc_init_array>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	2500      	movs	r5, #0
 8006f30:	4e0c      	ldr	r6, [pc, #48]	; (8006f64 <__libc_init_array+0x38>)
 8006f32:	4c0d      	ldr	r4, [pc, #52]	; (8006f68 <__libc_init_array+0x3c>)
 8006f34:	1ba4      	subs	r4, r4, r6
 8006f36:	10a4      	asrs	r4, r4, #2
 8006f38:	42a5      	cmp	r5, r4
 8006f3a:	d109      	bne.n	8006f50 <__libc_init_array+0x24>
 8006f3c:	f002 f924 	bl	8009188 <_init>
 8006f40:	2500      	movs	r5, #0
 8006f42:	4e0a      	ldr	r6, [pc, #40]	; (8006f6c <__libc_init_array+0x40>)
 8006f44:	4c0a      	ldr	r4, [pc, #40]	; (8006f70 <__libc_init_array+0x44>)
 8006f46:	1ba4      	subs	r4, r4, r6
 8006f48:	10a4      	asrs	r4, r4, #2
 8006f4a:	42a5      	cmp	r5, r4
 8006f4c:	d105      	bne.n	8006f5a <__libc_init_array+0x2e>
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f54:	4798      	blx	r3
 8006f56:	3501      	adds	r5, #1
 8006f58:	e7ee      	b.n	8006f38 <__libc_init_array+0xc>
 8006f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f5e:	4798      	blx	r3
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7f2      	b.n	8006f4a <__libc_init_array+0x1e>
 8006f64:	08009568 	.word	0x08009568
 8006f68:	08009568 	.word	0x08009568
 8006f6c:	08009568 	.word	0x08009568
 8006f70:	0800956c 	.word	0x0800956c

08006f74 <memcpy>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	1e43      	subs	r3, r0, #1
 8006f78:	440a      	add	r2, r1
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	d100      	bne.n	8006f80 <memcpy+0xc>
 8006f7e:	bd10      	pop	{r4, pc}
 8006f80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f88:	e7f7      	b.n	8006f7a <memcpy+0x6>

08006f8a <memset>:
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d100      	bne.n	8006f94 <memset+0xa>
 8006f92:	4770      	bx	lr
 8006f94:	f803 1b01 	strb.w	r1, [r3], #1
 8006f98:	e7f9      	b.n	8006f8e <memset+0x4>

08006f9a <__cvt>:
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	461e      	mov	r6, r3
 8006fa2:	bfbb      	ittet	lt
 8006fa4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006fa8:	461e      	movlt	r6, r3
 8006faa:	2300      	movge	r3, #0
 8006fac:	232d      	movlt	r3, #45	; 0x2d
 8006fae:	b088      	sub	sp, #32
 8006fb0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fb4:	f027 0720 	bic.w	r7, r7, #32
 8006fb8:	2f46      	cmp	r7, #70	; 0x46
 8006fba:	4614      	mov	r4, r2
 8006fbc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006fbe:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006fc2:	700b      	strb	r3, [r1, #0]
 8006fc4:	d004      	beq.n	8006fd0 <__cvt+0x36>
 8006fc6:	2f45      	cmp	r7, #69	; 0x45
 8006fc8:	d100      	bne.n	8006fcc <__cvt+0x32>
 8006fca:	3501      	adds	r5, #1
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e000      	b.n	8006fd2 <__cvt+0x38>
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	aa07      	add	r2, sp, #28
 8006fd4:	9204      	str	r2, [sp, #16]
 8006fd6:	aa06      	add	r2, sp, #24
 8006fd8:	9203      	str	r2, [sp, #12]
 8006fda:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4633      	mov	r3, r6
 8006fe2:	f000 fd81 	bl	8007ae8 <_dtoa_r>
 8006fe6:	2f47      	cmp	r7, #71	; 0x47
 8006fe8:	4680      	mov	r8, r0
 8006fea:	d102      	bne.n	8006ff2 <__cvt+0x58>
 8006fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fee:	07db      	lsls	r3, r3, #31
 8006ff0:	d526      	bpl.n	8007040 <__cvt+0xa6>
 8006ff2:	2f46      	cmp	r7, #70	; 0x46
 8006ff4:	eb08 0905 	add.w	r9, r8, r5
 8006ff8:	d111      	bne.n	800701e <__cvt+0x84>
 8006ffa:	f898 3000 	ldrb.w	r3, [r8]
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	d10a      	bne.n	8007018 <__cvt+0x7e>
 8007002:	2200      	movs	r2, #0
 8007004:	2300      	movs	r3, #0
 8007006:	4620      	mov	r0, r4
 8007008:	4631      	mov	r1, r6
 800700a:	f7f9 fcc9 	bl	80009a0 <__aeabi_dcmpeq>
 800700e:	b918      	cbnz	r0, 8007018 <__cvt+0x7e>
 8007010:	f1c5 0501 	rsb	r5, r5, #1
 8007014:	f8ca 5000 	str.w	r5, [sl]
 8007018:	f8da 3000 	ldr.w	r3, [sl]
 800701c:	4499      	add	r9, r3
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	4620      	mov	r0, r4
 8007024:	4631      	mov	r1, r6
 8007026:	f7f9 fcbb 	bl	80009a0 <__aeabi_dcmpeq>
 800702a:	b938      	cbnz	r0, 800703c <__cvt+0xa2>
 800702c:	2230      	movs	r2, #48	; 0x30
 800702e:	9b07      	ldr	r3, [sp, #28]
 8007030:	4599      	cmp	r9, r3
 8007032:	d905      	bls.n	8007040 <__cvt+0xa6>
 8007034:	1c59      	adds	r1, r3, #1
 8007036:	9107      	str	r1, [sp, #28]
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e7f8      	b.n	800702e <__cvt+0x94>
 800703c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007040:	4640      	mov	r0, r8
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007046:	eba3 0308 	sub.w	r3, r3, r8
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	b008      	add	sp, #32
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007052 <__exponent>:
 8007052:	4603      	mov	r3, r0
 8007054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007056:	2900      	cmp	r1, #0
 8007058:	f803 2b02 	strb.w	r2, [r3], #2
 800705c:	bfb6      	itet	lt
 800705e:	222d      	movlt	r2, #45	; 0x2d
 8007060:	222b      	movge	r2, #43	; 0x2b
 8007062:	4249      	neglt	r1, r1
 8007064:	2909      	cmp	r1, #9
 8007066:	7042      	strb	r2, [r0, #1]
 8007068:	dd21      	ble.n	80070ae <__exponent+0x5c>
 800706a:	f10d 0207 	add.w	r2, sp, #7
 800706e:	4617      	mov	r7, r2
 8007070:	260a      	movs	r6, #10
 8007072:	fb91 f5f6 	sdiv	r5, r1, r6
 8007076:	fb06 1115 	mls	r1, r6, r5, r1
 800707a:	2d09      	cmp	r5, #9
 800707c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007080:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007084:	f102 34ff 	add.w	r4, r2, #4294967295
 8007088:	4629      	mov	r1, r5
 800708a:	dc09      	bgt.n	80070a0 <__exponent+0x4e>
 800708c:	3130      	adds	r1, #48	; 0x30
 800708e:	3a02      	subs	r2, #2
 8007090:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007094:	42ba      	cmp	r2, r7
 8007096:	461c      	mov	r4, r3
 8007098:	d304      	bcc.n	80070a4 <__exponent+0x52>
 800709a:	1a20      	subs	r0, r4, r0
 800709c:	b003      	add	sp, #12
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a0:	4622      	mov	r2, r4
 80070a2:	e7e6      	b.n	8007072 <__exponent+0x20>
 80070a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80070a8:	f803 1b01 	strb.w	r1, [r3], #1
 80070ac:	e7f2      	b.n	8007094 <__exponent+0x42>
 80070ae:	2230      	movs	r2, #48	; 0x30
 80070b0:	461c      	mov	r4, r3
 80070b2:	4411      	add	r1, r2
 80070b4:	f804 2b02 	strb.w	r2, [r4], #2
 80070b8:	7059      	strb	r1, [r3, #1]
 80070ba:	e7ee      	b.n	800709a <__exponent+0x48>

080070bc <_printf_float>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b091      	sub	sp, #68	; 0x44
 80070c2:	460c      	mov	r4, r1
 80070c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80070c6:	4693      	mov	fp, r2
 80070c8:	461e      	mov	r6, r3
 80070ca:	4605      	mov	r5, r0
 80070cc:	f001 fae4 	bl	8008698 <_localeconv_r>
 80070d0:	6803      	ldr	r3, [r0, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	f7f9 f83b 	bl	8000150 <strlen>
 80070da:	2300      	movs	r3, #0
 80070dc:	930e      	str	r3, [sp, #56]	; 0x38
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	900a      	str	r0, [sp, #40]	; 0x28
 80070e2:	3307      	adds	r3, #7
 80070e4:	f023 0307 	bic.w	r3, r3, #7
 80070e8:	f103 0208 	add.w	r2, r3, #8
 80070ec:	f894 8018 	ldrb.w	r8, [r4, #24]
 80070f0:	f8d4 a000 	ldr.w	sl, [r4]
 80070f4:	603a      	str	r2, [r7, #0]
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070fe:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8007102:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8007104:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007108:	930b      	str	r3, [sp, #44]	; 0x2c
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	4ba6      	ldr	r3, [pc, #664]	; (80073a8 <_printf_float+0x2ec>)
 8007110:	4638      	mov	r0, r7
 8007112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007114:	f7f9 fc76 	bl	8000a04 <__aeabi_dcmpun>
 8007118:	2800      	cmp	r0, #0
 800711a:	f040 81f7 	bne.w	800750c <_printf_float+0x450>
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	4ba1      	ldr	r3, [pc, #644]	; (80073a8 <_printf_float+0x2ec>)
 8007124:	4638      	mov	r0, r7
 8007126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007128:	f7f9 fc4e 	bl	80009c8 <__aeabi_dcmple>
 800712c:	2800      	cmp	r0, #0
 800712e:	f040 81ed 	bne.w	800750c <_printf_float+0x450>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4638      	mov	r0, r7
 8007138:	4649      	mov	r1, r9
 800713a:	f7f9 fc3b 	bl	80009b4 <__aeabi_dcmplt>
 800713e:	b110      	cbz	r0, 8007146 <_printf_float+0x8a>
 8007140:	232d      	movs	r3, #45	; 0x2d
 8007142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007146:	4b99      	ldr	r3, [pc, #612]	; (80073ac <_printf_float+0x2f0>)
 8007148:	4f99      	ldr	r7, [pc, #612]	; (80073b0 <_printf_float+0x2f4>)
 800714a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800714e:	bf98      	it	ls
 8007150:	461f      	movls	r7, r3
 8007152:	2303      	movs	r3, #3
 8007154:	f04f 0900 	mov.w	r9, #0
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	f02a 0304 	bic.w	r3, sl, #4
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	9600      	str	r6, [sp, #0]
 8007162:	465b      	mov	r3, fp
 8007164:	aa0f      	add	r2, sp, #60	; 0x3c
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 f9df 	bl	800752c <_printf_common>
 800716e:	3001      	adds	r0, #1
 8007170:	f040 809a 	bne.w	80072a8 <_printf_float+0x1ec>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	b011      	add	sp, #68	; 0x44
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	6862      	ldr	r2, [r4, #4]
 8007180:	a80e      	add	r0, sp, #56	; 0x38
 8007182:	1c53      	adds	r3, r2, #1
 8007184:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8007188:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 800718c:	d141      	bne.n	8007212 <_printf_float+0x156>
 800718e:	2206      	movs	r2, #6
 8007190:	6062      	str	r2, [r4, #4]
 8007192:	2100      	movs	r1, #0
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800719e:	9005      	str	r0, [sp, #20]
 80071a0:	9202      	str	r2, [sp, #8]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	463a      	mov	r2, r7
 80071a6:	464b      	mov	r3, r9
 80071a8:	9106      	str	r1, [sp, #24]
 80071aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80071ae:	f8cd e00c 	str.w	lr, [sp, #12]
 80071b2:	4628      	mov	r0, r5
 80071b4:	f7ff fef1 	bl	8006f9a <__cvt>
 80071b8:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80071bc:	2b47      	cmp	r3, #71	; 0x47
 80071be:	4607      	mov	r7, r0
 80071c0:	d109      	bne.n	80071d6 <_printf_float+0x11a>
 80071c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c4:	1cd8      	adds	r0, r3, #3
 80071c6:	db02      	blt.n	80071ce <_printf_float+0x112>
 80071c8:	6862      	ldr	r2, [r4, #4]
 80071ca:	4293      	cmp	r3, r2
 80071cc:	dd59      	ble.n	8007282 <_printf_float+0x1c6>
 80071ce:	f1a8 0802 	sub.w	r8, r8, #2
 80071d2:	fa5f f888 	uxtb.w	r8, r8
 80071d6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80071da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071dc:	d836      	bhi.n	800724c <_printf_float+0x190>
 80071de:	3901      	subs	r1, #1
 80071e0:	4642      	mov	r2, r8
 80071e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071e6:	910d      	str	r1, [sp, #52]	; 0x34
 80071e8:	f7ff ff33 	bl	8007052 <__exponent>
 80071ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ee:	4681      	mov	r9, r0
 80071f0:	1883      	adds	r3, r0, r2
 80071f2:	2a01      	cmp	r2, #1
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	dc02      	bgt.n	80071fe <_printf_float+0x142>
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	07d1      	lsls	r1, r2, #31
 80071fc:	d501      	bpl.n	8007202 <_printf_float+0x146>
 80071fe:	3301      	adds	r3, #1
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0aa      	beq.n	8007160 <_printf_float+0xa4>
 800720a:	232d      	movs	r3, #45	; 0x2d
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007210:	e7a6      	b.n	8007160 <_printf_float+0xa4>
 8007212:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007216:	d002      	beq.n	800721e <_printf_float+0x162>
 8007218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800721c:	d1b9      	bne.n	8007192 <_printf_float+0xd6>
 800721e:	b19a      	cbz	r2, 8007248 <_printf_float+0x18c>
 8007220:	2100      	movs	r1, #0
 8007222:	9106      	str	r1, [sp, #24]
 8007224:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007228:	e88d 000c 	stmia.w	sp, {r2, r3}
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	9005      	str	r0, [sp, #20]
 8007230:	463a      	mov	r2, r7
 8007232:	f8cd 8010 	str.w	r8, [sp, #16]
 8007236:	f8cd e00c 	str.w	lr, [sp, #12]
 800723a:	9102      	str	r1, [sp, #8]
 800723c:	464b      	mov	r3, r9
 800723e:	4628      	mov	r0, r5
 8007240:	f7ff feab 	bl	8006f9a <__cvt>
 8007244:	4607      	mov	r7, r0
 8007246:	e7bc      	b.n	80071c2 <_printf_float+0x106>
 8007248:	2201      	movs	r2, #1
 800724a:	e7a1      	b.n	8007190 <_printf_float+0xd4>
 800724c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007250:	d119      	bne.n	8007286 <_printf_float+0x1ca>
 8007252:	2900      	cmp	r1, #0
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	dd0c      	ble.n	8007272 <_printf_float+0x1b6>
 8007258:	6121      	str	r1, [r4, #16]
 800725a:	b913      	cbnz	r3, 8007262 <_printf_float+0x1a6>
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	07d2      	lsls	r2, r2, #31
 8007260:	d502      	bpl.n	8007268 <_printf_float+0x1ac>
 8007262:	3301      	adds	r3, #1
 8007264:	440b      	add	r3, r1
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007270:	e7c7      	b.n	8007202 <_printf_float+0x146>
 8007272:	b913      	cbnz	r3, 800727a <_printf_float+0x1be>
 8007274:	6822      	ldr	r2, [r4, #0]
 8007276:	07d0      	lsls	r0, r2, #31
 8007278:	d501      	bpl.n	800727e <_printf_float+0x1c2>
 800727a:	3302      	adds	r3, #2
 800727c:	e7f3      	b.n	8007266 <_printf_float+0x1aa>
 800727e:	2301      	movs	r3, #1
 8007280:	e7f1      	b.n	8007266 <_printf_float+0x1aa>
 8007282:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800728a:	4293      	cmp	r3, r2
 800728c:	db05      	blt.n	800729a <_printf_float+0x1de>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	07d1      	lsls	r1, r2, #31
 8007294:	d5e8      	bpl.n	8007268 <_printf_float+0x1ac>
 8007296:	3301      	adds	r3, #1
 8007298:	e7e5      	b.n	8007266 <_printf_float+0x1aa>
 800729a:	2b00      	cmp	r3, #0
 800729c:	bfcc      	ite	gt
 800729e:	2301      	movgt	r3, #1
 80072a0:	f1c3 0302 	rsble	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	e7de      	b.n	8007266 <_printf_float+0x1aa>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	055a      	lsls	r2, r3, #21
 80072ac:	d407      	bmi.n	80072be <_printf_float+0x202>
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	463a      	mov	r2, r7
 80072b2:	4659      	mov	r1, fp
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b0      	blx	r6
 80072b8:	3001      	adds	r0, #1
 80072ba:	d12a      	bne.n	8007312 <_printf_float+0x256>
 80072bc:	e75a      	b.n	8007174 <_printf_float+0xb8>
 80072be:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80072c2:	f240 80dc 	bls.w	800747e <_printf_float+0x3c2>
 80072c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	f7f9 fb67 	bl	80009a0 <__aeabi_dcmpeq>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d039      	beq.n	800734a <_printf_float+0x28e>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4a36      	ldr	r2, [pc, #216]	; (80073b4 <_printf_float+0x2f8>)
 80072da:	4659      	mov	r1, fp
 80072dc:	4628      	mov	r0, r5
 80072de:	47b0      	blx	r6
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f af47 	beq.w	8007174 <_printf_float+0xb8>
 80072e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ea:	429a      	cmp	r2, r3
 80072ec:	db02      	blt.n	80072f4 <_printf_float+0x238>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	07d8      	lsls	r0, r3, #31
 80072f2:	d50e      	bpl.n	8007312 <_printf_float+0x256>
 80072f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f8:	4659      	mov	r1, fp
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b0      	blx	r6
 80072fe:	3001      	adds	r0, #1
 8007300:	f43f af38 	beq.w	8007174 <_printf_float+0xb8>
 8007304:	2700      	movs	r7, #0
 8007306:	f104 081a 	add.w	r8, r4, #26
 800730a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800730c:	3b01      	subs	r3, #1
 800730e:	429f      	cmp	r7, r3
 8007310:	db11      	blt.n	8007336 <_printf_float+0x27a>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	079f      	lsls	r7, r3, #30
 8007316:	d508      	bpl.n	800732a <_printf_float+0x26e>
 8007318:	2700      	movs	r7, #0
 800731a:	f104 0819 	add.w	r8, r4, #25
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	429f      	cmp	r7, r3
 8007326:	f2c0 80e7 	blt.w	80074f8 <_printf_float+0x43c>
 800732a:	68e0      	ldr	r0, [r4, #12]
 800732c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800732e:	4298      	cmp	r0, r3
 8007330:	bfb8      	it	lt
 8007332:	4618      	movlt	r0, r3
 8007334:	e720      	b.n	8007178 <_printf_float+0xbc>
 8007336:	2301      	movs	r3, #1
 8007338:	4642      	mov	r2, r8
 800733a:	4659      	mov	r1, fp
 800733c:	4628      	mov	r0, r5
 800733e:	47b0      	blx	r6
 8007340:	3001      	adds	r0, #1
 8007342:	f43f af17 	beq.w	8007174 <_printf_float+0xb8>
 8007346:	3701      	adds	r7, #1
 8007348:	e7df      	b.n	800730a <_printf_float+0x24e>
 800734a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc33      	bgt.n	80073b8 <_printf_float+0x2fc>
 8007350:	2301      	movs	r3, #1
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <_printf_float+0x2f8>)
 8007354:	4659      	mov	r1, fp
 8007356:	4628      	mov	r0, r5
 8007358:	47b0      	blx	r6
 800735a:	3001      	adds	r0, #1
 800735c:	f43f af0a 	beq.w	8007174 <_printf_float+0xb8>
 8007360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007362:	b923      	cbnz	r3, 800736e <_printf_float+0x2b2>
 8007364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007366:	b913      	cbnz	r3, 800736e <_printf_float+0x2b2>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	d5d1      	bpl.n	8007312 <_printf_float+0x256>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007372:	4659      	mov	r1, fp
 8007374:	4628      	mov	r0, r5
 8007376:	47b0      	blx	r6
 8007378:	3001      	adds	r0, #1
 800737a:	f43f aefb 	beq.w	8007174 <_printf_float+0xb8>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	f104 091a 	add.w	r9, r4, #26
 8007386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007388:	425b      	negs	r3, r3
 800738a:	4598      	cmp	r8, r3
 800738c:	db01      	blt.n	8007392 <_printf_float+0x2d6>
 800738e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007390:	e78e      	b.n	80072b0 <_printf_float+0x1f4>
 8007392:	2301      	movs	r3, #1
 8007394:	464a      	mov	r2, r9
 8007396:	4659      	mov	r1, fp
 8007398:	4628      	mov	r0, r5
 800739a:	47b0      	blx	r6
 800739c:	3001      	adds	r0, #1
 800739e:	f43f aee9 	beq.w	8007174 <_printf_float+0xb8>
 80073a2:	f108 0801 	add.w	r8, r8, #1
 80073a6:	e7ee      	b.n	8007386 <_printf_float+0x2ca>
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	0800930c 	.word	0x0800930c
 80073b0:	08009310 	.word	0x08009310
 80073b4:	0800931c 	.word	0x0800931c
 80073b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073bc:	429a      	cmp	r2, r3
 80073be:	bfa8      	it	ge
 80073c0:	461a      	movge	r2, r3
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	4690      	mov	r8, r2
 80073c6:	dc36      	bgt.n	8007436 <_printf_float+0x37a>
 80073c8:	f04f 0a00 	mov.w	sl, #0
 80073cc:	f104 031a 	add.w	r3, r4, #26
 80073d0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80073d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80073da:	eba9 0308 	sub.w	r3, r9, r8
 80073de:	459a      	cmp	sl, r3
 80073e0:	db31      	blt.n	8007446 <_printf_float+0x38a>
 80073e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073e6:	429a      	cmp	r2, r3
 80073e8:	db38      	blt.n	800745c <_printf_float+0x3a0>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	07da      	lsls	r2, r3, #31
 80073ee:	d435      	bmi.n	800745c <_printf_float+0x3a0>
 80073f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073f4:	eba3 0209 	sub.w	r2, r3, r9
 80073f8:	eba3 0801 	sub.w	r8, r3, r1
 80073fc:	4590      	cmp	r8, r2
 80073fe:	bfa8      	it	ge
 8007400:	4690      	movge	r8, r2
 8007402:	f1b8 0f00 	cmp.w	r8, #0
 8007406:	dc31      	bgt.n	800746c <_printf_float+0x3b0>
 8007408:	2700      	movs	r7, #0
 800740a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800740e:	f104 091a 	add.w	r9, r4, #26
 8007412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	eba3 0308 	sub.w	r3, r3, r8
 800741c:	429f      	cmp	r7, r3
 800741e:	f6bf af78 	bge.w	8007312 <_printf_float+0x256>
 8007422:	2301      	movs	r3, #1
 8007424:	464a      	mov	r2, r9
 8007426:	4659      	mov	r1, fp
 8007428:	4628      	mov	r0, r5
 800742a:	47b0      	blx	r6
 800742c:	3001      	adds	r0, #1
 800742e:	f43f aea1 	beq.w	8007174 <_printf_float+0xb8>
 8007432:	3701      	adds	r7, #1
 8007434:	e7ed      	b.n	8007412 <_printf_float+0x356>
 8007436:	4613      	mov	r3, r2
 8007438:	4659      	mov	r1, fp
 800743a:	463a      	mov	r2, r7
 800743c:	4628      	mov	r0, r5
 800743e:	47b0      	blx	r6
 8007440:	3001      	adds	r0, #1
 8007442:	d1c1      	bne.n	80073c8 <_printf_float+0x30c>
 8007444:	e696      	b.n	8007174 <_printf_float+0xb8>
 8007446:	2301      	movs	r3, #1
 8007448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800744a:	4659      	mov	r1, fp
 800744c:	4628      	mov	r0, r5
 800744e:	47b0      	blx	r6
 8007450:	3001      	adds	r0, #1
 8007452:	f43f ae8f 	beq.w	8007174 <_printf_float+0xb8>
 8007456:	f10a 0a01 	add.w	sl, sl, #1
 800745a:	e7bc      	b.n	80073d6 <_printf_float+0x31a>
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007460:	4659      	mov	r1, fp
 8007462:	4628      	mov	r0, r5
 8007464:	47b0      	blx	r6
 8007466:	3001      	adds	r0, #1
 8007468:	d1c2      	bne.n	80073f0 <_printf_float+0x334>
 800746a:	e683      	b.n	8007174 <_printf_float+0xb8>
 800746c:	4643      	mov	r3, r8
 800746e:	eb07 0209 	add.w	r2, r7, r9
 8007472:	4659      	mov	r1, fp
 8007474:	4628      	mov	r0, r5
 8007476:	47b0      	blx	r6
 8007478:	3001      	adds	r0, #1
 800747a:	d1c5      	bne.n	8007408 <_printf_float+0x34c>
 800747c:	e67a      	b.n	8007174 <_printf_float+0xb8>
 800747e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007480:	2a01      	cmp	r2, #1
 8007482:	dc01      	bgt.n	8007488 <_printf_float+0x3cc>
 8007484:	07db      	lsls	r3, r3, #31
 8007486:	d534      	bpl.n	80074f2 <_printf_float+0x436>
 8007488:	2301      	movs	r3, #1
 800748a:	463a      	mov	r2, r7
 800748c:	4659      	mov	r1, fp
 800748e:	4628      	mov	r0, r5
 8007490:	47b0      	blx	r6
 8007492:	3001      	adds	r0, #1
 8007494:	f43f ae6e 	beq.w	8007174 <_printf_float+0xb8>
 8007498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800749c:	4659      	mov	r1, fp
 800749e:	4628      	mov	r0, r5
 80074a0:	47b0      	blx	r6
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f ae66 	beq.w	8007174 <_printf_float+0xb8>
 80074a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074ac:	2200      	movs	r2, #0
 80074ae:	2300      	movs	r3, #0
 80074b0:	f7f9 fa76 	bl	80009a0 <__aeabi_dcmpeq>
 80074b4:	b150      	cbz	r0, 80074cc <_printf_float+0x410>
 80074b6:	2700      	movs	r7, #0
 80074b8:	f104 081a 	add.w	r8, r4, #26
 80074bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074be:	3b01      	subs	r3, #1
 80074c0:	429f      	cmp	r7, r3
 80074c2:	db0c      	blt.n	80074de <_printf_float+0x422>
 80074c4:	464b      	mov	r3, r9
 80074c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074ca:	e6f2      	b.n	80072b2 <_printf_float+0x1f6>
 80074cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ce:	1c7a      	adds	r2, r7, #1
 80074d0:	3b01      	subs	r3, #1
 80074d2:	4659      	mov	r1, fp
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	3001      	adds	r0, #1
 80074da:	d1f3      	bne.n	80074c4 <_printf_float+0x408>
 80074dc:	e64a      	b.n	8007174 <_printf_float+0xb8>
 80074de:	2301      	movs	r3, #1
 80074e0:	4642      	mov	r2, r8
 80074e2:	4659      	mov	r1, fp
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b0      	blx	r6
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae43 	beq.w	8007174 <_printf_float+0xb8>
 80074ee:	3701      	adds	r7, #1
 80074f0:	e7e4      	b.n	80074bc <_printf_float+0x400>
 80074f2:	2301      	movs	r3, #1
 80074f4:	463a      	mov	r2, r7
 80074f6:	e7ec      	b.n	80074d2 <_printf_float+0x416>
 80074f8:	2301      	movs	r3, #1
 80074fa:	4642      	mov	r2, r8
 80074fc:	4659      	mov	r1, fp
 80074fe:	4628      	mov	r0, r5
 8007500:	47b0      	blx	r6
 8007502:	3001      	adds	r0, #1
 8007504:	f43f ae36 	beq.w	8007174 <_printf_float+0xb8>
 8007508:	3701      	adds	r7, #1
 800750a:	e708      	b.n	800731e <_printf_float+0x262>
 800750c:	463a      	mov	r2, r7
 800750e:	464b      	mov	r3, r9
 8007510:	4638      	mov	r0, r7
 8007512:	4649      	mov	r1, r9
 8007514:	f7f9 fa76 	bl	8000a04 <__aeabi_dcmpun>
 8007518:	2800      	cmp	r0, #0
 800751a:	f43f ae30 	beq.w	800717e <_printf_float+0xc2>
 800751e:	4b01      	ldr	r3, [pc, #4]	; (8007524 <_printf_float+0x468>)
 8007520:	4f01      	ldr	r7, [pc, #4]	; (8007528 <_printf_float+0x46c>)
 8007522:	e612      	b.n	800714a <_printf_float+0x8e>
 8007524:	08009314 	.word	0x08009314
 8007528:	08009318 	.word	0x08009318

0800752c <_printf_common>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	4691      	mov	r9, r2
 8007532:	461f      	mov	r7, r3
 8007534:	688a      	ldr	r2, [r1, #8]
 8007536:	690b      	ldr	r3, [r1, #16]
 8007538:	4606      	mov	r6, r0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfb8      	it	lt
 800753e:	4613      	movlt	r3, r2
 8007540:	f8c9 3000 	str.w	r3, [r9]
 8007544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007548:	460c      	mov	r4, r1
 800754a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754e:	b112      	cbz	r2, 8007556 <_printf_common+0x2a>
 8007550:	3301      	adds	r3, #1
 8007552:	f8c9 3000 	str.w	r3, [r9]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007560:	3302      	addmi	r3, #2
 8007562:	f8c9 3000 	strmi.w	r3, [r9]
 8007566:	6825      	ldr	r5, [r4, #0]
 8007568:	f015 0506 	ands.w	r5, r5, #6
 800756c:	d107      	bne.n	800757e <_printf_common+0x52>
 800756e:	f104 0a19 	add.w	sl, r4, #25
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	f8d9 2000 	ldr.w	r2, [r9]
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	429d      	cmp	r5, r3
 800757c:	db2a      	blt.n	80075d4 <_printf_common+0xa8>
 800757e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	3300      	adds	r3, #0
 8007586:	bf18      	it	ne
 8007588:	2301      	movne	r3, #1
 800758a:	0692      	lsls	r2, r2, #26
 800758c:	d42f      	bmi.n	80075ee <_printf_common+0xc2>
 800758e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007592:	4639      	mov	r1, r7
 8007594:	4630      	mov	r0, r6
 8007596:	47c0      	blx	r8
 8007598:	3001      	adds	r0, #1
 800759a:	d022      	beq.n	80075e2 <_printf_common+0xb6>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	68e5      	ldr	r5, [r4, #12]
 80075a0:	f003 0306 	and.w	r3, r3, #6
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	bf18      	it	ne
 80075a8:	2500      	movne	r5, #0
 80075aa:	f8d9 2000 	ldr.w	r2, [r9]
 80075ae:	f04f 0900 	mov.w	r9, #0
 80075b2:	bf08      	it	eq
 80075b4:	1aad      	subeq	r5, r5, r2
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	bf08      	it	eq
 80075bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c0:	4293      	cmp	r3, r2
 80075c2:	bfc4      	itt	gt
 80075c4:	1a9b      	subgt	r3, r3, r2
 80075c6:	18ed      	addgt	r5, r5, r3
 80075c8:	341a      	adds	r4, #26
 80075ca:	454d      	cmp	r5, r9
 80075cc:	d11b      	bne.n	8007606 <_printf_common+0xda>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	2301      	movs	r3, #1
 80075d6:	4652      	mov	r2, sl
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	47c0      	blx	r8
 80075de:	3001      	adds	r0, #1
 80075e0:	d103      	bne.n	80075ea <_printf_common+0xbe>
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	3501      	adds	r5, #1
 80075ec:	e7c1      	b.n	8007572 <_printf_common+0x46>
 80075ee:	2030      	movs	r0, #48	; 0x30
 80075f0:	18e1      	adds	r1, r4, r3
 80075f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075fc:	4422      	add	r2, r4
 80075fe:	3302      	adds	r3, #2
 8007600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007604:	e7c3      	b.n	800758e <_printf_common+0x62>
 8007606:	2301      	movs	r3, #1
 8007608:	4622      	mov	r2, r4
 800760a:	4639      	mov	r1, r7
 800760c:	4630      	mov	r0, r6
 800760e:	47c0      	blx	r8
 8007610:	3001      	adds	r0, #1
 8007612:	d0e6      	beq.n	80075e2 <_printf_common+0xb6>
 8007614:	f109 0901 	add.w	r9, r9, #1
 8007618:	e7d7      	b.n	80075ca <_printf_common+0x9e>
	...

0800761c <_printf_i>:
 800761c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007620:	4617      	mov	r7, r2
 8007622:	7e0a      	ldrb	r2, [r1, #24]
 8007624:	b085      	sub	sp, #20
 8007626:	2a6e      	cmp	r2, #110	; 0x6e
 8007628:	4698      	mov	r8, r3
 800762a:	4606      	mov	r6, r0
 800762c:	460c      	mov	r4, r1
 800762e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007630:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007634:	f000 80bc 	beq.w	80077b0 <_printf_i+0x194>
 8007638:	d81a      	bhi.n	8007670 <_printf_i+0x54>
 800763a:	2a63      	cmp	r2, #99	; 0x63
 800763c:	d02e      	beq.n	800769c <_printf_i+0x80>
 800763e:	d80a      	bhi.n	8007656 <_printf_i+0x3a>
 8007640:	2a00      	cmp	r2, #0
 8007642:	f000 80c8 	beq.w	80077d6 <_printf_i+0x1ba>
 8007646:	2a58      	cmp	r2, #88	; 0x58
 8007648:	f000 808a 	beq.w	8007760 <_printf_i+0x144>
 800764c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007650:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007654:	e02a      	b.n	80076ac <_printf_i+0x90>
 8007656:	2a64      	cmp	r2, #100	; 0x64
 8007658:	d001      	beq.n	800765e <_printf_i+0x42>
 800765a:	2a69      	cmp	r2, #105	; 0x69
 800765c:	d1f6      	bne.n	800764c <_printf_i+0x30>
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007666:	d023      	beq.n	80076b0 <_printf_i+0x94>
 8007668:	1d11      	adds	r1, r2, #4
 800766a:	6019      	str	r1, [r3, #0]
 800766c:	6813      	ldr	r3, [r2, #0]
 800766e:	e027      	b.n	80076c0 <_printf_i+0xa4>
 8007670:	2a73      	cmp	r2, #115	; 0x73
 8007672:	f000 80b4 	beq.w	80077de <_printf_i+0x1c2>
 8007676:	d808      	bhi.n	800768a <_printf_i+0x6e>
 8007678:	2a6f      	cmp	r2, #111	; 0x6f
 800767a:	d02a      	beq.n	80076d2 <_printf_i+0xb6>
 800767c:	2a70      	cmp	r2, #112	; 0x70
 800767e:	d1e5      	bne.n	800764c <_printf_i+0x30>
 8007680:	680a      	ldr	r2, [r1, #0]
 8007682:	f042 0220 	orr.w	r2, r2, #32
 8007686:	600a      	str	r2, [r1, #0]
 8007688:	e003      	b.n	8007692 <_printf_i+0x76>
 800768a:	2a75      	cmp	r2, #117	; 0x75
 800768c:	d021      	beq.n	80076d2 <_printf_i+0xb6>
 800768e:	2a78      	cmp	r2, #120	; 0x78
 8007690:	d1dc      	bne.n	800764c <_printf_i+0x30>
 8007692:	2278      	movs	r2, #120	; 0x78
 8007694:	496f      	ldr	r1, [pc, #444]	; (8007854 <_printf_i+0x238>)
 8007696:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800769a:	e064      	b.n	8007766 <_printf_i+0x14a>
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80076a2:	1d11      	adds	r1, r2, #4
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	6813      	ldr	r3, [r2, #0]
 80076a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0a3      	b.n	80077f8 <_printf_i+0x1dc>
 80076b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80076b4:	f102 0104 	add.w	r1, r2, #4
 80076b8:	6019      	str	r1, [r3, #0]
 80076ba:	d0d7      	beq.n	800766c <_printf_i+0x50>
 80076bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da03      	bge.n	80076cc <_printf_i+0xb0>
 80076c4:	222d      	movs	r2, #45	; 0x2d
 80076c6:	425b      	negs	r3, r3
 80076c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80076cc:	4962      	ldr	r1, [pc, #392]	; (8007858 <_printf_i+0x23c>)
 80076ce:	220a      	movs	r2, #10
 80076d0:	e017      	b.n	8007702 <_printf_i+0xe6>
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80076da:	d003      	beq.n	80076e4 <_printf_i+0xc8>
 80076dc:	1d08      	adds	r0, r1, #4
 80076de:	6018      	str	r0, [r3, #0]
 80076e0:	680b      	ldr	r3, [r1, #0]
 80076e2:	e006      	b.n	80076f2 <_printf_i+0xd6>
 80076e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076e8:	f101 0004 	add.w	r0, r1, #4
 80076ec:	6018      	str	r0, [r3, #0]
 80076ee:	d0f7      	beq.n	80076e0 <_printf_i+0xc4>
 80076f0:	880b      	ldrh	r3, [r1, #0]
 80076f2:	2a6f      	cmp	r2, #111	; 0x6f
 80076f4:	bf14      	ite	ne
 80076f6:	220a      	movne	r2, #10
 80076f8:	2208      	moveq	r2, #8
 80076fa:	4957      	ldr	r1, [pc, #348]	; (8007858 <_printf_i+0x23c>)
 80076fc:	2000      	movs	r0, #0
 80076fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007702:	6865      	ldr	r5, [r4, #4]
 8007704:	2d00      	cmp	r5, #0
 8007706:	60a5      	str	r5, [r4, #8]
 8007708:	f2c0 809c 	blt.w	8007844 <_printf_i+0x228>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	f020 0004 	bic.w	r0, r0, #4
 8007712:	6020      	str	r0, [r4, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d13f      	bne.n	8007798 <_printf_i+0x17c>
 8007718:	2d00      	cmp	r5, #0
 800771a:	f040 8095 	bne.w	8007848 <_printf_i+0x22c>
 800771e:	4675      	mov	r5, lr
 8007720:	2a08      	cmp	r2, #8
 8007722:	d10b      	bne.n	800773c <_printf_i+0x120>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d508      	bpl.n	800773c <_printf_i+0x120>
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	429a      	cmp	r2, r3
 8007730:	bfde      	ittt	le
 8007732:	2330      	movle	r3, #48	; 0x30
 8007734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800773c:	ebae 0305 	sub.w	r3, lr, r5
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	f8cd 8000 	str.w	r8, [sp]
 8007746:	463b      	mov	r3, r7
 8007748:	aa03      	add	r2, sp, #12
 800774a:	4621      	mov	r1, r4
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff feed 	bl	800752c <_printf_common>
 8007752:	3001      	adds	r0, #1
 8007754:	d155      	bne.n	8007802 <_printf_i+0x1e6>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	b005      	add	sp, #20
 800775c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007760:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007764:	493c      	ldr	r1, [pc, #240]	; (8007858 <_printf_i+0x23c>)
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800776e:	f100 0504 	add.w	r5, r0, #4
 8007772:	601d      	str	r5, [r3, #0]
 8007774:	d001      	beq.n	800777a <_printf_i+0x15e>
 8007776:	6803      	ldr	r3, [r0, #0]
 8007778:	e002      	b.n	8007780 <_printf_i+0x164>
 800777a:	0655      	lsls	r5, r2, #25
 800777c:	d5fb      	bpl.n	8007776 <_printf_i+0x15a>
 800777e:	8803      	ldrh	r3, [r0, #0]
 8007780:	07d0      	lsls	r0, r2, #31
 8007782:	bf44      	itt	mi
 8007784:	f042 0220 	orrmi.w	r2, r2, #32
 8007788:	6022      	strmi	r2, [r4, #0]
 800778a:	b91b      	cbnz	r3, 8007794 <_printf_i+0x178>
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	f022 0220 	bic.w	r2, r2, #32
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	2210      	movs	r2, #16
 8007796:	e7b1      	b.n	80076fc <_printf_i+0xe0>
 8007798:	4675      	mov	r5, lr
 800779a:	fbb3 f0f2 	udiv	r0, r3, r2
 800779e:	fb02 3310 	mls	r3, r2, r0, r3
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077a8:	4603      	mov	r3, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1f5      	bne.n	800779a <_printf_i+0x17e>
 80077ae:	e7b7      	b.n	8007720 <_printf_i+0x104>
 80077b0:	6808      	ldr	r0, [r1, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80077b8:	6949      	ldr	r1, [r1, #20]
 80077ba:	d004      	beq.n	80077c6 <_printf_i+0x1aa>
 80077bc:	1d10      	adds	r0, r2, #4
 80077be:	6018      	str	r0, [r3, #0]
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	6019      	str	r1, [r3, #0]
 80077c4:	e007      	b.n	80077d6 <_printf_i+0x1ba>
 80077c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077ca:	f102 0004 	add.w	r0, r2, #4
 80077ce:	6018      	str	r0, [r3, #0]
 80077d0:	6813      	ldr	r3, [r2, #0]
 80077d2:	d0f6      	beq.n	80077c2 <_printf_i+0x1a6>
 80077d4:	8019      	strh	r1, [r3, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	4675      	mov	r5, lr
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	e7b1      	b.n	8007742 <_printf_i+0x126>
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	1d11      	adds	r1, r2, #4
 80077e2:	6019      	str	r1, [r3, #0]
 80077e4:	6815      	ldr	r5, [r2, #0]
 80077e6:	2100      	movs	r1, #0
 80077e8:	6862      	ldr	r2, [r4, #4]
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 ff7c 	bl	80086e8 <memchr>
 80077f0:	b108      	cbz	r0, 80077f6 <_printf_i+0x1da>
 80077f2:	1b40      	subs	r0, r0, r5
 80077f4:	6060      	str	r0, [r4, #4]
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	2300      	movs	r3, #0
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007800:	e79f      	b.n	8007742 <_printf_i+0x126>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	462a      	mov	r2, r5
 8007806:	4639      	mov	r1, r7
 8007808:	4630      	mov	r0, r6
 800780a:	47c0      	blx	r8
 800780c:	3001      	adds	r0, #1
 800780e:	d0a2      	beq.n	8007756 <_printf_i+0x13a>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	079b      	lsls	r3, r3, #30
 8007814:	d507      	bpl.n	8007826 <_printf_i+0x20a>
 8007816:	2500      	movs	r5, #0
 8007818:	f104 0919 	add.w	r9, r4, #25
 800781c:	68e3      	ldr	r3, [r4, #12]
 800781e:	9a03      	ldr	r2, [sp, #12]
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	429d      	cmp	r5, r3
 8007824:	db05      	blt.n	8007832 <_printf_i+0x216>
 8007826:	68e0      	ldr	r0, [r4, #12]
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	4298      	cmp	r0, r3
 800782c:	bfb8      	it	lt
 800782e:	4618      	movlt	r0, r3
 8007830:	e793      	b.n	800775a <_printf_i+0x13e>
 8007832:	2301      	movs	r3, #1
 8007834:	464a      	mov	r2, r9
 8007836:	4639      	mov	r1, r7
 8007838:	4630      	mov	r0, r6
 800783a:	47c0      	blx	r8
 800783c:	3001      	adds	r0, #1
 800783e:	d08a      	beq.n	8007756 <_printf_i+0x13a>
 8007840:	3501      	adds	r5, #1
 8007842:	e7eb      	b.n	800781c <_printf_i+0x200>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1a7      	bne.n	8007798 <_printf_i+0x17c>
 8007848:	780b      	ldrb	r3, [r1, #0]
 800784a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800784e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007852:	e765      	b.n	8007720 <_printf_i+0x104>
 8007854:	0800932f 	.word	0x0800932f
 8007858:	0800931e 	.word	0x0800931e

0800785c <siprintf>:
 800785c:	b40e      	push	{r1, r2, r3}
 800785e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007862:	b500      	push	{lr}
 8007864:	b09c      	sub	sp, #112	; 0x70
 8007866:	f8ad 1014 	strh.w	r1, [sp, #20]
 800786a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800786e:	9104      	str	r1, [sp, #16]
 8007870:	9107      	str	r1, [sp, #28]
 8007872:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007876:	ab1d      	add	r3, sp, #116	; 0x74
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <siprintf+0x44>)
 800787e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007882:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	a902      	add	r1, sp, #8
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	f001 fb20 	bl	8008ed0 <_svfiprintf_r>
 8007890:	2200      	movs	r2, #0
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	b01c      	add	sp, #112	; 0x70
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	b003      	add	sp, #12
 800789e:	4770      	bx	lr
 80078a0:	2000000c 	.word	0x2000000c

080078a4 <_strtoul_l.isra.0>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	4692      	mov	sl, r2
 80078ae:	461e      	mov	r6, r3
 80078b0:	460f      	mov	r7, r1
 80078b2:	463d      	mov	r5, r7
 80078b4:	9808      	ldr	r0, [sp, #32]
 80078b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ba:	f000 fee9 	bl	8008690 <__locale_ctype_ptr_l>
 80078be:	4420      	add	r0, r4
 80078c0:	7843      	ldrb	r3, [r0, #1]
 80078c2:	f013 0308 	ands.w	r3, r3, #8
 80078c6:	d10a      	bne.n	80078de <_strtoul_l.isra.0+0x3a>
 80078c8:	2c2d      	cmp	r4, #45	; 0x2d
 80078ca:	d10a      	bne.n	80078e2 <_strtoul_l.isra.0+0x3e>
 80078cc:	2301      	movs	r3, #1
 80078ce:	782c      	ldrb	r4, [r5, #0]
 80078d0:	1cbd      	adds	r5, r7, #2
 80078d2:	b15e      	cbz	r6, 80078ec <_strtoul_l.isra.0+0x48>
 80078d4:	2e10      	cmp	r6, #16
 80078d6:	d113      	bne.n	8007900 <_strtoul_l.isra.0+0x5c>
 80078d8:	2c30      	cmp	r4, #48	; 0x30
 80078da:	d009      	beq.n	80078f0 <_strtoul_l.isra.0+0x4c>
 80078dc:	e010      	b.n	8007900 <_strtoul_l.isra.0+0x5c>
 80078de:	462f      	mov	r7, r5
 80078e0:	e7e7      	b.n	80078b2 <_strtoul_l.isra.0+0xe>
 80078e2:	2c2b      	cmp	r4, #43	; 0x2b
 80078e4:	bf04      	itt	eq
 80078e6:	782c      	ldrbeq	r4, [r5, #0]
 80078e8:	1cbd      	addeq	r5, r7, #2
 80078ea:	e7f2      	b.n	80078d2 <_strtoul_l.isra.0+0x2e>
 80078ec:	2c30      	cmp	r4, #48	; 0x30
 80078ee:	d125      	bne.n	800793c <_strtoul_l.isra.0+0x98>
 80078f0:	782a      	ldrb	r2, [r5, #0]
 80078f2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078f6:	2a58      	cmp	r2, #88	; 0x58
 80078f8:	d14a      	bne.n	8007990 <_strtoul_l.isra.0+0xec>
 80078fa:	2610      	movs	r6, #16
 80078fc:	786c      	ldrb	r4, [r5, #1]
 80078fe:	3502      	adds	r5, #2
 8007900:	f04f 31ff 	mov.w	r1, #4294967295
 8007904:	fbb1 f1f6 	udiv	r1, r1, r6
 8007908:	2700      	movs	r7, #0
 800790a:	fb06 fe01 	mul.w	lr, r6, r1
 800790e:	4638      	mov	r0, r7
 8007910:	ea6f 0e0e 	mvn.w	lr, lr
 8007914:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8007918:	2a09      	cmp	r2, #9
 800791a:	d811      	bhi.n	8007940 <_strtoul_l.isra.0+0x9c>
 800791c:	4614      	mov	r4, r2
 800791e:	42a6      	cmp	r6, r4
 8007920:	dd1d      	ble.n	800795e <_strtoul_l.isra.0+0xba>
 8007922:	2f00      	cmp	r7, #0
 8007924:	db18      	blt.n	8007958 <_strtoul_l.isra.0+0xb4>
 8007926:	4281      	cmp	r1, r0
 8007928:	d316      	bcc.n	8007958 <_strtoul_l.isra.0+0xb4>
 800792a:	d101      	bne.n	8007930 <_strtoul_l.isra.0+0x8c>
 800792c:	45a6      	cmp	lr, r4
 800792e:	db13      	blt.n	8007958 <_strtoul_l.isra.0+0xb4>
 8007930:	2701      	movs	r7, #1
 8007932:	fb00 4006 	mla	r0, r0, r6, r4
 8007936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800793a:	e7eb      	b.n	8007914 <_strtoul_l.isra.0+0x70>
 800793c:	260a      	movs	r6, #10
 800793e:	e7df      	b.n	8007900 <_strtoul_l.isra.0+0x5c>
 8007940:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8007944:	2a19      	cmp	r2, #25
 8007946:	d801      	bhi.n	800794c <_strtoul_l.isra.0+0xa8>
 8007948:	3c37      	subs	r4, #55	; 0x37
 800794a:	e7e8      	b.n	800791e <_strtoul_l.isra.0+0x7a>
 800794c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8007950:	2a19      	cmp	r2, #25
 8007952:	d804      	bhi.n	800795e <_strtoul_l.isra.0+0xba>
 8007954:	3c57      	subs	r4, #87	; 0x57
 8007956:	e7e2      	b.n	800791e <_strtoul_l.isra.0+0x7a>
 8007958:	f04f 37ff 	mov.w	r7, #4294967295
 800795c:	e7eb      	b.n	8007936 <_strtoul_l.isra.0+0x92>
 800795e:	2f00      	cmp	r7, #0
 8007960:	da09      	bge.n	8007976 <_strtoul_l.isra.0+0xd2>
 8007962:	2322      	movs	r3, #34	; 0x22
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	f8c8 3000 	str.w	r3, [r8]
 800796c:	f1ba 0f00 	cmp.w	sl, #0
 8007970:	d107      	bne.n	8007982 <_strtoul_l.isra.0+0xde>
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	b103      	cbz	r3, 800797a <_strtoul_l.isra.0+0xd6>
 8007978:	4240      	negs	r0, r0
 800797a:	f1ba 0f00 	cmp.w	sl, #0
 800797e:	d00c      	beq.n	800799a <_strtoul_l.isra.0+0xf6>
 8007980:	b127      	cbz	r7, 800798c <_strtoul_l.isra.0+0xe8>
 8007982:	3d01      	subs	r5, #1
 8007984:	f8ca 5000 	str.w	r5, [sl]
 8007988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798c:	464d      	mov	r5, r9
 800798e:	e7f9      	b.n	8007984 <_strtoul_l.isra.0+0xe0>
 8007990:	2430      	movs	r4, #48	; 0x30
 8007992:	2e00      	cmp	r6, #0
 8007994:	d1b4      	bne.n	8007900 <_strtoul_l.isra.0+0x5c>
 8007996:	2608      	movs	r6, #8
 8007998:	e7b2      	b.n	8007900 <_strtoul_l.isra.0+0x5c>
 800799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080079a0 <strtoul>:
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <strtoul+0x24>)
 80079a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a4:	681c      	ldr	r4, [r3, #0]
 80079a6:	4d08      	ldr	r5, [pc, #32]	; (80079c8 <strtoul+0x28>)
 80079a8:	6a23      	ldr	r3, [r4, #32]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf08      	it	eq
 80079ae:	462b      	moveq	r3, r5
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	4613      	mov	r3, r2
 80079b4:	460a      	mov	r2, r1
 80079b6:	4601      	mov	r1, r0
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff ff73 	bl	80078a4 <_strtoul_l.isra.0>
 80079be:	b003      	add	sp, #12
 80079c0:	bd30      	pop	{r4, r5, pc}
 80079c2:	bf00      	nop
 80079c4:	2000000c 	.word	0x2000000c
 80079c8:	20000070 	.word	0x20000070

080079cc <quorem>:
 80079cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	6903      	ldr	r3, [r0, #16]
 80079d2:	690c      	ldr	r4, [r1, #16]
 80079d4:	4680      	mov	r8, r0
 80079d6:	429c      	cmp	r4, r3
 80079d8:	f300 8082 	bgt.w	8007ae0 <quorem+0x114>
 80079dc:	3c01      	subs	r4, #1
 80079de:	f101 0714 	add.w	r7, r1, #20
 80079e2:	f100 0614 	add.w	r6, r0, #20
 80079e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079ee:	3501      	adds	r5, #1
 80079f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80079f4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80079f8:	eb06 030e 	add.w	r3, r6, lr
 80079fc:	eb07 090e 	add.w	r9, r7, lr
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	b38d      	cbz	r5, 8007a68 <quorem+0x9c>
 8007a04:	f04f 0a00 	mov.w	sl, #0
 8007a08:	4638      	mov	r0, r7
 8007a0a:	46b4      	mov	ip, r6
 8007a0c:	46d3      	mov	fp, sl
 8007a0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a12:	b293      	uxth	r3, r2
 8007a14:	fb05 a303 	mla	r3, r5, r3, sl
 8007a18:	0c12      	lsrs	r2, r2, #16
 8007a1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a1e:	fb05 a202 	mla	r2, r5, r2, sl
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	ebab 0303 	sub.w	r3, fp, r3
 8007a28:	f8bc b000 	ldrh.w	fp, [ip]
 8007a2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a30:	445b      	add	r3, fp
 8007a32:	fa1f fb82 	uxth.w	fp, r2
 8007a36:	f8dc 2000 	ldr.w	r2, [ip]
 8007a3a:	4581      	cmp	r9, r0
 8007a3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a4a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a4e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a52:	d2dc      	bcs.n	8007a0e <quorem+0x42>
 8007a54:	f856 300e 	ldr.w	r3, [r6, lr]
 8007a58:	b933      	cbnz	r3, 8007a68 <quorem+0x9c>
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	429e      	cmp	r6, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	d331      	bcc.n	8007ac8 <quorem+0xfc>
 8007a64:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a68:	4640      	mov	r0, r8
 8007a6a:	f001 f854 	bl	8008b16 <__mcmp>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	db26      	blt.n	8007ac0 <quorem+0xf4>
 8007a72:	4630      	mov	r0, r6
 8007a74:	f04f 0e00 	mov.w	lr, #0
 8007a78:	3501      	adds	r5, #1
 8007a7a:	f857 1b04 	ldr.w	r1, [r7], #4
 8007a7e:	f8d0 c000 	ldr.w	ip, [r0]
 8007a82:	b28b      	uxth	r3, r1
 8007a84:	ebae 0303 	sub.w	r3, lr, r3
 8007a88:	fa1f f28c 	uxth.w	r2, ip
 8007a8c:	4413      	add	r3, r2
 8007a8e:	0c0a      	lsrs	r2, r1, #16
 8007a90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9e:	45b9      	cmp	r9, r7
 8007aa0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007aa4:	f840 3b04 	str.w	r3, [r0], #4
 8007aa8:	d2e7      	bcs.n	8007a7a <quorem+0xae>
 8007aaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007aae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007ab2:	b92a      	cbnz	r2, 8007ac0 <quorem+0xf4>
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	429e      	cmp	r6, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	d30b      	bcc.n	8007ad4 <quorem+0x108>
 8007abc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	b003      	add	sp, #12
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	3b04      	subs	r3, #4
 8007acc:	2a00      	cmp	r2, #0
 8007ace:	d1c9      	bne.n	8007a64 <quorem+0x98>
 8007ad0:	3c01      	subs	r4, #1
 8007ad2:	e7c4      	b.n	8007a5e <quorem+0x92>
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	3b04      	subs	r3, #4
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d1ef      	bne.n	8007abc <quorem+0xf0>
 8007adc:	3c01      	subs	r4, #1
 8007ade:	e7ea      	b.n	8007ab6 <quorem+0xea>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e7ee      	b.n	8007ac2 <quorem+0xf6>
 8007ae4:	0000      	movs	r0, r0
	...

08007ae8 <_dtoa_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aee:	b095      	sub	sp, #84	; 0x54
 8007af0:	4604      	mov	r4, r0
 8007af2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007af8:	b93e      	cbnz	r6, 8007b0a <_dtoa_r+0x22>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f000 fdda 	bl	80086b4 <malloc>
 8007b00:	6260      	str	r0, [r4, #36]	; 0x24
 8007b02:	6046      	str	r6, [r0, #4]
 8007b04:	6086      	str	r6, [r0, #8]
 8007b06:	6006      	str	r6, [r0, #0]
 8007b08:	60c6      	str	r6, [r0, #12]
 8007b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	b151      	cbz	r1, 8007b26 <_dtoa_r+0x3e>
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	2301      	movs	r3, #1
 8007b14:	4093      	lsls	r3, r2
 8007b16:	604a      	str	r2, [r1, #4]
 8007b18:	608b      	str	r3, [r1, #8]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 fe26 	bl	800876c <_Bfree>
 8007b20:	2200      	movs	r2, #0
 8007b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bfb7      	itett	lt
 8007b2c:	2301      	movlt	r3, #1
 8007b2e:	2300      	movge	r3, #0
 8007b30:	602b      	strlt	r3, [r5, #0]
 8007b32:	9b03      	ldrlt	r3, [sp, #12]
 8007b34:	bfae      	itee	ge
 8007b36:	602b      	strge	r3, [r5, #0]
 8007b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	9303      	strlt	r3, [sp, #12]
 8007b3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b42:	4bab      	ldr	r3, [pc, #684]	; (8007df0 <_dtoa_r+0x308>)
 8007b44:	ea33 0309 	bics.w	r3, r3, r9
 8007b48:	d11b      	bne.n	8007b82 <_dtoa_r+0x9a>
 8007b4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	9b02      	ldr	r3, [sp, #8]
 8007b54:	b923      	cbnz	r3, 8007b60 <_dtoa_r+0x78>
 8007b56:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f000 8583 	beq.w	8008666 <_dtoa_r+0xb7e>
 8007b60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b62:	b953      	cbnz	r3, 8007b7a <_dtoa_r+0x92>
 8007b64:	4ba3      	ldr	r3, [pc, #652]	; (8007df4 <_dtoa_r+0x30c>)
 8007b66:	e021      	b.n	8007bac <_dtoa_r+0xc4>
 8007b68:	4ba3      	ldr	r3, [pc, #652]	; (8007df8 <_dtoa_r+0x310>)
 8007b6a:	9306      	str	r3, [sp, #24]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	9806      	ldr	r0, [sp, #24]
 8007b74:	b015      	add	sp, #84	; 0x54
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	4b9e      	ldr	r3, [pc, #632]	; (8007df4 <_dtoa_r+0x30c>)
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	e7f5      	b.n	8007b6e <_dtoa_r+0x86>
 8007b82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	f7f8 ff07 	bl	80009a0 <__aeabi_dcmpeq>
 8007b92:	4680      	mov	r8, r0
 8007b94:	b160      	cbz	r0, 8007bb0 <_dtoa_r+0xc8>
 8007b96:	2301      	movs	r3, #1
 8007b98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 855e 	beq.w	8008660 <_dtoa_r+0xb78>
 8007ba4:	4b95      	ldr	r3, [pc, #596]	; (8007dfc <_dtoa_r+0x314>)
 8007ba6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	9306      	str	r3, [sp, #24]
 8007bae:	e7e0      	b.n	8007b72 <_dtoa_r+0x8a>
 8007bb0:	ab12      	add	r3, sp, #72	; 0x48
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	ab13      	add	r3, sp, #76	; 0x4c
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	463b      	mov	r3, r7
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f001 f823 	bl	8008c08 <__d2b>
 8007bc2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	d07d      	beq.n	8007cc8 <_dtoa_r+0x1e0>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bd2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007bd6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007bda:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bde:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007be2:	2200      	movs	r2, #0
 8007be4:	4b86      	ldr	r3, [pc, #536]	; (8007e00 <_dtoa_r+0x318>)
 8007be6:	f7f8 fabf 	bl	8000168 <__aeabi_dsub>
 8007bea:	a37b      	add	r3, pc, #492	; (adr r3, 8007dd8 <_dtoa_r+0x2f0>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fc6e 	bl	80004d0 <__aeabi_dmul>
 8007bf4:	a37a      	add	r3, pc, #488	; (adr r3, 8007de0 <_dtoa_r+0x2f8>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fab7 	bl	800016c <__adddf3>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	4628      	mov	r0, r5
 8007c02:	460f      	mov	r7, r1
 8007c04:	f7f8 fbfe 	bl	8000404 <__aeabi_i2d>
 8007c08:	a377      	add	r3, pc, #476	; (adr r3, 8007de8 <_dtoa_r+0x300>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fc5f 	bl	80004d0 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4630      	mov	r0, r6
 8007c18:	4639      	mov	r1, r7
 8007c1a:	f7f8 faa7 	bl	800016c <__adddf3>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	f7f8 ff05 	bl	8000a30 <__aeabi_d2iz>
 8007c26:	2200      	movs	r2, #0
 8007c28:	4683      	mov	fp, r0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	4639      	mov	r1, r7
 8007c30:	f7f8 fec0 	bl	80009b4 <__aeabi_dcmplt>
 8007c34:	b158      	cbz	r0, 8007c4e <_dtoa_r+0x166>
 8007c36:	4658      	mov	r0, fp
 8007c38:	f7f8 fbe4 	bl	8000404 <__aeabi_i2d>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 feac 	bl	80009a0 <__aeabi_dcmpeq>
 8007c48:	b908      	cbnz	r0, 8007c4e <_dtoa_r+0x166>
 8007c4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c4e:	f1bb 0f16 	cmp.w	fp, #22
 8007c52:	d858      	bhi.n	8007d06 <_dtoa_r+0x21e>
 8007c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c58:	496a      	ldr	r1, [pc, #424]	; (8007e04 <_dtoa_r+0x31c>)
 8007c5a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c62:	f7f8 fec5 	bl	80009f0 <__aeabi_dcmpgt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d04f      	beq.n	8007d0a <_dtoa_r+0x222>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c70:	930d      	str	r3, [sp, #52]	; 0x34
 8007c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c74:	1b5d      	subs	r5, r3, r5
 8007c76:	1e6b      	subs	r3, r5, #1
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	bf43      	ittte	mi
 8007c7c:	2300      	movmi	r3, #0
 8007c7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c82:	9307      	strmi	r3, [sp, #28]
 8007c84:	f04f 0800 	movpl.w	r8, #0
 8007c88:	f1bb 0f00 	cmp.w	fp, #0
 8007c8c:	db3f      	blt.n	8007d0e <_dtoa_r+0x226>
 8007c8e:	9b07      	ldr	r3, [sp, #28]
 8007c90:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007c94:	445b      	add	r3, fp
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9308      	str	r3, [sp, #32]
 8007c9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	f200 80b4 	bhi.w	8007e0c <_dtoa_r+0x324>
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	bfc4      	itt	gt
 8007ca8:	3b04      	subgt	r3, #4
 8007caa:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007cac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cae:	bfc8      	it	gt
 8007cb0:	2600      	movgt	r6, #0
 8007cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8007cb6:	bfd8      	it	le
 8007cb8:	2601      	movle	r6, #1
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	f200 80b2 	bhi.w	8007e24 <_dtoa_r+0x33c>
 8007cc0:	e8df f003 	tbb	[pc, r3]
 8007cc4:	782d8684 	.word	0x782d8684
 8007cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007ccc:	441d      	add	r5, r3
 8007cce:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	dd11      	ble.n	8007cfa <_dtoa_r+0x212>
 8007cd6:	9a02      	ldr	r2, [sp, #8]
 8007cd8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007cdc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007ce0:	fa22 f000 	lsr.w	r0, r2, r0
 8007ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce8:	4318      	orrs	r0, r3
 8007cea:	f7f8 fb7b 	bl	80003e4 <__aeabi_ui2d>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007cf4:	3d01      	subs	r5, #1
 8007cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8007cf8:	e773      	b.n	8007be2 <_dtoa_r+0xfa>
 8007cfa:	f1c3 0020 	rsb	r0, r3, #32
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	fa03 f000 	lsl.w	r0, r3, r0
 8007d04:	e7f1      	b.n	8007cea <_dtoa_r+0x202>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7b2      	b.n	8007c70 <_dtoa_r+0x188>
 8007d0a:	900d      	str	r0, [sp, #52]	; 0x34
 8007d0c:	e7b1      	b.n	8007c72 <_dtoa_r+0x18a>
 8007d0e:	f1cb 0300 	rsb	r3, fp, #0
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	2300      	movs	r3, #0
 8007d16:	eba8 080b 	sub.w	r8, r8, fp
 8007d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007d1c:	e7be      	b.n	8007c9c <_dtoa_r+0x1b4>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	9309      	str	r3, [sp, #36]	; 0x24
 8007d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f340 8080 	ble.w	8007e2a <_dtoa_r+0x342>
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2104      	movs	r1, #4
 8007d32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007d34:	606a      	str	r2, [r5, #4]
 8007d36:	f101 0214 	add.w	r2, r1, #20
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d97a      	bls.n	8007e34 <_dtoa_r+0x34c>
 8007d3e:	6869      	ldr	r1, [r5, #4]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fcdf 	bl	8008704 <_Balloc>
 8007d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d48:	6028      	str	r0, [r5, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f1b9 0f0e 	cmp.w	r9, #14
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	f200 80f0 	bhi.w	8007f36 <_dtoa_r+0x44e>
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	f000 80ed 	beq.w	8007f36 <_dtoa_r+0x44e>
 8007d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d60:	f1bb 0f00 	cmp.w	fp, #0
 8007d64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007d68:	dd79      	ble.n	8007e5e <_dtoa_r+0x376>
 8007d6a:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <_dtoa_r+0x31c>)
 8007d6c:	f00b 030f 	and.w	r3, fp, #15
 8007d70:	ea4f 162b 	mov.w	r6, fp, asr #4
 8007d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d78:	06f0      	lsls	r0, r6, #27
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d82:	d55c      	bpl.n	8007e3e <_dtoa_r+0x356>
 8007d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d88:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <_dtoa_r+0x320>)
 8007d8a:	2503      	movs	r5, #3
 8007d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d90:	f7f8 fcc8 	bl	8000724 <__aeabi_ddiv>
 8007d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d98:	f006 060f 	and.w	r6, r6, #15
 8007d9c:	4f1a      	ldr	r7, [pc, #104]	; (8007e08 <_dtoa_r+0x320>)
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d14f      	bne.n	8007e42 <_dtoa_r+0x35a>
 8007da2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007daa:	f7f8 fcbb 	bl	8000724 <__aeabi_ddiv>
 8007dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db2:	e06e      	b.n	8007e92 <_dtoa_r+0x3aa>
 8007db4:	2301      	movs	r3, #1
 8007db6:	9309      	str	r3, [sp, #36]	; 0x24
 8007db8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dba:	445b      	add	r3, fp
 8007dbc:	f103 0901 	add.w	r9, r3, #1
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	bfb8      	it	lt
 8007dc8:	2301      	movlt	r3, #1
 8007dca:	e7b0      	b.n	8007d2e <_dtoa_r+0x246>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e7a7      	b.n	8007d20 <_dtoa_r+0x238>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e7f0      	b.n	8007db6 <_dtoa_r+0x2ce>
 8007dd4:	f3af 8000 	nop.w
 8007dd8:	636f4361 	.word	0x636f4361
 8007ddc:	3fd287a7 	.word	0x3fd287a7
 8007de0:	8b60c8b3 	.word	0x8b60c8b3
 8007de4:	3fc68a28 	.word	0x3fc68a28
 8007de8:	509f79fb 	.word	0x509f79fb
 8007dec:	3fd34413 	.word	0x3fd34413
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	08009349 	.word	0x08009349
 8007df8:	08009340 	.word	0x08009340
 8007dfc:	0800931d 	.word	0x0800931d
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	08009380 	.word	0x08009380
 8007e08:	08009358 	.word	0x08009358
 8007e0c:	2601      	movs	r6, #1
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9609      	str	r6, [sp, #36]	; 0x24
 8007e12:	931e      	str	r3, [sp, #120]	; 0x78
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295
 8007e18:	2200      	movs	r2, #0
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	4699      	mov	r9, r3
 8007e1e:	2312      	movs	r3, #18
 8007e20:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e22:	e784      	b.n	8007d2e <_dtoa_r+0x246>
 8007e24:	2301      	movs	r3, #1
 8007e26:	9309      	str	r3, [sp, #36]	; 0x24
 8007e28:	e7f4      	b.n	8007e14 <_dtoa_r+0x32c>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	4699      	mov	r9, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	e7f5      	b.n	8007e20 <_dtoa_r+0x338>
 8007e34:	686a      	ldr	r2, [r5, #4]
 8007e36:	0049      	lsls	r1, r1, #1
 8007e38:	3201      	adds	r2, #1
 8007e3a:	606a      	str	r2, [r5, #4]
 8007e3c:	e77b      	b.n	8007d36 <_dtoa_r+0x24e>
 8007e3e:	2502      	movs	r5, #2
 8007e40:	e7ac      	b.n	8007d9c <_dtoa_r+0x2b4>
 8007e42:	07f1      	lsls	r1, r6, #31
 8007e44:	d508      	bpl.n	8007e58 <_dtoa_r+0x370>
 8007e46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4e:	f7f8 fb3f 	bl	80004d0 <__aeabi_dmul>
 8007e52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e56:	3501      	adds	r5, #1
 8007e58:	1076      	asrs	r6, r6, #1
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	e79f      	b.n	8007d9e <_dtoa_r+0x2b6>
 8007e5e:	f000 80a5 	beq.w	8007fac <_dtoa_r+0x4c4>
 8007e62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e66:	f1cb 0600 	rsb	r6, fp, #0
 8007e6a:	4ba2      	ldr	r3, [pc, #648]	; (80080f4 <_dtoa_r+0x60c>)
 8007e6c:	f006 020f 	and.w	r2, r6, #15
 8007e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f7f8 fb2a 	bl	80004d0 <__aeabi_dmul>
 8007e7c:	2502      	movs	r5, #2
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e84:	4f9c      	ldr	r7, [pc, #624]	; (80080f8 <_dtoa_r+0x610>)
 8007e86:	1136      	asrs	r6, r6, #4
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	f040 8084 	bne.w	8007f96 <_dtoa_r+0x4ae>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d18d      	bne.n	8007dae <_dtoa_r+0x2c6>
 8007e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 808b 	beq.w	8007fb0 <_dtoa_r+0x4c8>
 8007e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4b94      	ldr	r3, [pc, #592]	; (80080fc <_dtoa_r+0x614>)
 8007eaa:	f7f8 fd83 	bl	80009b4 <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d07e      	beq.n	8007fb0 <_dtoa_r+0x4c8>
 8007eb2:	f1b9 0f00 	cmp.w	r9, #0
 8007eb6:	d07b      	beq.n	8007fb0 <_dtoa_r+0x4c8>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dd37      	ble.n	8007f2e <_dtoa_r+0x446>
 8007ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b8e      	ldr	r3, [pc, #568]	; (8008100 <_dtoa_r+0x618>)
 8007ec6:	f7f8 fb03 	bl	80004d0 <__aeabi_dmul>
 8007eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ece:	9e04      	ldr	r6, [sp, #16]
 8007ed0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7f8 fa94 	bl	8000404 <__aeabi_i2d>
 8007edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee0:	f7f8 faf6 	bl	80004d0 <__aeabi_dmul>
 8007ee4:	4b87      	ldr	r3, [pc, #540]	; (8008104 <_dtoa_r+0x61c>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f7f8 f940 	bl	800016c <__adddf3>
 8007eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8007ef6:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	d15c      	bne.n	8007fb6 <_dtoa_r+0x4ce>
 8007efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b81      	ldr	r3, [pc, #516]	; (8008108 <_dtoa_r+0x620>)
 8007f04:	f7f8 f930 	bl	8000168 <__aeabi_dsub>
 8007f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f10:	f7f8 fd6e 	bl	80009f0 <__aeabi_dcmpgt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 82f7 	bne.w	8008508 <_dtoa_r+0xa20>
 8007f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f24:	f7f8 fd46 	bl	80009b4 <__aeabi_dcmplt>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f040 82eb 	bne.w	8008504 <_dtoa_r+0xa1c>
 8007f2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f2c0 8150 	blt.w	80081de <_dtoa_r+0x6f6>
 8007f3e:	f1bb 0f0e 	cmp.w	fp, #14
 8007f42:	f300 814c 	bgt.w	80081de <_dtoa_r+0x6f6>
 8007f46:	4b6b      	ldr	r3, [pc, #428]	; (80080f4 <_dtoa_r+0x60c>)
 8007f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f280 80da 	bge.w	8008110 <_dtoa_r+0x628>
 8007f5c:	f1b9 0f00 	cmp.w	r9, #0
 8007f60:	f300 80d6 	bgt.w	8008110 <_dtoa_r+0x628>
 8007f64:	f040 82cd 	bne.w	8008502 <_dtoa_r+0xa1a>
 8007f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4b66      	ldr	r3, [pc, #408]	; (8008108 <_dtoa_r+0x620>)
 8007f70:	f7f8 faae 	bl	80004d0 <__aeabi_dmul>
 8007f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f78:	f7f8 fd30 	bl	80009dc <__aeabi_dcmpge>
 8007f7c:	464e      	mov	r6, r9
 8007f7e:	464f      	mov	r7, r9
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f040 82a4 	bne.w	80084ce <_dtoa_r+0x9e6>
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	9a06      	ldr	r2, [sp, #24]
 8007f8a:	1c5d      	adds	r5, r3, #1
 8007f8c:	2331      	movs	r3, #49	; 0x31
 8007f8e:	f10b 0b01 	add.w	fp, fp, #1
 8007f92:	7013      	strb	r3, [r2, #0]
 8007f94:	e29f      	b.n	80084d6 <_dtoa_r+0x9ee>
 8007f96:	07f2      	lsls	r2, r6, #31
 8007f98:	d505      	bpl.n	8007fa6 <_dtoa_r+0x4be>
 8007f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9e:	f7f8 fa97 	bl	80004d0 <__aeabi_dmul>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	1076      	asrs	r6, r6, #1
 8007fa8:	3708      	adds	r7, #8
 8007faa:	e76d      	b.n	8007e88 <_dtoa_r+0x3a0>
 8007fac:	2502      	movs	r5, #2
 8007fae:	e770      	b.n	8007e92 <_dtoa_r+0x3aa>
 8007fb0:	465f      	mov	r7, fp
 8007fb2:	464e      	mov	r6, r9
 8007fb4:	e78f      	b.n	8007ed6 <_dtoa_r+0x3ee>
 8007fb6:	9a06      	ldr	r2, [sp, #24]
 8007fb8:	4b4e      	ldr	r3, [pc, #312]	; (80080f4 <_dtoa_r+0x60c>)
 8007fba:	4432      	add	r2, r6
 8007fbc:	9211      	str	r2, [sp, #68]	; 0x44
 8007fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc0:	1e71      	subs	r1, r6, #1
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d048      	beq.n	8008058 <_dtoa_r+0x570>
 8007fc6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	2000      	movs	r0, #0
 8007fd0:	494e      	ldr	r1, [pc, #312]	; (800810c <_dtoa_r+0x624>)
 8007fd2:	f7f8 fba7 	bl	8000724 <__aeabi_ddiv>
 8007fd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fda:	f7f8 f8c5 	bl	8000168 <__aeabi_dsub>
 8007fde:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fe2:	9d06      	ldr	r5, [sp, #24]
 8007fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe8:	f7f8 fd22 	bl	8000a30 <__aeabi_d2iz>
 8007fec:	4606      	mov	r6, r0
 8007fee:	f7f8 fa09 	bl	8000404 <__aeabi_i2d>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffa:	f7f8 f8b5 	bl	8000168 <__aeabi_dsub>
 8007ffe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008002:	3630      	adds	r6, #48	; 0x30
 8008004:	f805 6b01 	strb.w	r6, [r5], #1
 8008008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800800c:	f7f8 fcd2 	bl	80009b4 <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d164      	bne.n	80080de <_dtoa_r+0x5f6>
 8008014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008018:	2000      	movs	r0, #0
 800801a:	4938      	ldr	r1, [pc, #224]	; (80080fc <_dtoa_r+0x614>)
 800801c:	f7f8 f8a4 	bl	8000168 <__aeabi_dsub>
 8008020:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008024:	f7f8 fcc6 	bl	80009b4 <__aeabi_dcmplt>
 8008028:	2800      	cmp	r0, #0
 800802a:	f040 80b9 	bne.w	80081a0 <_dtoa_r+0x6b8>
 800802e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008030:	429d      	cmp	r5, r3
 8008032:	f43f af7c 	beq.w	8007f2e <_dtoa_r+0x446>
 8008036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800803a:	2200      	movs	r2, #0
 800803c:	4b30      	ldr	r3, [pc, #192]	; (8008100 <_dtoa_r+0x618>)
 800803e:	f7f8 fa47 	bl	80004d0 <__aeabi_dmul>
 8008042:	2200      	movs	r2, #0
 8008044:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804c:	4b2c      	ldr	r3, [pc, #176]	; (8008100 <_dtoa_r+0x618>)
 800804e:	f7f8 fa3f 	bl	80004d0 <__aeabi_dmul>
 8008052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008056:	e7c5      	b.n	8007fe4 <_dtoa_r+0x4fc>
 8008058:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800805c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008060:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008064:	f7f8 fa34 	bl	80004d0 <__aeabi_dmul>
 8008068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800806c:	9d06      	ldr	r5, [sp, #24]
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	f7f8 fcdd 	bl	8000a30 <__aeabi_d2iz>
 8008076:	4606      	mov	r6, r0
 8008078:	f7f8 f9c4 	bl	8000404 <__aeabi_i2d>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008084:	f7f8 f870 	bl	8000168 <__aeabi_dsub>
 8008088:	3630      	adds	r6, #48	; 0x30
 800808a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800808c:	f805 6b01 	strb.w	r6, [r5], #1
 8008090:	42ab      	cmp	r3, r5
 8008092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	d124      	bne.n	80080e6 <_dtoa_r+0x5fe>
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <_dtoa_r+0x624>)
 800809e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080a2:	f7f8 f863 	bl	800016c <__adddf3>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ae:	f7f8 fc9f 	bl	80009f0 <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d174      	bne.n	80081a0 <_dtoa_r+0x6b8>
 80080b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080ba:	2000      	movs	r0, #0
 80080bc:	4913      	ldr	r1, [pc, #76]	; (800810c <_dtoa_r+0x624>)
 80080be:	f7f8 f853 	bl	8000168 <__aeabi_dsub>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ca:	f7f8 fc73 	bl	80009b4 <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f af2d 	beq.w	8007f2e <_dtoa_r+0x446>
 80080d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080d8:	1e6a      	subs	r2, r5, #1
 80080da:	2b30      	cmp	r3, #48	; 0x30
 80080dc:	d001      	beq.n	80080e2 <_dtoa_r+0x5fa>
 80080de:	46bb      	mov	fp, r7
 80080e0:	e04d      	b.n	800817e <_dtoa_r+0x696>
 80080e2:	4615      	mov	r5, r2
 80080e4:	e7f6      	b.n	80080d4 <_dtoa_r+0x5ec>
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <_dtoa_r+0x618>)
 80080e8:	f7f8 f9f2 	bl	80004d0 <__aeabi_dmul>
 80080ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f0:	e7bd      	b.n	800806e <_dtoa_r+0x586>
 80080f2:	bf00      	nop
 80080f4:	08009380 	.word	0x08009380
 80080f8:	08009358 	.word	0x08009358
 80080fc:	3ff00000 	.word	0x3ff00000
 8008100:	40240000 	.word	0x40240000
 8008104:	401c0000 	.word	0x401c0000
 8008108:	40140000 	.word	0x40140000
 800810c:	3fe00000 	.word	0x3fe00000
 8008110:	9d06      	ldr	r5, [sp, #24]
 8008112:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 fb01 	bl	8000724 <__aeabi_ddiv>
 8008122:	f7f8 fc85 	bl	8000a30 <__aeabi_d2iz>
 8008126:	4680      	mov	r8, r0
 8008128:	f7f8 f96c 	bl	8000404 <__aeabi_i2d>
 800812c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008130:	f7f8 f9ce 	bl	80004d0 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008144:	f805 6b01 	strb.w	r6, [r5], #1
 8008148:	9e06      	ldr	r6, [sp, #24]
 800814a:	4602      	mov	r2, r0
 800814c:	1bae      	subs	r6, r5, r6
 800814e:	45b1      	cmp	r9, r6
 8008150:	460b      	mov	r3, r1
 8008152:	d137      	bne.n	80081c4 <_dtoa_r+0x6dc>
 8008154:	f7f8 f80a 	bl	800016c <__adddf3>
 8008158:	4606      	mov	r6, r0
 800815a:	460f      	mov	r7, r1
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008164:	f7f8 fc26 	bl	80009b4 <__aeabi_dcmplt>
 8008168:	b9c8      	cbnz	r0, 800819e <_dtoa_r+0x6b6>
 800816a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800816e:	4632      	mov	r2, r6
 8008170:	463b      	mov	r3, r7
 8008172:	f7f8 fc15 	bl	80009a0 <__aeabi_dcmpeq>
 8008176:	b110      	cbz	r0, 800817e <_dtoa_r+0x696>
 8008178:	f018 0f01 	tst.w	r8, #1
 800817c:	d10f      	bne.n	800819e <_dtoa_r+0x6b6>
 800817e:	4651      	mov	r1, sl
 8008180:	4620      	mov	r0, r4
 8008182:	f000 faf3 	bl	800876c <_Bfree>
 8008186:	2300      	movs	r3, #0
 8008188:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800818a:	702b      	strb	r3, [r5, #0]
 800818c:	f10b 0301 	add.w	r3, fp, #1
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008194:	2b00      	cmp	r3, #0
 8008196:	f43f acec 	beq.w	8007b72 <_dtoa_r+0x8a>
 800819a:	601d      	str	r5, [r3, #0]
 800819c:	e4e9      	b.n	8007b72 <_dtoa_r+0x8a>
 800819e:	465f      	mov	r7, fp
 80081a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081a4:	1e6b      	subs	r3, r5, #1
 80081a6:	2a39      	cmp	r2, #57	; 0x39
 80081a8:	d106      	bne.n	80081b8 <_dtoa_r+0x6d0>
 80081aa:	9a06      	ldr	r2, [sp, #24]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d107      	bne.n	80081c0 <_dtoa_r+0x6d8>
 80081b0:	2330      	movs	r3, #48	; 0x30
 80081b2:	7013      	strb	r3, [r2, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	3701      	adds	r7, #1
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	3201      	adds	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e78e      	b.n	80080de <_dtoa_r+0x5f6>
 80081c0:	461d      	mov	r5, r3
 80081c2:	e7ed      	b.n	80081a0 <_dtoa_r+0x6b8>
 80081c4:	2200      	movs	r2, #0
 80081c6:	4bb5      	ldr	r3, [pc, #724]	; (800849c <_dtoa_r+0x9b4>)
 80081c8:	f7f8 f982 	bl	80004d0 <__aeabi_dmul>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	4606      	mov	r6, r0
 80081d2:	460f      	mov	r7, r1
 80081d4:	f7f8 fbe4 	bl	80009a0 <__aeabi_dcmpeq>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d09c      	beq.n	8008116 <_dtoa_r+0x62e>
 80081dc:	e7cf      	b.n	800817e <_dtoa_r+0x696>
 80081de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	f000 8129 	beq.w	8008438 <_dtoa_r+0x950>
 80081e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081e8:	2a01      	cmp	r2, #1
 80081ea:	f300 810e 	bgt.w	800840a <_dtoa_r+0x922>
 80081ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	f000 8106 	beq.w	8008402 <_dtoa_r+0x91a>
 80081f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081fa:	4645      	mov	r5, r8
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	9a07      	ldr	r2, [sp, #28]
 8008200:	2101      	movs	r1, #1
 8008202:	441a      	add	r2, r3
 8008204:	4620      	mov	r0, r4
 8008206:	4498      	add	r8, r3
 8008208:	9207      	str	r2, [sp, #28]
 800820a:	f000 fb4f 	bl	80088ac <__i2b>
 800820e:	4607      	mov	r7, r0
 8008210:	2d00      	cmp	r5, #0
 8008212:	dd0b      	ble.n	800822c <_dtoa_r+0x744>
 8008214:	9b07      	ldr	r3, [sp, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd08      	ble.n	800822c <_dtoa_r+0x744>
 800821a:	42ab      	cmp	r3, r5
 800821c:	bfa8      	it	ge
 800821e:	462b      	movge	r3, r5
 8008220:	9a07      	ldr	r2, [sp, #28]
 8008222:	eba8 0803 	sub.w	r8, r8, r3
 8008226:	1aed      	subs	r5, r5, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	b1fb      	cbz	r3, 8008270 <_dtoa_r+0x788>
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8104 	beq.w	8008440 <_dtoa_r+0x958>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd11      	ble.n	8008260 <_dtoa_r+0x778>
 800823c:	4639      	mov	r1, r7
 800823e:	4632      	mov	r2, r6
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fbc9 	bl	80089d8 <__pow5mult>
 8008246:	4652      	mov	r2, sl
 8008248:	4601      	mov	r1, r0
 800824a:	4607      	mov	r7, r0
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fb36 	bl	80088be <__multiply>
 8008252:	4651      	mov	r1, sl
 8008254:	900a      	str	r0, [sp, #40]	; 0x28
 8008256:	4620      	mov	r0, r4
 8008258:	f000 fa88 	bl	800876c <_Bfree>
 800825c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825e:	469a      	mov	sl, r3
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	1b9a      	subs	r2, r3, r6
 8008264:	d004      	beq.n	8008270 <_dtoa_r+0x788>
 8008266:	4651      	mov	r1, sl
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fbb5 	bl	80089d8 <__pow5mult>
 800826e:	4682      	mov	sl, r0
 8008270:	2101      	movs	r1, #1
 8008272:	4620      	mov	r0, r4
 8008274:	f000 fb1a 	bl	80088ac <__i2b>
 8008278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827a:	4606      	mov	r6, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	f340 80e1 	ble.w	8008444 <_dtoa_r+0x95c>
 8008282:	461a      	mov	r2, r3
 8008284:	4601      	mov	r1, r0
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fba6 	bl	80089d8 <__pow5mult>
 800828c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800828e:	4606      	mov	r6, r0
 8008290:	2b01      	cmp	r3, #1
 8008292:	f340 80da 	ble.w	800844a <_dtoa_r+0x962>
 8008296:	2300      	movs	r3, #0
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	6933      	ldr	r3, [r6, #16]
 800829c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082a0:	6918      	ldr	r0, [r3, #16]
 80082a2:	f000 fab5 	bl	8008810 <__hi0bits>
 80082a6:	f1c0 0020 	rsb	r0, r0, #32
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	4418      	add	r0, r3
 80082ae:	f010 001f 	ands.w	r0, r0, #31
 80082b2:	f000 80f0 	beq.w	8008496 <_dtoa_r+0x9ae>
 80082b6:	f1c0 0320 	rsb	r3, r0, #32
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	f340 80e2 	ble.w	8008484 <_dtoa_r+0x99c>
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	f1c0 001c 	rsb	r0, r0, #28
 80082c6:	4480      	add	r8, r0
 80082c8:	4405      	add	r5, r0
 80082ca:	4403      	add	r3, r0
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	f1b8 0f00 	cmp.w	r8, #0
 80082d2:	dd05      	ble.n	80082e0 <_dtoa_r+0x7f8>
 80082d4:	4651      	mov	r1, sl
 80082d6:	4642      	mov	r2, r8
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fbcb 	bl	8008a74 <__lshift>
 80082de:	4682      	mov	sl, r0
 80082e0:	9b07      	ldr	r3, [sp, #28]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd05      	ble.n	80082f2 <_dtoa_r+0x80a>
 80082e6:	4631      	mov	r1, r6
 80082e8:	461a      	mov	r2, r3
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fbc2 	bl	8008a74 <__lshift>
 80082f0:	4606      	mov	r6, r0
 80082f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80d3 	beq.w	80084a0 <_dtoa_r+0x9b8>
 80082fa:	4631      	mov	r1, r6
 80082fc:	4650      	mov	r0, sl
 80082fe:	f000 fc0a 	bl	8008b16 <__mcmp>
 8008302:	2800      	cmp	r0, #0
 8008304:	f280 80cc 	bge.w	80084a0 <_dtoa_r+0x9b8>
 8008308:	2300      	movs	r3, #0
 800830a:	4651      	mov	r1, sl
 800830c:	220a      	movs	r2, #10
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fa43 	bl	800879a <__multadd>
 8008314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008316:	f10b 3bff 	add.w	fp, fp, #4294967295
 800831a:	4682      	mov	sl, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 81a9 	beq.w	8008674 <_dtoa_r+0xb8c>
 8008322:	2300      	movs	r3, #0
 8008324:	4639      	mov	r1, r7
 8008326:	220a      	movs	r2, #10
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fa36 	bl	800879a <__multadd>
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	4607      	mov	r7, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	dc03      	bgt.n	800833e <_dtoa_r+0x856>
 8008336:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008338:	2b02      	cmp	r3, #2
 800833a:	f300 80b9 	bgt.w	80084b0 <_dtoa_r+0x9c8>
 800833e:	2d00      	cmp	r5, #0
 8008340:	dd05      	ble.n	800834e <_dtoa_r+0x866>
 8008342:	4639      	mov	r1, r7
 8008344:	462a      	mov	r2, r5
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fb94 	bl	8008a74 <__lshift>
 800834c:	4607      	mov	r7, r0
 800834e:	9b08      	ldr	r3, [sp, #32]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8110 	beq.w	8008576 <_dtoa_r+0xa8e>
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4620      	mov	r0, r4
 800835a:	f000 f9d3 	bl	8008704 <_Balloc>
 800835e:	4605      	mov	r5, r0
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	f107 010c 	add.w	r1, r7, #12
 8008366:	3202      	adds	r2, #2
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	300c      	adds	r0, #12
 800836c:	f7fe fe02 	bl	8006f74 <memcpy>
 8008370:	2201      	movs	r2, #1
 8008372:	4629      	mov	r1, r5
 8008374:	4620      	mov	r0, r4
 8008376:	f000 fb7d 	bl	8008a74 <__lshift>
 800837a:	9707      	str	r7, [sp, #28]
 800837c:	4607      	mov	r7, r0
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	9308      	str	r3, [sp, #32]
 800838a:	4631      	mov	r1, r6
 800838c:	4650      	mov	r0, sl
 800838e:	f7ff fb1d 	bl	80079cc <quorem>
 8008392:	9907      	ldr	r1, [sp, #28]
 8008394:	4605      	mov	r5, r0
 8008396:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800839a:	4650      	mov	r0, sl
 800839c:	f000 fbbb 	bl	8008b16 <__mcmp>
 80083a0:	463a      	mov	r2, r7
 80083a2:	9002      	str	r0, [sp, #8]
 80083a4:	4631      	mov	r1, r6
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fbcf 	bl	8008b4a <__mdiff>
 80083ac:	68c3      	ldr	r3, [r0, #12]
 80083ae:	4602      	mov	r2, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 80e2 	bne.w	800857a <_dtoa_r+0xa92>
 80083b6:	4601      	mov	r1, r0
 80083b8:	9009      	str	r0, [sp, #36]	; 0x24
 80083ba:	4650      	mov	r0, sl
 80083bc:	f000 fbab 	bl	8008b16 <__mcmp>
 80083c0:	4603      	mov	r3, r0
 80083c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c4:	4611      	mov	r1, r2
 80083c6:	4620      	mov	r0, r4
 80083c8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ca:	f000 f9cf 	bl	800876c <_Bfree>
 80083ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f040 80d4 	bne.w	800857e <_dtoa_r+0xa96>
 80083d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083d8:	2a00      	cmp	r2, #0
 80083da:	f040 80d0 	bne.w	800857e <_dtoa_r+0xa96>
 80083de:	9a08      	ldr	r2, [sp, #32]
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	f040 80cc 	bne.w	800857e <_dtoa_r+0xa96>
 80083e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083ea:	f000 80e8 	beq.w	80085be <_dtoa_r+0xad6>
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dd01      	ble.n	80083f8 <_dtoa_r+0x910>
 80083f4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80083f8:	f108 0501 	add.w	r5, r8, #1
 80083fc:	f888 9000 	strb.w	r9, [r8]
 8008400:	e06b      	b.n	80084da <_dtoa_r+0x9f2>
 8008402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008404:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008408:	e6f7      	b.n	80081fa <_dtoa_r+0x712>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	f109 36ff 	add.w	r6, r9, #4294967295
 8008410:	42b3      	cmp	r3, r6
 8008412:	bfb7      	itett	lt
 8008414:	9b08      	ldrlt	r3, [sp, #32]
 8008416:	1b9e      	subge	r6, r3, r6
 8008418:	1af2      	sublt	r2, r6, r3
 800841a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800841c:	bfbf      	itttt	lt
 800841e:	9608      	strlt	r6, [sp, #32]
 8008420:	189b      	addlt	r3, r3, r2
 8008422:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008424:	2600      	movlt	r6, #0
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	bfb9      	ittee	lt
 800842c:	eba8 0509 	sublt.w	r5, r8, r9
 8008430:	2300      	movlt	r3, #0
 8008432:	4645      	movge	r5, r8
 8008434:	464b      	movge	r3, r9
 8008436:	e6e2      	b.n	80081fe <_dtoa_r+0x716>
 8008438:	9e08      	ldr	r6, [sp, #32]
 800843a:	4645      	mov	r5, r8
 800843c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800843e:	e6e7      	b.n	8008210 <_dtoa_r+0x728>
 8008440:	9a08      	ldr	r2, [sp, #32]
 8008442:	e710      	b.n	8008266 <_dtoa_r+0x77e>
 8008444:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008446:	2b01      	cmp	r3, #1
 8008448:	dc18      	bgt.n	800847c <_dtoa_r+0x994>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	b9b3      	cbnz	r3, 800847c <_dtoa_r+0x994>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008454:	b9a3      	cbnz	r3, 8008480 <_dtoa_r+0x998>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800845c:	0d1b      	lsrs	r3, r3, #20
 800845e:	051b      	lsls	r3, r3, #20
 8008460:	b12b      	cbz	r3, 800846e <_dtoa_r+0x986>
 8008462:	9b07      	ldr	r3, [sp, #28]
 8008464:	f108 0801 	add.w	r8, r8, #1
 8008468:	3301      	adds	r3, #1
 800846a:	9307      	str	r3, [sp, #28]
 800846c:	2301      	movs	r3, #1
 800846e:	9308      	str	r3, [sp, #32]
 8008470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008472:	2b00      	cmp	r3, #0
 8008474:	f47f af11 	bne.w	800829a <_dtoa_r+0x7b2>
 8008478:	2001      	movs	r0, #1
 800847a:	e716      	b.n	80082aa <_dtoa_r+0x7c2>
 800847c:	2300      	movs	r3, #0
 800847e:	e7f6      	b.n	800846e <_dtoa_r+0x986>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	e7f4      	b.n	800846e <_dtoa_r+0x986>
 8008484:	f43f af23 	beq.w	80082ce <_dtoa_r+0x7e6>
 8008488:	9a07      	ldr	r2, [sp, #28]
 800848a:	331c      	adds	r3, #28
 800848c:	441a      	add	r2, r3
 800848e:	4498      	add	r8, r3
 8008490:	441d      	add	r5, r3
 8008492:	4613      	mov	r3, r2
 8008494:	e71a      	b.n	80082cc <_dtoa_r+0x7e4>
 8008496:	4603      	mov	r3, r0
 8008498:	e7f6      	b.n	8008488 <_dtoa_r+0x9a0>
 800849a:	bf00      	nop
 800849c:	40240000 	.word	0x40240000
 80084a0:	f1b9 0f00 	cmp.w	r9, #0
 80084a4:	dc33      	bgt.n	800850e <_dtoa_r+0xa26>
 80084a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	dd30      	ble.n	800850e <_dtoa_r+0xa26>
 80084ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	b963      	cbnz	r3, 80084ce <_dtoa_r+0x9e6>
 80084b4:	4631      	mov	r1, r6
 80084b6:	2205      	movs	r2, #5
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 f96e 	bl	800879a <__multadd>
 80084be:	4601      	mov	r1, r0
 80084c0:	4606      	mov	r6, r0
 80084c2:	4650      	mov	r0, sl
 80084c4:	f000 fb27 	bl	8008b16 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f73f ad5c 	bgt.w	8007f86 <_dtoa_r+0x49e>
 80084ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084d0:	9d06      	ldr	r5, [sp, #24]
 80084d2:	ea6f 0b03 	mvn.w	fp, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	4631      	mov	r1, r6
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f945 	bl	800876c <_Bfree>
 80084e2:	2f00      	cmp	r7, #0
 80084e4:	f43f ae4b 	beq.w	800817e <_dtoa_r+0x696>
 80084e8:	9b07      	ldr	r3, [sp, #28]
 80084ea:	b12b      	cbz	r3, 80084f8 <_dtoa_r+0xa10>
 80084ec:	42bb      	cmp	r3, r7
 80084ee:	d003      	beq.n	80084f8 <_dtoa_r+0xa10>
 80084f0:	4619      	mov	r1, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f93a 	bl	800876c <_Bfree>
 80084f8:	4639      	mov	r1, r7
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f936 	bl	800876c <_Bfree>
 8008500:	e63d      	b.n	800817e <_dtoa_r+0x696>
 8008502:	2600      	movs	r6, #0
 8008504:	4637      	mov	r7, r6
 8008506:	e7e2      	b.n	80084ce <_dtoa_r+0x9e6>
 8008508:	46bb      	mov	fp, r7
 800850a:	4637      	mov	r7, r6
 800850c:	e53b      	b.n	8007f86 <_dtoa_r+0x49e>
 800850e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008510:	f8cd 9010 	str.w	r9, [sp, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af12 	bne.w	800833e <_dtoa_r+0x856>
 800851a:	9d06      	ldr	r5, [sp, #24]
 800851c:	4631      	mov	r1, r6
 800851e:	4650      	mov	r0, sl
 8008520:	f7ff fa54 	bl	80079cc <quorem>
 8008524:	9b06      	ldr	r3, [sp, #24]
 8008526:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800852a:	f805 9b01 	strb.w	r9, [r5], #1
 800852e:	9a04      	ldr	r2, [sp, #16]
 8008530:	1aeb      	subs	r3, r5, r3
 8008532:	429a      	cmp	r2, r3
 8008534:	f300 8081 	bgt.w	800863a <_dtoa_r+0xb52>
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	2a01      	cmp	r2, #1
 800853c:	bfac      	ite	ge
 800853e:	189b      	addge	r3, r3, r2
 8008540:	3301      	addlt	r3, #1
 8008542:	4698      	mov	r8, r3
 8008544:	2300      	movs	r3, #0
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	4651      	mov	r1, sl
 800854a:	2201      	movs	r2, #1
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fa91 	bl	8008a74 <__lshift>
 8008552:	4631      	mov	r1, r6
 8008554:	4682      	mov	sl, r0
 8008556:	f000 fade 	bl	8008b16 <__mcmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	dc34      	bgt.n	80085c8 <_dtoa_r+0xae0>
 800855e:	d102      	bne.n	8008566 <_dtoa_r+0xa7e>
 8008560:	f019 0f01 	tst.w	r9, #1
 8008564:	d130      	bne.n	80085c8 <_dtoa_r+0xae0>
 8008566:	4645      	mov	r5, r8
 8008568:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800856c:	1e6a      	subs	r2, r5, #1
 800856e:	2b30      	cmp	r3, #48	; 0x30
 8008570:	d1b3      	bne.n	80084da <_dtoa_r+0x9f2>
 8008572:	4615      	mov	r5, r2
 8008574:	e7f8      	b.n	8008568 <_dtoa_r+0xa80>
 8008576:	4638      	mov	r0, r7
 8008578:	e6ff      	b.n	800837a <_dtoa_r+0x892>
 800857a:	2301      	movs	r3, #1
 800857c:	e722      	b.n	80083c4 <_dtoa_r+0x8dc>
 800857e:	9a02      	ldr	r2, [sp, #8]
 8008580:	2a00      	cmp	r2, #0
 8008582:	db04      	blt.n	800858e <_dtoa_r+0xaa6>
 8008584:	d128      	bne.n	80085d8 <_dtoa_r+0xaf0>
 8008586:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008588:	bb32      	cbnz	r2, 80085d8 <_dtoa_r+0xaf0>
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	bb22      	cbnz	r2, 80085d8 <_dtoa_r+0xaf0>
 800858e:	2b00      	cmp	r3, #0
 8008590:	f77f af32 	ble.w	80083f8 <_dtoa_r+0x910>
 8008594:	4651      	mov	r1, sl
 8008596:	2201      	movs	r2, #1
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fa6b 	bl	8008a74 <__lshift>
 800859e:	4631      	mov	r1, r6
 80085a0:	4682      	mov	sl, r0
 80085a2:	f000 fab8 	bl	8008b16 <__mcmp>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dc05      	bgt.n	80085b6 <_dtoa_r+0xace>
 80085aa:	f47f af25 	bne.w	80083f8 <_dtoa_r+0x910>
 80085ae:	f019 0f01 	tst.w	r9, #1
 80085b2:	f43f af21 	beq.w	80083f8 <_dtoa_r+0x910>
 80085b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085ba:	f47f af1b 	bne.w	80083f4 <_dtoa_r+0x90c>
 80085be:	2339      	movs	r3, #57	; 0x39
 80085c0:	f108 0801 	add.w	r8, r8, #1
 80085c4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80085c8:	4645      	mov	r5, r8
 80085ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ce:	1e6a      	subs	r2, r5, #1
 80085d0:	2b39      	cmp	r3, #57	; 0x39
 80085d2:	d03a      	beq.n	800864a <_dtoa_r+0xb62>
 80085d4:	3301      	adds	r3, #1
 80085d6:	e03f      	b.n	8008658 <_dtoa_r+0xb70>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f108 0501 	add.w	r5, r8, #1
 80085de:	dd05      	ble.n	80085ec <_dtoa_r+0xb04>
 80085e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085e4:	d0eb      	beq.n	80085be <_dtoa_r+0xad6>
 80085e6:	f109 0901 	add.w	r9, r9, #1
 80085ea:	e707      	b.n	80083fc <_dtoa_r+0x914>
 80085ec:	9b06      	ldr	r3, [sp, #24]
 80085ee:	9a04      	ldr	r2, [sp, #16]
 80085f0:	1aeb      	subs	r3, r5, r3
 80085f2:	4293      	cmp	r3, r2
 80085f4:	46a8      	mov	r8, r5
 80085f6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80085fa:	d0a5      	beq.n	8008548 <_dtoa_r+0xa60>
 80085fc:	4651      	mov	r1, sl
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f8c9 	bl	800879a <__multadd>
 8008608:	9b07      	ldr	r3, [sp, #28]
 800860a:	4682      	mov	sl, r0
 800860c:	42bb      	cmp	r3, r7
 800860e:	f04f 020a 	mov.w	r2, #10
 8008612:	f04f 0300 	mov.w	r3, #0
 8008616:	9907      	ldr	r1, [sp, #28]
 8008618:	4620      	mov	r0, r4
 800861a:	d104      	bne.n	8008626 <_dtoa_r+0xb3e>
 800861c:	f000 f8bd 	bl	800879a <__multadd>
 8008620:	9007      	str	r0, [sp, #28]
 8008622:	4607      	mov	r7, r0
 8008624:	e6b1      	b.n	800838a <_dtoa_r+0x8a2>
 8008626:	f000 f8b8 	bl	800879a <__multadd>
 800862a:	2300      	movs	r3, #0
 800862c:	9007      	str	r0, [sp, #28]
 800862e:	220a      	movs	r2, #10
 8008630:	4639      	mov	r1, r7
 8008632:	4620      	mov	r0, r4
 8008634:	f000 f8b1 	bl	800879a <__multadd>
 8008638:	e7f3      	b.n	8008622 <_dtoa_r+0xb3a>
 800863a:	4651      	mov	r1, sl
 800863c:	2300      	movs	r3, #0
 800863e:	220a      	movs	r2, #10
 8008640:	4620      	mov	r0, r4
 8008642:	f000 f8aa 	bl	800879a <__multadd>
 8008646:	4682      	mov	sl, r0
 8008648:	e768      	b.n	800851c <_dtoa_r+0xa34>
 800864a:	9b06      	ldr	r3, [sp, #24]
 800864c:	4293      	cmp	r3, r2
 800864e:	d105      	bne.n	800865c <_dtoa_r+0xb74>
 8008650:	2331      	movs	r3, #49	; 0x31
 8008652:	9a06      	ldr	r2, [sp, #24]
 8008654:	f10b 0b01 	add.w	fp, fp, #1
 8008658:	7013      	strb	r3, [r2, #0]
 800865a:	e73e      	b.n	80084da <_dtoa_r+0x9f2>
 800865c:	4615      	mov	r5, r2
 800865e:	e7b4      	b.n	80085ca <_dtoa_r+0xae2>
 8008660:	4b09      	ldr	r3, [pc, #36]	; (8008688 <_dtoa_r+0xba0>)
 8008662:	f7ff baa3 	b.w	8007bac <_dtoa_r+0xc4>
 8008666:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f aa7d 	bne.w	8007b68 <_dtoa_r+0x80>
 800866e:	4b07      	ldr	r3, [pc, #28]	; (800868c <_dtoa_r+0xba4>)
 8008670:	f7ff ba9c 	b.w	8007bac <_dtoa_r+0xc4>
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f73f af4f 	bgt.w	800851a <_dtoa_r+0xa32>
 800867c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800867e:	2b02      	cmp	r3, #2
 8008680:	f77f af4b 	ble.w	800851a <_dtoa_r+0xa32>
 8008684:	e714      	b.n	80084b0 <_dtoa_r+0x9c8>
 8008686:	bf00      	nop
 8008688:	0800931c 	.word	0x0800931c
 800868c:	08009340 	.word	0x08009340

08008690 <__locale_ctype_ptr_l>:
 8008690:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008694:	4770      	bx	lr
	...

08008698 <_localeconv_r>:
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <_localeconv_r+0x14>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a18      	ldr	r0, [r3, #32]
 800869e:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <_localeconv_r+0x18>)
 80086a0:	2800      	cmp	r0, #0
 80086a2:	bf08      	it	eq
 80086a4:	4618      	moveq	r0, r3
 80086a6:	30f0      	adds	r0, #240	; 0xf0
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	2000000c 	.word	0x2000000c
 80086b0:	20000070 	.word	0x20000070

080086b4 <malloc>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <malloc+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 bb4f 	b.w	8008d5c <_malloc_r>
 80086be:	bf00      	nop
 80086c0:	2000000c 	.word	0x2000000c

080086c4 <__ascii_mbtowc>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	b901      	cbnz	r1, 80086ca <__ascii_mbtowc+0x6>
 80086c8:	a901      	add	r1, sp, #4
 80086ca:	b142      	cbz	r2, 80086de <__ascii_mbtowc+0x1a>
 80086cc:	b14b      	cbz	r3, 80086e2 <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	1c10      	adds	r0, r2, #0
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
 80086de:	4610      	mov	r0, r2
 80086e0:	e7fb      	b.n	80086da <__ascii_mbtowc+0x16>
 80086e2:	f06f 0001 	mvn.w	r0, #1
 80086e6:	e7f8      	b.n	80086da <__ascii_mbtowc+0x16>

080086e8 <memchr>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	b2c9      	uxtb	r1, r1
 80086ec:	4402      	add	r2, r0
 80086ee:	4290      	cmp	r0, r2
 80086f0:	4603      	mov	r3, r0
 80086f2:	d101      	bne.n	80086f8 <memchr+0x10>
 80086f4:	2000      	movs	r0, #0
 80086f6:	bd10      	pop	{r4, pc}
 80086f8:	781c      	ldrb	r4, [r3, #0]
 80086fa:	3001      	adds	r0, #1
 80086fc:	428c      	cmp	r4, r1
 80086fe:	d1f6      	bne.n	80086ee <memchr+0x6>
 8008700:	4618      	mov	r0, r3
 8008702:	bd10      	pop	{r4, pc}

08008704 <_Balloc>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008708:	4604      	mov	r4, r0
 800870a:	460e      	mov	r6, r1
 800870c:	b93d      	cbnz	r5, 800871e <_Balloc+0x1a>
 800870e:	2010      	movs	r0, #16
 8008710:	f7ff ffd0 	bl	80086b4 <malloc>
 8008714:	6260      	str	r0, [r4, #36]	; 0x24
 8008716:	6045      	str	r5, [r0, #4]
 8008718:	6085      	str	r5, [r0, #8]
 800871a:	6005      	str	r5, [r0, #0]
 800871c:	60c5      	str	r5, [r0, #12]
 800871e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008720:	68eb      	ldr	r3, [r5, #12]
 8008722:	b183      	cbz	r3, 8008746 <_Balloc+0x42>
 8008724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800872c:	b9b8      	cbnz	r0, 800875e <_Balloc+0x5a>
 800872e:	2101      	movs	r1, #1
 8008730:	fa01 f506 	lsl.w	r5, r1, r6
 8008734:	1d6a      	adds	r2, r5, #5
 8008736:	0092      	lsls	r2, r2, #2
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fab4 	bl	8008ca6 <_calloc_r>
 800873e:	b160      	cbz	r0, 800875a <_Balloc+0x56>
 8008740:	6046      	str	r6, [r0, #4]
 8008742:	6085      	str	r5, [r0, #8]
 8008744:	e00e      	b.n	8008764 <_Balloc+0x60>
 8008746:	2221      	movs	r2, #33	; 0x21
 8008748:	2104      	movs	r1, #4
 800874a:	4620      	mov	r0, r4
 800874c:	f000 faab 	bl	8008ca6 <_calloc_r>
 8008750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008752:	60e8      	str	r0, [r5, #12]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e4      	bne.n	8008724 <_Balloc+0x20>
 800875a:	2000      	movs	r0, #0
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	6802      	ldr	r2, [r0, #0]
 8008760:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008764:	2300      	movs	r3, #0
 8008766:	6103      	str	r3, [r0, #16]
 8008768:	60c3      	str	r3, [r0, #12]
 800876a:	bd70      	pop	{r4, r5, r6, pc}

0800876c <_Bfree>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008770:	4606      	mov	r6, r0
 8008772:	460d      	mov	r5, r1
 8008774:	b93c      	cbnz	r4, 8008786 <_Bfree+0x1a>
 8008776:	2010      	movs	r0, #16
 8008778:	f7ff ff9c 	bl	80086b4 <malloc>
 800877c:	6270      	str	r0, [r6, #36]	; 0x24
 800877e:	6044      	str	r4, [r0, #4]
 8008780:	6084      	str	r4, [r0, #8]
 8008782:	6004      	str	r4, [r0, #0]
 8008784:	60c4      	str	r4, [r0, #12]
 8008786:	b13d      	cbz	r5, 8008798 <_Bfree+0x2c>
 8008788:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800878a:	686a      	ldr	r2, [r5, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008792:	6029      	str	r1, [r5, #0]
 8008794:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008798:	bd70      	pop	{r4, r5, r6, pc}

0800879a <__multadd>:
 800879a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	461f      	mov	r7, r3
 80087a0:	4606      	mov	r6, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	2300      	movs	r3, #0
 80087a6:	690d      	ldr	r5, [r1, #16]
 80087a8:	f101 0e14 	add.w	lr, r1, #20
 80087ac:	f8de 0000 	ldr.w	r0, [lr]
 80087b0:	3301      	adds	r3, #1
 80087b2:	b281      	uxth	r1, r0
 80087b4:	fb02 7101 	mla	r1, r2, r1, r7
 80087b8:	0c00      	lsrs	r0, r0, #16
 80087ba:	0c0f      	lsrs	r7, r1, #16
 80087bc:	fb02 7000 	mla	r0, r2, r0, r7
 80087c0:	b289      	uxth	r1, r1
 80087c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80087c6:	429d      	cmp	r5, r3
 80087c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80087cc:	f84e 1b04 	str.w	r1, [lr], #4
 80087d0:	dcec      	bgt.n	80087ac <__multadd+0x12>
 80087d2:	b1d7      	cbz	r7, 800880a <__multadd+0x70>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	429d      	cmp	r5, r3
 80087d8:	db12      	blt.n	8008800 <__multadd+0x66>
 80087da:	6861      	ldr	r1, [r4, #4]
 80087dc:	4630      	mov	r0, r6
 80087de:	3101      	adds	r1, #1
 80087e0:	f7ff ff90 	bl	8008704 <_Balloc>
 80087e4:	4680      	mov	r8, r0
 80087e6:	6922      	ldr	r2, [r4, #16]
 80087e8:	f104 010c 	add.w	r1, r4, #12
 80087ec:	3202      	adds	r2, #2
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	300c      	adds	r0, #12
 80087f2:	f7fe fbbf 	bl	8006f74 <memcpy>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff ffb7 	bl	800876c <_Bfree>
 80087fe:	4644      	mov	r4, r8
 8008800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008804:	3501      	adds	r5, #1
 8008806:	615f      	str	r7, [r3, #20]
 8008808:	6125      	str	r5, [r4, #16]
 800880a:	4620      	mov	r0, r4
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008810 <__hi0bits>:
 8008810:	0c02      	lsrs	r2, r0, #16
 8008812:	0412      	lsls	r2, r2, #16
 8008814:	4603      	mov	r3, r0
 8008816:	b9b2      	cbnz	r2, 8008846 <__hi0bits+0x36>
 8008818:	0403      	lsls	r3, r0, #16
 800881a:	2010      	movs	r0, #16
 800881c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008820:	bf04      	itt	eq
 8008822:	021b      	lsleq	r3, r3, #8
 8008824:	3008      	addeq	r0, #8
 8008826:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800882a:	bf04      	itt	eq
 800882c:	011b      	lsleq	r3, r3, #4
 800882e:	3004      	addeq	r0, #4
 8008830:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008834:	bf04      	itt	eq
 8008836:	009b      	lsleq	r3, r3, #2
 8008838:	3002      	addeq	r0, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	db06      	blt.n	800884c <__hi0bits+0x3c>
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	d503      	bpl.n	800884a <__hi0bits+0x3a>
 8008842:	3001      	adds	r0, #1
 8008844:	4770      	bx	lr
 8008846:	2000      	movs	r0, #0
 8008848:	e7e8      	b.n	800881c <__hi0bits+0xc>
 800884a:	2020      	movs	r0, #32
 800884c:	4770      	bx	lr

0800884e <__lo0bits>:
 800884e:	6803      	ldr	r3, [r0, #0]
 8008850:	4601      	mov	r1, r0
 8008852:	f013 0207 	ands.w	r2, r3, #7
 8008856:	d00b      	beq.n	8008870 <__lo0bits+0x22>
 8008858:	07da      	lsls	r2, r3, #31
 800885a:	d423      	bmi.n	80088a4 <__lo0bits+0x56>
 800885c:	0798      	lsls	r0, r3, #30
 800885e:	bf49      	itett	mi
 8008860:	085b      	lsrmi	r3, r3, #1
 8008862:	089b      	lsrpl	r3, r3, #2
 8008864:	2001      	movmi	r0, #1
 8008866:	600b      	strmi	r3, [r1, #0]
 8008868:	bf5c      	itt	pl
 800886a:	600b      	strpl	r3, [r1, #0]
 800886c:	2002      	movpl	r0, #2
 800886e:	4770      	bx	lr
 8008870:	b298      	uxth	r0, r3
 8008872:	b9a8      	cbnz	r0, 80088a0 <__lo0bits+0x52>
 8008874:	2010      	movs	r0, #16
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	f013 0fff 	tst.w	r3, #255	; 0xff
 800887c:	bf04      	itt	eq
 800887e:	0a1b      	lsreq	r3, r3, #8
 8008880:	3008      	addeq	r0, #8
 8008882:	071a      	lsls	r2, r3, #28
 8008884:	bf04      	itt	eq
 8008886:	091b      	lsreq	r3, r3, #4
 8008888:	3004      	addeq	r0, #4
 800888a:	079a      	lsls	r2, r3, #30
 800888c:	bf04      	itt	eq
 800888e:	089b      	lsreq	r3, r3, #2
 8008890:	3002      	addeq	r0, #2
 8008892:	07da      	lsls	r2, r3, #31
 8008894:	d402      	bmi.n	800889c <__lo0bits+0x4e>
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	d006      	beq.n	80088a8 <__lo0bits+0x5a>
 800889a:	3001      	adds	r0, #1
 800889c:	600b      	str	r3, [r1, #0]
 800889e:	4770      	bx	lr
 80088a0:	4610      	mov	r0, r2
 80088a2:	e7e9      	b.n	8008878 <__lo0bits+0x2a>
 80088a4:	2000      	movs	r0, #0
 80088a6:	4770      	bx	lr
 80088a8:	2020      	movs	r0, #32
 80088aa:	4770      	bx	lr

080088ac <__i2b>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	2101      	movs	r1, #1
 80088b2:	f7ff ff27 	bl	8008704 <_Balloc>
 80088b6:	2201      	movs	r2, #1
 80088b8:	6144      	str	r4, [r0, #20]
 80088ba:	6102      	str	r2, [r0, #16]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__multiply>:
 80088be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c2:	4614      	mov	r4, r2
 80088c4:	690a      	ldr	r2, [r1, #16]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	4689      	mov	r9, r1
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bfbe      	ittt	lt
 80088ce:	460b      	movlt	r3, r1
 80088d0:	46a1      	movlt	r9, r4
 80088d2:	461c      	movlt	r4, r3
 80088d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80088dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80088e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088e4:	eb07 060a 	add.w	r6, r7, sl
 80088e8:	429e      	cmp	r6, r3
 80088ea:	bfc8      	it	gt
 80088ec:	3101      	addgt	r1, #1
 80088ee:	f7ff ff09 	bl	8008704 <_Balloc>
 80088f2:	f100 0514 	add.w	r5, r0, #20
 80088f6:	462b      	mov	r3, r5
 80088f8:	2200      	movs	r2, #0
 80088fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088fe:	4543      	cmp	r3, r8
 8008900:	d316      	bcc.n	8008930 <__multiply+0x72>
 8008902:	f104 0214 	add.w	r2, r4, #20
 8008906:	f109 0114 	add.w	r1, r9, #20
 800890a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800890e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	9c01      	ldr	r4, [sp, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	4294      	cmp	r4, r2
 800891a:	d80c      	bhi.n	8008936 <__multiply+0x78>
 800891c:	2e00      	cmp	r6, #0
 800891e:	dd03      	ble.n	8008928 <__multiply+0x6a>
 8008920:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008924:	2b00      	cmp	r3, #0
 8008926:	d054      	beq.n	80089d2 <__multiply+0x114>
 8008928:	6106      	str	r6, [r0, #16]
 800892a:	b003      	add	sp, #12
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	f843 2b04 	str.w	r2, [r3], #4
 8008934:	e7e3      	b.n	80088fe <__multiply+0x40>
 8008936:	f8b3 a000 	ldrh.w	sl, [r3]
 800893a:	3204      	adds	r2, #4
 800893c:	f1ba 0f00 	cmp.w	sl, #0
 8008940:	d020      	beq.n	8008984 <__multiply+0xc6>
 8008942:	46ae      	mov	lr, r5
 8008944:	4689      	mov	r9, r1
 8008946:	f04f 0c00 	mov.w	ip, #0
 800894a:	f859 4b04 	ldr.w	r4, [r9], #4
 800894e:	f8be b000 	ldrh.w	fp, [lr]
 8008952:	b2a3      	uxth	r3, r4
 8008954:	fb0a b303 	mla	r3, sl, r3, fp
 8008958:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800895c:	f8de 4000 	ldr.w	r4, [lr]
 8008960:	4463      	add	r3, ip
 8008962:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008966:	fb0a c40b 	mla	r4, sl, fp, ip
 800896a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008974:	454f      	cmp	r7, r9
 8008976:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800897a:	f84e 3b04 	str.w	r3, [lr], #4
 800897e:	d8e4      	bhi.n	800894a <__multiply+0x8c>
 8008980:	f8ce c000 	str.w	ip, [lr]
 8008984:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	d01f      	beq.n	80089ce <__multiply+0x110>
 800898e:	46ae      	mov	lr, r5
 8008990:	468c      	mov	ip, r1
 8008992:	f04f 0a00 	mov.w	sl, #0
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	f8bc 4000 	ldrh.w	r4, [ip]
 800899c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	fb09 b404 	mla	r4, r9, r4, fp
 80089a6:	44a2      	add	sl, r4
 80089a8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80089ac:	f84e 3b04 	str.w	r3, [lr], #4
 80089b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089b4:	f8be 4000 	ldrh.w	r4, [lr]
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	fb09 4303 	mla	r3, r9, r3, r4
 80089be:	4567      	cmp	r7, ip
 80089c0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80089c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c8:	d8e6      	bhi.n	8008998 <__multiply+0xda>
 80089ca:	f8ce 3000 	str.w	r3, [lr]
 80089ce:	3504      	adds	r5, #4
 80089d0:	e7a0      	b.n	8008914 <__multiply+0x56>
 80089d2:	3e01      	subs	r6, #1
 80089d4:	e7a2      	b.n	800891c <__multiply+0x5e>
	...

080089d8 <__pow5mult>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	4615      	mov	r5, r2
 80089de:	f012 0203 	ands.w	r2, r2, #3
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	d007      	beq.n	80089f8 <__pow5mult+0x20>
 80089e8:	4c21      	ldr	r4, [pc, #132]	; (8008a70 <__pow5mult+0x98>)
 80089ea:	3a01      	subs	r2, #1
 80089ec:	2300      	movs	r3, #0
 80089ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089f2:	f7ff fed2 	bl	800879a <__multadd>
 80089f6:	4607      	mov	r7, r0
 80089f8:	10ad      	asrs	r5, r5, #2
 80089fa:	d035      	beq.n	8008a68 <__pow5mult+0x90>
 80089fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089fe:	b93c      	cbnz	r4, 8008a10 <__pow5mult+0x38>
 8008a00:	2010      	movs	r0, #16
 8008a02:	f7ff fe57 	bl	80086b4 <malloc>
 8008a06:	6270      	str	r0, [r6, #36]	; 0x24
 8008a08:	6044      	str	r4, [r0, #4]
 8008a0a:	6084      	str	r4, [r0, #8]
 8008a0c:	6004      	str	r4, [r0, #0]
 8008a0e:	60c4      	str	r4, [r0, #12]
 8008a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a18:	b94c      	cbnz	r4, 8008a2e <__pow5mult+0x56>
 8008a1a:	f240 2171 	movw	r1, #625	; 0x271
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ff44 	bl	80088ac <__i2b>
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	f04f 0800 	mov.w	r8, #0
 8008a32:	07eb      	lsls	r3, r5, #31
 8008a34:	d50a      	bpl.n	8008a4c <__pow5mult+0x74>
 8008a36:	4639      	mov	r1, r7
 8008a38:	4622      	mov	r2, r4
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7ff ff3f 	bl	80088be <__multiply>
 8008a40:	4681      	mov	r9, r0
 8008a42:	4639      	mov	r1, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff fe91 	bl	800876c <_Bfree>
 8008a4a:	464f      	mov	r7, r9
 8008a4c:	106d      	asrs	r5, r5, #1
 8008a4e:	d00b      	beq.n	8008a68 <__pow5mult+0x90>
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	b938      	cbnz	r0, 8008a64 <__pow5mult+0x8c>
 8008a54:	4622      	mov	r2, r4
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff ff30 	bl	80088be <__multiply>
 8008a5e:	6020      	str	r0, [r4, #0]
 8008a60:	f8c0 8000 	str.w	r8, [r0]
 8008a64:	4604      	mov	r4, r0
 8008a66:	e7e4      	b.n	8008a32 <__pow5mult+0x5a>
 8008a68:	4638      	mov	r0, r7
 8008a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	bf00      	nop
 8008a70:	08009448 	.word	0x08009448

08008a74 <__lshift>:
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a84:	eb0a 0903 	add.w	r9, sl, r3
 8008a88:	6849      	ldr	r1, [r1, #4]
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	f109 0501 	add.w	r5, r9, #1
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	db31      	blt.n	8008af8 <__lshift+0x84>
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff fe35 	bl	8008704 <_Balloc>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	f100 0314 	add.w	r3, r0, #20
 8008aa4:	4552      	cmp	r2, sl
 8008aa6:	db2a      	blt.n	8008afe <__lshift+0x8a>
 8008aa8:	6920      	ldr	r0, [r4, #16]
 8008aaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aae:	f104 0114 	add.w	r1, r4, #20
 8008ab2:	f016 021f 	ands.w	r2, r6, #31
 8008ab6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008aba:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008abe:	d022      	beq.n	8008b06 <__lshift+0x92>
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8008ac6:	680e      	ldr	r6, [r1, #0]
 8008ac8:	4096      	lsls	r6, r2
 8008aca:	4330      	orrs	r0, r6
 8008acc:	f843 0b04 	str.w	r0, [r3], #4
 8008ad0:	f851 0b04 	ldr.w	r0, [r1], #4
 8008ad4:	458e      	cmp	lr, r1
 8008ad6:	fa20 f00c 	lsr.w	r0, r0, ip
 8008ada:	d8f4      	bhi.n	8008ac6 <__lshift+0x52>
 8008adc:	6018      	str	r0, [r3, #0]
 8008ade:	b108      	cbz	r0, 8008ae4 <__lshift+0x70>
 8008ae0:	f109 0502 	add.w	r5, r9, #2
 8008ae4:	3d01      	subs	r5, #1
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	f8c8 5010 	str.w	r5, [r8, #16]
 8008aec:	4621      	mov	r1, r4
 8008aee:	f7ff fe3d 	bl	800876c <_Bfree>
 8008af2:	4640      	mov	r0, r8
 8008af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af8:	3101      	adds	r1, #1
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	e7c8      	b.n	8008a90 <__lshift+0x1c>
 8008afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008b02:	3201      	adds	r2, #1
 8008b04:	e7ce      	b.n	8008aa4 <__lshift+0x30>
 8008b06:	3b04      	subs	r3, #4
 8008b08:	f851 2b04 	ldr.w	r2, [r1], #4
 8008b0c:	458e      	cmp	lr, r1
 8008b0e:	f843 2f04 	str.w	r2, [r3, #4]!
 8008b12:	d8f9      	bhi.n	8008b08 <__lshift+0x94>
 8008b14:	e7e6      	b.n	8008ae4 <__lshift+0x70>

08008b16 <__mcmp>:
 8008b16:	6903      	ldr	r3, [r0, #16]
 8008b18:	690a      	ldr	r2, [r1, #16]
 8008b1a:	b530      	push	{r4, r5, lr}
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	d10c      	bne.n	8008b3a <__mcmp+0x24>
 8008b20:	0092      	lsls	r2, r2, #2
 8008b22:	3014      	adds	r0, #20
 8008b24:	3114      	adds	r1, #20
 8008b26:	1884      	adds	r4, r0, r2
 8008b28:	4411      	add	r1, r2
 8008b2a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b32:	4295      	cmp	r5, r2
 8008b34:	d003      	beq.n	8008b3e <__mcmp+0x28>
 8008b36:	d305      	bcc.n	8008b44 <__mcmp+0x2e>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	bd30      	pop	{r4, r5, pc}
 8008b3e:	42a0      	cmp	r0, r4
 8008b40:	d3f3      	bcc.n	8008b2a <__mcmp+0x14>
 8008b42:	e7fa      	b.n	8008b3a <__mcmp+0x24>
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295
 8008b48:	e7f7      	b.n	8008b3a <__mcmp+0x24>

08008b4a <__mdiff>:
 8008b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4e:	460d      	mov	r5, r1
 8008b50:	4607      	mov	r7, r0
 8008b52:	4611      	mov	r1, r2
 8008b54:	4628      	mov	r0, r5
 8008b56:	4614      	mov	r4, r2
 8008b58:	f7ff ffdd 	bl	8008b16 <__mcmp>
 8008b5c:	1e06      	subs	r6, r0, #0
 8008b5e:	d108      	bne.n	8008b72 <__mdiff+0x28>
 8008b60:	4631      	mov	r1, r6
 8008b62:	4638      	mov	r0, r7
 8008b64:	f7ff fdce 	bl	8008704 <_Balloc>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6146      	str	r6, [r0, #20]
 8008b6c:	6103      	str	r3, [r0, #16]
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	bfa4      	itt	ge
 8008b74:	4623      	movge	r3, r4
 8008b76:	462c      	movge	r4, r5
 8008b78:	4638      	mov	r0, r7
 8008b7a:	6861      	ldr	r1, [r4, #4]
 8008b7c:	bfa6      	itte	ge
 8008b7e:	461d      	movge	r5, r3
 8008b80:	2600      	movge	r6, #0
 8008b82:	2601      	movlt	r6, #1
 8008b84:	f7ff fdbe 	bl	8008704 <_Balloc>
 8008b88:	f04f 0c00 	mov.w	ip, #0
 8008b8c:	60c6      	str	r6, [r0, #12]
 8008b8e:	692b      	ldr	r3, [r5, #16]
 8008b90:	6926      	ldr	r6, [r4, #16]
 8008b92:	f104 0214 	add.w	r2, r4, #20
 8008b96:	f105 0914 	add.w	r9, r5, #20
 8008b9a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b9e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ba2:	f100 0114 	add.w	r1, r0, #20
 8008ba6:	f852 ab04 	ldr.w	sl, [r2], #4
 8008baa:	f859 5b04 	ldr.w	r5, [r9], #4
 8008bae:	fa1f f38a 	uxth.w	r3, sl
 8008bb2:	4463      	add	r3, ip
 8008bb4:	b2ac      	uxth	r4, r5
 8008bb6:	1b1b      	subs	r3, r3, r4
 8008bb8:	0c2c      	lsrs	r4, r5, #16
 8008bba:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008bbe:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008bc8:	45c8      	cmp	r8, r9
 8008bca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008bce:	4696      	mov	lr, r2
 8008bd0:	f841 4b04 	str.w	r4, [r1], #4
 8008bd4:	d8e7      	bhi.n	8008ba6 <__mdiff+0x5c>
 8008bd6:	45be      	cmp	lr, r7
 8008bd8:	d305      	bcc.n	8008be6 <__mdiff+0x9c>
 8008bda:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008bde:	b18b      	cbz	r3, 8008c04 <__mdiff+0xba>
 8008be0:	6106      	str	r6, [r0, #16]
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bea:	b2a2      	uxth	r2, r4
 8008bec:	4462      	add	r2, ip
 8008bee:	1413      	asrs	r3, r2, #16
 8008bf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008bfa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008bfe:	f841 2b04 	str.w	r2, [r1], #4
 8008c02:	e7e8      	b.n	8008bd6 <__mdiff+0x8c>
 8008c04:	3e01      	subs	r6, #1
 8008c06:	e7e8      	b.n	8008bda <__mdiff+0x90>

08008c08 <__d2b>:
 8008c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c0c:	461c      	mov	r4, r3
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4690      	mov	r8, r2
 8008c12:	9e08      	ldr	r6, [sp, #32]
 8008c14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c16:	f7ff fd75 	bl	8008704 <_Balloc>
 8008c1a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008c1e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008c22:	4607      	mov	r7, r0
 8008c24:	bb34      	cbnz	r4, 8008c74 <__d2b+0x6c>
 8008c26:	9201      	str	r2, [sp, #4]
 8008c28:	f1b8 0f00 	cmp.w	r8, #0
 8008c2c:	d027      	beq.n	8008c7e <__d2b+0x76>
 8008c2e:	a802      	add	r0, sp, #8
 8008c30:	f840 8d08 	str.w	r8, [r0, #-8]!
 8008c34:	f7ff fe0b 	bl	800884e <__lo0bits>
 8008c38:	9900      	ldr	r1, [sp, #0]
 8008c3a:	b1f0      	cbz	r0, 8008c7a <__d2b+0x72>
 8008c3c:	9a01      	ldr	r2, [sp, #4]
 8008c3e:	f1c0 0320 	rsb	r3, r0, #32
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	430b      	orrs	r3, r1
 8008c48:	40c2      	lsrs	r2, r0
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	9201      	str	r2, [sp, #4]
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bf14      	ite	ne
 8008c54:	2102      	movne	r1, #2
 8008c56:	2101      	moveq	r1, #1
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	6139      	str	r1, [r7, #16]
 8008c5c:	b1c4      	cbz	r4, 8008c90 <__d2b+0x88>
 8008c5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c62:	4404      	add	r4, r0
 8008c64:	6034      	str	r4, [r6, #0]
 8008c66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c6a:	6028      	str	r0, [r5, #0]
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	b002      	add	sp, #8
 8008c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c74:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c78:	e7d5      	b.n	8008c26 <__d2b+0x1e>
 8008c7a:	6179      	str	r1, [r7, #20]
 8008c7c:	e7e7      	b.n	8008c4e <__d2b+0x46>
 8008c7e:	a801      	add	r0, sp, #4
 8008c80:	f7ff fde5 	bl	800884e <__lo0bits>
 8008c84:	2101      	movs	r1, #1
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	6139      	str	r1, [r7, #16]
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	3020      	adds	r0, #32
 8008c8e:	e7e5      	b.n	8008c5c <__d2b+0x54>
 8008c90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c94:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	6918      	ldr	r0, [r3, #16]
 8008c9c:	f7ff fdb8 	bl	8008810 <__hi0bits>
 8008ca0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008ca4:	e7e1      	b.n	8008c6a <__d2b+0x62>

08008ca6 <_calloc_r>:
 8008ca6:	b538      	push	{r3, r4, r5, lr}
 8008ca8:	fb02 f401 	mul.w	r4, r2, r1
 8008cac:	4621      	mov	r1, r4
 8008cae:	f000 f855 	bl	8008d5c <_malloc_r>
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	b118      	cbz	r0, 8008cbe <_calloc_r+0x18>
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f7fe f966 	bl	8006f8a <memset>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08008cc4 <_free_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d043      	beq.n	8008d54 <_free_r+0x90>
 8008ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd0:	1f0c      	subs	r4, r1, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bfb8      	it	lt
 8008cd6:	18e4      	addlt	r4, r4, r3
 8008cd8:	f000 fa25 	bl	8009126 <__malloc_lock>
 8008cdc:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <_free_r+0x94>)
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	b933      	cbnz	r3, 8008cf2 <_free_r+0x2e>
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	6014      	str	r4, [r2, #0]
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cee:	f000 ba1b 	b.w	8009128 <__malloc_unlock>
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	d90b      	bls.n	8008d0e <_free_r+0x4a>
 8008cf6:	6821      	ldr	r1, [r4, #0]
 8008cf8:	1862      	adds	r2, r4, r1
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bf01      	itttt	eq
 8008cfe:	681a      	ldreq	r2, [r3, #0]
 8008d00:	685b      	ldreq	r3, [r3, #4]
 8008d02:	1852      	addeq	r2, r2, r1
 8008d04:	6022      	streq	r2, [r4, #0]
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	e7ed      	b.n	8008ce8 <_free_r+0x24>
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	b10a      	cbz	r2, 8008d16 <_free_r+0x52>
 8008d12:	42a2      	cmp	r2, r4
 8008d14:	d9fa      	bls.n	8008d0c <_free_r+0x48>
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	1858      	adds	r0, r3, r1
 8008d1a:	42a0      	cmp	r0, r4
 8008d1c:	d10b      	bne.n	8008d36 <_free_r+0x72>
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	4401      	add	r1, r0
 8008d22:	1858      	adds	r0, r3, r1
 8008d24:	4282      	cmp	r2, r0
 8008d26:	6019      	str	r1, [r3, #0]
 8008d28:	d1de      	bne.n	8008ce8 <_free_r+0x24>
 8008d2a:	6810      	ldr	r0, [r2, #0]
 8008d2c:	6852      	ldr	r2, [r2, #4]
 8008d2e:	4401      	add	r1, r0
 8008d30:	6019      	str	r1, [r3, #0]
 8008d32:	605a      	str	r2, [r3, #4]
 8008d34:	e7d8      	b.n	8008ce8 <_free_r+0x24>
 8008d36:	d902      	bls.n	8008d3e <_free_r+0x7a>
 8008d38:	230c      	movs	r3, #12
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	e7d4      	b.n	8008ce8 <_free_r+0x24>
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	1821      	adds	r1, r4, r0
 8008d42:	428a      	cmp	r2, r1
 8008d44:	bf01      	itttt	eq
 8008d46:	6811      	ldreq	r1, [r2, #0]
 8008d48:	6852      	ldreq	r2, [r2, #4]
 8008d4a:	1809      	addeq	r1, r1, r0
 8008d4c:	6021      	streq	r1, [r4, #0]
 8008d4e:	6062      	str	r2, [r4, #4]
 8008d50:	605c      	str	r4, [r3, #4]
 8008d52:	e7c9      	b.n	8008ce8 <_free_r+0x24>
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	bf00      	nop
 8008d58:	20000210 	.word	0x20000210

08008d5c <_malloc_r>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	1ccd      	adds	r5, r1, #3
 8008d60:	f025 0503 	bic.w	r5, r5, #3
 8008d64:	3508      	adds	r5, #8
 8008d66:	2d0c      	cmp	r5, #12
 8008d68:	bf38      	it	cc
 8008d6a:	250c      	movcc	r5, #12
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	4606      	mov	r6, r0
 8008d70:	db01      	blt.n	8008d76 <_malloc_r+0x1a>
 8008d72:	42a9      	cmp	r1, r5
 8008d74:	d903      	bls.n	8008d7e <_malloc_r+0x22>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	f000 f9d2 	bl	8009126 <__malloc_lock>
 8008d82:	4a23      	ldr	r2, [pc, #140]	; (8008e10 <_malloc_r+0xb4>)
 8008d84:	6814      	ldr	r4, [r2, #0]
 8008d86:	4621      	mov	r1, r4
 8008d88:	b991      	cbnz	r1, 8008db0 <_malloc_r+0x54>
 8008d8a:	4c22      	ldr	r4, [pc, #136]	; (8008e14 <_malloc_r+0xb8>)
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	b91b      	cbnz	r3, 8008d98 <_malloc_r+0x3c>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f000 f991 	bl	80090b8 <_sbrk_r>
 8008d96:	6020      	str	r0, [r4, #0]
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f98c 	bl	80090b8 <_sbrk_r>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d126      	bne.n	8008df2 <_malloc_r+0x96>
 8008da4:	230c      	movs	r3, #12
 8008da6:	4630      	mov	r0, r6
 8008da8:	6033      	str	r3, [r6, #0]
 8008daa:	f000 f9bd 	bl	8009128 <__malloc_unlock>
 8008dae:	e7e4      	b.n	8008d7a <_malloc_r+0x1e>
 8008db0:	680b      	ldr	r3, [r1, #0]
 8008db2:	1b5b      	subs	r3, r3, r5
 8008db4:	d41a      	bmi.n	8008dec <_malloc_r+0x90>
 8008db6:	2b0b      	cmp	r3, #11
 8008db8:	d90f      	bls.n	8008dda <_malloc_r+0x7e>
 8008dba:	600b      	str	r3, [r1, #0]
 8008dbc:	18cc      	adds	r4, r1, r3
 8008dbe:	50cd      	str	r5, [r1, r3]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f000 f9b1 	bl	8009128 <__malloc_unlock>
 8008dc6:	f104 000b 	add.w	r0, r4, #11
 8008dca:	1d23      	adds	r3, r4, #4
 8008dcc:	f020 0007 	bic.w	r0, r0, #7
 8008dd0:	1ac3      	subs	r3, r0, r3
 8008dd2:	d01b      	beq.n	8008e0c <_malloc_r+0xb0>
 8008dd4:	425a      	negs	r2, r3
 8008dd6:	50e2      	str	r2, [r4, r3]
 8008dd8:	bd70      	pop	{r4, r5, r6, pc}
 8008dda:	428c      	cmp	r4, r1
 8008ddc:	bf0b      	itete	eq
 8008dde:	6863      	ldreq	r3, [r4, #4]
 8008de0:	684b      	ldrne	r3, [r1, #4]
 8008de2:	6013      	streq	r3, [r2, #0]
 8008de4:	6063      	strne	r3, [r4, #4]
 8008de6:	bf18      	it	ne
 8008de8:	460c      	movne	r4, r1
 8008dea:	e7e9      	b.n	8008dc0 <_malloc_r+0x64>
 8008dec:	460c      	mov	r4, r1
 8008dee:	6849      	ldr	r1, [r1, #4]
 8008df0:	e7ca      	b.n	8008d88 <_malloc_r+0x2c>
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d005      	beq.n	8008e08 <_malloc_r+0xac>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 f95a 	bl	80090b8 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d0cd      	beq.n	8008da4 <_malloc_r+0x48>
 8008e08:	6025      	str	r5, [r4, #0]
 8008e0a:	e7d9      	b.n	8008dc0 <_malloc_r+0x64>
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000210 	.word	0x20000210
 8008e14:	20000214 	.word	0x20000214

08008e18 <__ssputs_r>:
 8008e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1c:	688e      	ldr	r6, [r1, #8]
 8008e1e:	4682      	mov	sl, r0
 8008e20:	429e      	cmp	r6, r3
 8008e22:	460c      	mov	r4, r1
 8008e24:	4691      	mov	r9, r2
 8008e26:	4698      	mov	r8, r3
 8008e28:	d835      	bhi.n	8008e96 <__ssputs_r+0x7e>
 8008e2a:	898a      	ldrh	r2, [r1, #12]
 8008e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e30:	d031      	beq.n	8008e96 <__ssputs_r+0x7e>
 8008e32:	2302      	movs	r3, #2
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	6909      	ldr	r1, [r1, #16]
 8008e38:	1a6f      	subs	r7, r5, r1
 8008e3a:	6965      	ldr	r5, [r4, #20]
 8008e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e44:	f108 0301 	add.w	r3, r8, #1
 8008e48:	443b      	add	r3, r7
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	bf38      	it	cc
 8008e4e:	461d      	movcc	r5, r3
 8008e50:	0553      	lsls	r3, r2, #21
 8008e52:	d531      	bpl.n	8008eb8 <__ssputs_r+0xa0>
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7ff ff81 	bl	8008d5c <_malloc_r>
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	b950      	cbnz	r0, 8008e74 <__ssputs_r+0x5c>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	f8ca 3000 	str.w	r3, [sl]
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e74:	463a      	mov	r2, r7
 8008e76:	6921      	ldr	r1, [r4, #16]
 8008e78:	f7fe f87c 	bl	8006f74 <memcpy>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	6126      	str	r6, [r4, #16]
 8008e8a:	443e      	add	r6, r7
 8008e8c:	6026      	str	r6, [r4, #0]
 8008e8e:	4646      	mov	r6, r8
 8008e90:	6165      	str	r5, [r4, #20]
 8008e92:	1bed      	subs	r5, r5, r7
 8008e94:	60a5      	str	r5, [r4, #8]
 8008e96:	4546      	cmp	r6, r8
 8008e98:	bf28      	it	cs
 8008e9a:	4646      	movcs	r6, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	f000 f926 	bl	80090f2 <memmove>
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	1b9b      	subs	r3, r3, r6
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	441e      	add	r6, r3
 8008eb2:	6026      	str	r6, [r4, #0]
 8008eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb8:	462a      	mov	r2, r5
 8008eba:	f000 f936 	bl	800912a <_realloc_r>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1e1      	bne.n	8008e88 <__ssputs_r+0x70>
 8008ec4:	6921      	ldr	r1, [r4, #16]
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	f7ff fefc 	bl	8008cc4 <_free_r>
 8008ecc:	e7c7      	b.n	8008e5e <__ssputs_r+0x46>
	...

08008ed0 <_svfiprintf_r>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	b09d      	sub	sp, #116	; 0x74
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	898b      	ldrh	r3, [r1, #12]
 8008eda:	4680      	mov	r8, r0
 8008edc:	061c      	lsls	r4, r3, #24
 8008ede:	460d      	mov	r5, r1
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	d50f      	bpl.n	8008f04 <_svfiprintf_r+0x34>
 8008ee4:	690b      	ldr	r3, [r1, #16]
 8008ee6:	b96b      	cbnz	r3, 8008f04 <_svfiprintf_r+0x34>
 8008ee8:	2140      	movs	r1, #64	; 0x40
 8008eea:	f7ff ff37 	bl	8008d5c <_malloc_r>
 8008eee:	6028      	str	r0, [r5, #0]
 8008ef0:	6128      	str	r0, [r5, #16]
 8008ef2:	b928      	cbnz	r0, 8008f00 <_svfiprintf_r+0x30>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	f8c8 3000 	str.w	r3, [r8]
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	e0c4      	b.n	800908a <_svfiprintf_r+0x1ba>
 8008f00:	2340      	movs	r3, #64	; 0x40
 8008f02:	616b      	str	r3, [r5, #20]
 8008f04:	2300      	movs	r3, #0
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	2320      	movs	r3, #32
 8008f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f0e:	2330      	movs	r3, #48	; 0x30
 8008f10:	f04f 0b01 	mov.w	fp, #1
 8008f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f18:	4637      	mov	r7, r6
 8008f1a:	463c      	mov	r4, r7
 8008f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d13c      	bne.n	8008f9e <_svfiprintf_r+0xce>
 8008f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f28:	d00b      	beq.n	8008f42 <_svfiprintf_r+0x72>
 8008f2a:	4653      	mov	r3, sl
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4640      	mov	r0, r8
 8008f32:	f7ff ff71 	bl	8008e18 <__ssputs_r>
 8008f36:	3001      	adds	r0, #1
 8008f38:	f000 80a2 	beq.w	8009080 <_svfiprintf_r+0x1b0>
 8008f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3e:	4453      	add	r3, sl
 8008f40:	9309      	str	r3, [sp, #36]	; 0x24
 8008f42:	783b      	ldrb	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 809b 	beq.w	8009080 <_svfiprintf_r+0x1b0>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	9307      	str	r3, [sp, #28]
 8008f54:	9205      	str	r2, [sp, #20]
 8008f56:	9306      	str	r3, [sp, #24]
 8008f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5e:	2205      	movs	r2, #5
 8008f60:	7821      	ldrb	r1, [r4, #0]
 8008f62:	4850      	ldr	r0, [pc, #320]	; (80090a4 <_svfiprintf_r+0x1d4>)
 8008f64:	f7ff fbc0 	bl	80086e8 <memchr>
 8008f68:	1c67      	adds	r7, r4, #1
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	b9d8      	cbnz	r0, 8008fa6 <_svfiprintf_r+0xd6>
 8008f6e:	06d9      	lsls	r1, r3, #27
 8008f70:	bf44      	itt	mi
 8008f72:	2220      	movmi	r2, #32
 8008f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f78:	071a      	lsls	r2, r3, #28
 8008f7a:	bf44      	itt	mi
 8008f7c:	222b      	movmi	r2, #43	; 0x2b
 8008f7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f82:	7822      	ldrb	r2, [r4, #0]
 8008f84:	2a2a      	cmp	r2, #42	; 0x2a
 8008f86:	d016      	beq.n	8008fb6 <_svfiprintf_r+0xe6>
 8008f88:	2100      	movs	r1, #0
 8008f8a:	200a      	movs	r0, #10
 8008f8c:	9a07      	ldr	r2, [sp, #28]
 8008f8e:	4627      	mov	r7, r4
 8008f90:	783b      	ldrb	r3, [r7, #0]
 8008f92:	3401      	adds	r4, #1
 8008f94:	3b30      	subs	r3, #48	; 0x30
 8008f96:	2b09      	cmp	r3, #9
 8008f98:	d950      	bls.n	800903c <_svfiprintf_r+0x16c>
 8008f9a:	b1c9      	cbz	r1, 8008fd0 <_svfiprintf_r+0x100>
 8008f9c:	e011      	b.n	8008fc2 <_svfiprintf_r+0xf2>
 8008f9e:	2b25      	cmp	r3, #37	; 0x25
 8008fa0:	d0c0      	beq.n	8008f24 <_svfiprintf_r+0x54>
 8008fa2:	4627      	mov	r7, r4
 8008fa4:	e7b9      	b.n	8008f1a <_svfiprintf_r+0x4a>
 8008fa6:	4a3f      	ldr	r2, [pc, #252]	; (80090a4 <_svfiprintf_r+0x1d4>)
 8008fa8:	463c      	mov	r4, r7
 8008faa:	1a80      	subs	r0, r0, r2
 8008fac:	fa0b f000 	lsl.w	r0, fp, r0
 8008fb0:	4318      	orrs	r0, r3
 8008fb2:	9004      	str	r0, [sp, #16]
 8008fb4:	e7d3      	b.n	8008f5e <_svfiprintf_r+0x8e>
 8008fb6:	9a03      	ldr	r2, [sp, #12]
 8008fb8:	1d11      	adds	r1, r2, #4
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	9103      	str	r1, [sp, #12]
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	db01      	blt.n	8008fc6 <_svfiprintf_r+0xf6>
 8008fc2:	9207      	str	r2, [sp, #28]
 8008fc4:	e004      	b.n	8008fd0 <_svfiprintf_r+0x100>
 8008fc6:	4252      	negs	r2, r2
 8008fc8:	f043 0302 	orr.w	r3, r3, #2
 8008fcc:	9207      	str	r2, [sp, #28]
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	783b      	ldrb	r3, [r7, #0]
 8008fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd4:	d10d      	bne.n	8008ff2 <_svfiprintf_r+0x122>
 8008fd6:	787b      	ldrb	r3, [r7, #1]
 8008fd8:	1c79      	adds	r1, r7, #1
 8008fda:	2b2a      	cmp	r3, #42	; 0x2a
 8008fdc:	d132      	bne.n	8009044 <_svfiprintf_r+0x174>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	3702      	adds	r7, #2
 8008fe2:	1d1a      	adds	r2, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9203      	str	r2, [sp, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfb8      	it	lt
 8008fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	4c2d      	ldr	r4, [pc, #180]	; (80090a8 <_svfiprintf_r+0x1d8>)
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	7839      	ldrb	r1, [r7, #0]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7ff fb75 	bl	80086e8 <memchr>
 8008ffe:	b138      	cbz	r0, 8009010 <_svfiprintf_r+0x140>
 8009000:	2340      	movs	r3, #64	; 0x40
 8009002:	1b00      	subs	r0, r0, r4
 8009004:	fa03 f000 	lsl.w	r0, r3, r0
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	3701      	adds	r7, #1
 800900c:	4303      	orrs	r3, r0
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	7839      	ldrb	r1, [r7, #0]
 8009012:	2206      	movs	r2, #6
 8009014:	4825      	ldr	r0, [pc, #148]	; (80090ac <_svfiprintf_r+0x1dc>)
 8009016:	1c7e      	adds	r6, r7, #1
 8009018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901c:	f7ff fb64 	bl	80086e8 <memchr>
 8009020:	2800      	cmp	r0, #0
 8009022:	d035      	beq.n	8009090 <_svfiprintf_r+0x1c0>
 8009024:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <_svfiprintf_r+0x1e0>)
 8009026:	b9fb      	cbnz	r3, 8009068 <_svfiprintf_r+0x198>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	3307      	adds	r3, #7
 800902c:	f023 0307 	bic.w	r3, r3, #7
 8009030:	3308      	adds	r3, #8
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	444b      	add	r3, r9
 8009038:	9309      	str	r3, [sp, #36]	; 0x24
 800903a:	e76d      	b.n	8008f18 <_svfiprintf_r+0x48>
 800903c:	fb00 3202 	mla	r2, r0, r2, r3
 8009040:	2101      	movs	r1, #1
 8009042:	e7a4      	b.n	8008f8e <_svfiprintf_r+0xbe>
 8009044:	2300      	movs	r3, #0
 8009046:	240a      	movs	r4, #10
 8009048:	4618      	mov	r0, r3
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	460f      	mov	r7, r1
 800904e:	783a      	ldrb	r2, [r7, #0]
 8009050:	3101      	adds	r1, #1
 8009052:	3a30      	subs	r2, #48	; 0x30
 8009054:	2a09      	cmp	r2, #9
 8009056:	d903      	bls.n	8009060 <_svfiprintf_r+0x190>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0ca      	beq.n	8008ff2 <_svfiprintf_r+0x122>
 800905c:	9005      	str	r0, [sp, #20]
 800905e:	e7c8      	b.n	8008ff2 <_svfiprintf_r+0x122>
 8009060:	fb04 2000 	mla	r0, r4, r0, r2
 8009064:	2301      	movs	r3, #1
 8009066:	e7f1      	b.n	800904c <_svfiprintf_r+0x17c>
 8009068:	ab03      	add	r3, sp, #12
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	462a      	mov	r2, r5
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <_svfiprintf_r+0x1e4>)
 8009070:	a904      	add	r1, sp, #16
 8009072:	4640      	mov	r0, r8
 8009074:	f7fe f822 	bl	80070bc <_printf_float>
 8009078:	f1b0 3fff 	cmp.w	r0, #4294967295
 800907c:	4681      	mov	r9, r0
 800907e:	d1d9      	bne.n	8009034 <_svfiprintf_r+0x164>
 8009080:	89ab      	ldrh	r3, [r5, #12]
 8009082:	065b      	lsls	r3, r3, #25
 8009084:	f53f af39 	bmi.w	8008efa <_svfiprintf_r+0x2a>
 8009088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908a:	b01d      	add	sp, #116	; 0x74
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	ab03      	add	r3, sp, #12
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	462a      	mov	r2, r5
 8009096:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <_svfiprintf_r+0x1e4>)
 8009098:	a904      	add	r1, sp, #16
 800909a:	4640      	mov	r0, r8
 800909c:	f7fe fabe 	bl	800761c <_printf_i>
 80090a0:	e7ea      	b.n	8009078 <_svfiprintf_r+0x1a8>
 80090a2:	bf00      	nop
 80090a4:	08009454 	.word	0x08009454
 80090a8:	0800945a 	.word	0x0800945a
 80090ac:	0800945e 	.word	0x0800945e
 80090b0:	080070bd 	.word	0x080070bd
 80090b4:	08008e19 	.word	0x08008e19

080090b8 <_sbrk_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	2300      	movs	r3, #0
 80090bc:	4c05      	ldr	r4, [pc, #20]	; (80090d4 <_sbrk_r+0x1c>)
 80090be:	4605      	mov	r5, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	f7f8 fdf2 	bl	8001cac <_sbrk>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_sbrk_r+0x1a>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_sbrk_r+0x1a>
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	200007d0 	.word	0x200007d0

080090d8 <__ascii_wctomb>:
 80090d8:	b149      	cbz	r1, 80090ee <__ascii_wctomb+0x16>
 80090da:	2aff      	cmp	r2, #255	; 0xff
 80090dc:	bf8b      	itete	hi
 80090de:	238a      	movhi	r3, #138	; 0x8a
 80090e0:	700a      	strbls	r2, [r1, #0]
 80090e2:	6003      	strhi	r3, [r0, #0]
 80090e4:	2001      	movls	r0, #1
 80090e6:	bf88      	it	hi
 80090e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80090ec:	4770      	bx	lr
 80090ee:	4608      	mov	r0, r1
 80090f0:	4770      	bx	lr

080090f2 <memmove>:
 80090f2:	4288      	cmp	r0, r1
 80090f4:	b510      	push	{r4, lr}
 80090f6:	eb01 0302 	add.w	r3, r1, r2
 80090fa:	d803      	bhi.n	8009104 <memmove+0x12>
 80090fc:	1e42      	subs	r2, r0, #1
 80090fe:	4299      	cmp	r1, r3
 8009100:	d10c      	bne.n	800911c <memmove+0x2a>
 8009102:	bd10      	pop	{r4, pc}
 8009104:	4298      	cmp	r0, r3
 8009106:	d2f9      	bcs.n	80090fc <memmove+0xa>
 8009108:	1881      	adds	r1, r0, r2
 800910a:	1ad2      	subs	r2, r2, r3
 800910c:	42d3      	cmn	r3, r2
 800910e:	d100      	bne.n	8009112 <memmove+0x20>
 8009110:	bd10      	pop	{r4, pc}
 8009112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009116:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800911a:	e7f7      	b.n	800910c <memmove+0x1a>
 800911c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009120:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009124:	e7eb      	b.n	80090fe <memmove+0xc>

08009126 <__malloc_lock>:
 8009126:	4770      	bx	lr

08009128 <__malloc_unlock>:
 8009128:	4770      	bx	lr

0800912a <_realloc_r>:
 800912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912c:	4607      	mov	r7, r0
 800912e:	4614      	mov	r4, r2
 8009130:	460e      	mov	r6, r1
 8009132:	b921      	cbnz	r1, 800913e <_realloc_r+0x14>
 8009134:	4611      	mov	r1, r2
 8009136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800913a:	f7ff be0f 	b.w	8008d5c <_malloc_r>
 800913e:	b922      	cbnz	r2, 800914a <_realloc_r+0x20>
 8009140:	f7ff fdc0 	bl	8008cc4 <_free_r>
 8009144:	4625      	mov	r5, r4
 8009146:	4628      	mov	r0, r5
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	f000 f814 	bl	8009176 <_malloc_usable_size_r>
 800914e:	4284      	cmp	r4, r0
 8009150:	d90f      	bls.n	8009172 <_realloc_r+0x48>
 8009152:	4621      	mov	r1, r4
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff fe01 	bl	8008d5c <_malloc_r>
 800915a:	4605      	mov	r5, r0
 800915c:	2800      	cmp	r0, #0
 800915e:	d0f2      	beq.n	8009146 <_realloc_r+0x1c>
 8009160:	4631      	mov	r1, r6
 8009162:	4622      	mov	r2, r4
 8009164:	f7fd ff06 	bl	8006f74 <memcpy>
 8009168:	4631      	mov	r1, r6
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff fdaa 	bl	8008cc4 <_free_r>
 8009170:	e7e9      	b.n	8009146 <_realloc_r+0x1c>
 8009172:	4635      	mov	r5, r6
 8009174:	e7e7      	b.n	8009146 <_realloc_r+0x1c>

08009176 <_malloc_usable_size_r>:
 8009176:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800917a:	2800      	cmp	r0, #0
 800917c:	f1a0 0004 	sub.w	r0, r0, #4
 8009180:	bfbc      	itt	lt
 8009182:	580b      	ldrlt	r3, [r1, r0]
 8009184:	18c0      	addlt	r0, r0, r3
 8009186:	4770      	bx	lr

08009188 <_init>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	bf00      	nop
 800918c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918e:	bc08      	pop	{r3}
 8009190:	469e      	mov	lr, r3
 8009192:	4770      	bx	lr

08009194 <_fini>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	bf00      	nop
 8009198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919a:	bc08      	pop	{r3}
 800919c:	469e      	mov	lr, r3
 800919e:	4770      	bx	lr
